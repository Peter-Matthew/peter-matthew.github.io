<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【置顶】友链了解一下</title>
    <url>/blog/friend-links/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我？"><a href="#我？" class="headerlink" title="我？"></a>我？</h2><p>张开昕（男，2002/04/20 — ），（经常使用WilliamPeterMatthew、Peter_Matthew作为用户名，）一个曾经的HA省OIer，一名大学本科在读生，喜爱计算机。。。<br><a href="https://www.zhangkai.xin/">.Xin博客</a> <a href="https://www.zhangkai.xin/atom.xml">RSS订阅</a>  </p>
<p><a target="_blank" href="http://sighttp.qq.com/authd?IDKEY=950ae6bebc382b5f992bb615a23334fb90cbfae4201b1473"><img border="0" src="/pic/qq_1.png" alt="与我进行QQ交谈" title="与我进行QQ交谈"></a></p>
<p>Email: <a href="mailto:contact@zhangkai.xin" target="_blank" rel="noopener">contact@zhangkai.xin</a></p>
<h2 id="好友"><a href="#好友" class="headerlink" title="好友"></a>好友</h2><p>Steven7（尚元睿）<a href="https://www.luogu.org/blog/steven7/" target="_blank" rel="noopener">Luogu</a>|<a href="https://syr_steven.coding.me/" target="_blank" rel="noopener">Coding</a><br>树下（柴靖博）<a href="https://www.luogu.org/blog/shuxia/" target="_blank" rel="noopener">Luogu</a>|<a href="https://utjb.gitee.io/" target="_blank" rel="noopener">Gitee</a><br><a href="https://www.luogu.org/blog/czj586240000/" target="_blank" rel="noopener">陈子骏</a><br><a href="https://mywife-kuroko.blog.luogu.org/" target="_blank" rel="noopener">Shirai_Kuroko（李俊逸）</a><br><a href="https://www.luogu.org/blog/asdfghjkl123/" target="_blank" rel="noopener">asdfghjkl123（徐方舟）</a><br><a href="https://www.luogu.org/blog/Davids/" target="_blank" rel="noopener">David_Liu（刘大维）</a><br>Micardi（陈旭坤）<a href="https://micardi.blog.luogu.org/" target="_blank" rel="noopener">Luogu</a>|<a href="https://micardi.github.io/" target="_blank" rel="noopener">GitHub</a><br>cs18（孙锦洋）<a href="https://www.luogu.org/blog/Alice-world/" target="_blank" rel="noopener">Luogu</a>|<a href="https://cs18.coding.me/" target="_blank" rel="noopener">Coding</a><br>(Francis_)noco（孙启皓）<a href="https://fancis-noco.blog.luogu.org/" target="_blank" rel="noopener">Luogu</a>|<a href="https://francis_noco.coding.me/" target="_blank" rel="noopener">Coding</a><br>超多用户名像什么lzx729687719、北巷丶南栀—笙、zz0214之类的（王子骏）<a href="https://www.luogu.org/blog/zz0214/" target="_blank" rel="noopener">luogu</a>|<a href="https://www.zybuluo.com/Bei-S/note/1381469" target="_blank" rel="noopener">作业部落</a><br><a href="https://www.luogu.org/blog/speedforce/" target="_blank" rel="noopener">这个更多。。。什么Shelly、Shelly0420、Curry、Curry0420等等不胜枚举（李明达）</a>  </p>
<h2 id="学弟学妹"><a href="#学弟学妹" class="headerlink" title="学弟学妹"></a>学弟学妹</h2><p>_WA自动机（许铎）<a href="https://www.luogu.org/blog/WA-automaton/" target="_blank" rel="noopener">Luogu</a>|<a href="https://wa-automaton.github.io/" target="_blank" rel="noopener">GitHub</a><br>Vectory（赵正阳）<a href="https://www.luogu.org/blog/user60150/" target="_blank" rel="noopener">Luogu</a>|<a href="http://zzy2002.coding.me/" target="_blank" rel="noopener">Coding</a><br>CTP_314（卢宸昊）<a href="https://www.luogu.org/blog/ctp-314/" target="_blank" rel="noopener">Luogu</a>|<a href="https://ctp314.github.io/" target="_blank" rel="noopener">Github</a><br><a href="https://ztw0609.blog.luogu.org/" target="_blank" rel="noopener">快乐的ZTW（张泰玮）</a>  </p>
<h2 id="学长学姐"><a href="#学长学姐" class="headerlink" title="学长学姐"></a>学长学姐</h2><p><a href="https://pb0207.github.io/" target="_blank" rel="noopener">pb0207（彭博）</a><br><a href="https://prostkhala.github.io/" target="_blank" rel="noopener">ProSTKhala（苏同）</a><br><a href="https://zhangche0526.github.io/" target="_blank" rel="noopener">zhangche0526（张澈）</a><br><a href="https://www.zybuluo.com/KirinBill/note/878927" target="_blank" rel="noopener">KirinBill（徐文博）</a><br><a href="https://www.zybuluo.com/zzzc18/note/789450" target="_blank" rel="noopener">zzzc18（张维璞）</a><br><a href="https://fancypei.github.io/" target="_blank" rel="noopener">Fancy（裴一凡）</a>  </p>
<h2 id="几位OIer"><a href="#几位OIer" class="headerlink" title="几位OIer"></a>几位OIer</h2><p><a href="http://www.koalast.xyz/" target="_blank" rel="noopener">ST.Koala(赵圣元)</a></p>
<h2 id="几位老师"><a href="#几位老师" class="headerlink" title="几位老师"></a>几位老师</h2><p><a href="https://www.luogu.com.cn/user/12287" target="_blank" rel="noopener">yxdgogogo（杨晓东）(Luogu Space)</a><br><a href="https://www.luogu.com.cn/user/35392" target="_blank" rel="noopener">Danbo_1010（贺帅）(Luogu Space)</a>  </p>
<p><img src="/pic/0076VEu5ly1g09gtou8spj30u009eacd.jpg" alt=""></p>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>友链</tag>
      </tags>
  </entry>
  <entry>
    <title>C++内置数据类型与二进制存储</title>
    <url>/blog/Cpp-Binary-Storage/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>平时，很多同学因为两个int类型的变量相乘变成了负数的问题而头疼，将变量换成了long long类型后便可以解决，但不知道为什么。本文笔者就将向大家介绍C++内置数据类型与二进制存储，以便大家理解。</p>
<h2 id="C-内置数据类型"><a href="#C-内置数据类型" class="headerlink" title="C++内置数据类型"></a>C++内置数据类型</h2><p>C++有非常多的数据类型，尤其是STL预写了十分多的数据类型，本文仅介绍原生内置的数据类型。</p>
<h3 id="最基本的内置类型"><a href="#最基本的内置类型" class="headerlink" title="最基本的内置类型"></a>最基本的内置类型</h3><p>C++最基本的内置类型有以下七种：</p>
<ol>
<li>布尔型，关键字是bool</li>
<li>窄字符型，关键字是char</li>
<li>宽字符型，关键字是wchar_t</li>
<li>整型，关键字是int</li>
<li>单精度浮点型，关键字是float</li>
<li>双精度浮点型，关键字是double</li>
<li>无类型，关键字是void</li>
</ol>
<h3 id="基本的内置类型"><a href="#基本的内置类型" class="headerlink" title="基本的内置类型"></a>基本的内置类型</h3><p>同时，一个最基本的内置类型可以被以下的一个或者多个类型修饰符修饰：</p>
<ul>
<li>signed</li>
<li>unsigned</li>
<li>short</li>
<li>long</li>
</ul>
<p>因此，我们组合出了C++基本的内置类型。<br>下表列出了这些基本的内置类型在内存中占用的空间以及该类型的变量所能存储的最小值和最大值。<br><em>1字节为8位。</em></p>
<table>
<thead>
<tr>
<th align="right">关键字（[ ]表示可省略）</th>
<th align="right">占用空间（字节）</th>
<th align="right">变量范围</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="right">bool</td>
<td align="right">1</td>
<td align="right">$0$~$1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">char</td>
<td align="right">1</td>
<td align="right">$-2^7$~$2^7-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">signed char</td>
<td align="right">1</td>
<td align="right">$-2^7$~$2^7-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">unsigned char</td>
<td align="right">1</td>
<td align="right">$0$~$2^8-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">wchar_t</td>
<td align="right">2</td>
<td align="right">$0$~$2^{16}-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">signed wchar_t</td>
<td align="right">2</td>
<td align="right">$0$~$2^{16}-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">unsigned wchar_t</td>
<td align="right">4</td>
<td align="right">$0$~$2^{32}-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">int</td>
<td align="right">2或4</td>
<td align="right">$-2^{15}$~$2^{15}-1$ 或 $-2^{31}$~$2^{31}-1$</td>
<td align="left">16位系统为2字节，32位和64位系统为4字节</td>
</tr>
<tr>
<td align="right">signed [int]</td>
<td align="right">2或4</td>
<td align="right">$-2^{15}$~$2^{15}-1$ 或 $-2^{31}$~$2^{31}-1$</td>
<td align="left">16位系统为2字节，32位和64位系统为4字节</td>
</tr>
<tr>
<td align="right">unsigned [int]</td>
<td align="right">2或4</td>
<td align="right">$0$~$2^{16}-1$ 或 $0$~$2^{32}-1$</td>
<td align="left">16位系统为2字节，32位和64位系统为4字节</td>
</tr>
<tr>
<td align="right">short [int]</td>
<td align="right">2</td>
<td align="right">$-2^{15}$~$2^{15}-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">signed short [int]</td>
<td align="right">2</td>
<td align="right">$-2^{15}$~$2^{15}-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">unsigned short [int]</td>
<td align="right">2</td>
<td align="right">$0$~$2^{16}-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">long [int]</td>
<td align="right">4或8</td>
<td align="right">$-2^{31}$~$2^{31}-1$ 或 $-2^{63}$~$2^{63}-1$</td>
<td align="left">GCC、Clang 等实现中，64位代码的long类型为8字节，而MSVC中则维持4字节</td>
</tr>
<tr>
<td align="right">signed long [int]</td>
<td align="right">4或8</td>
<td align="right">$-2^{31}$~$2^{31}-1$ 或 $-2^{63}$~$2^{63}-1$</td>
<td align="left">GCC、Clang 等实现中，64位代码的long类型为8字节，而MSVC中则维持4字节</td>
</tr>
<tr>
<td align="right">unsigned long [int]</td>
<td align="right">4或8</td>
<td align="right">$0$~$2^{32}-1$ 或 $0$~$2^{64}-1$</td>
<td align="left">GCC、Clang 等实现中，64位代码的long类型为8字节，而MSVC中则维持4字节</td>
</tr>
<tr>
<td align="right">long long [int]</td>
<td align="right">8</td>
<td align="right">$-2^{63}$~$2^{63}-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">signed long long [int]</td>
<td align="right">8</td>
<td align="right">$-2^{63}$~$2^{63}-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">unsigned long long [int]</td>
<td align="right">8</td>
<td align="right">$0$~$2^{64}-1$</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">float</td>
<td align="right">4</td>
<td align="right">$\pm 1.17549\times{10}^{-38}$~$\pm 3.40282\times{10}^{+38}$ ，有效数字7位</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">double</td>
<td align="right">8</td>
<td align="right">$\pm 2.22507\times{10}^{-308}$~$\pm 1.79769\times{10}^{+308}$ ，有效数字15位</td>
<td align="left"></td>
</tr>
<tr>
<td align="right">long double</td>
<td align="right">10或16</td>
<td align="right">$\pm 3.3621\times{10}^{-4932}$~$\pm 1.18973\times{10}^{+4932}$ ，有效数字18位或33位</td>
<td align="left">在大多数平台上的实现与double相同，实现由编译器定义。</td>
</tr>
</tbody></table>
<p><em>如上表所示，加signed修饰符和不加修饰符的内存占用和数据范围一致，一般无需添加。</em>  </p>
<blockquote>
<p>上表所有的数据会由于编译器与系统环境的不同而有所差异。<br>读者可以运行如下代码查看自己电脑对应的数值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;limits&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"bool: \t\t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">bool</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">bool</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"char: \t\t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (<span class="keyword">int</span>)(numeric_limits&lt;<span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t最小值："</span> &lt;&lt; (<span class="keyword">int</span>)(numeric_limits&lt;<span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"signed char: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">signed</span> <span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (<span class="keyword">int</span>)(numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t最小值："</span> &lt;&lt; (<span class="keyword">int</span>)(numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned char: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (<span class="keyword">int</span>)(numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t最小值："</span> &lt;&lt; (<span class="keyword">int</span>)(numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"wchar_t: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">wchar_t</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">wchar_t</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">wchar_t</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"signed wchar_t: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">signed</span> <span class="keyword">wchar_t</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">wchar_t</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">wchar_t</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned wchar_t: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">wchar_t</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">wchar_t</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">wchar_t</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"int: \t\t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"signed int: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">signed</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned int: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"short int: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">short</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">short</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">short</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"signed short int: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">signed</span> <span class="keyword">short</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">short</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">short</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned short int: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">short</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"long int: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"signed long int: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned long int: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"long long int: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"signed long long int: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned long long int: "</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"float: \t\t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">float</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">float</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"double: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">double</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">double</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"long double: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">double</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="二进制存储"><a href="#二进制存储" class="headerlink" title="二进制存储"></a>二进制存储</h2><p>不知道有没有同学好奇过为什么这些类型变量的数据范围是这样的，笔者在这里向大家讲述下这些范围是怎么得出来的。</p>
<h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><p>相信很多同学们都看出来了，这些变量的范围大多都与2有关，这是因为计算机内部存储数据时使用二进制，在向用户显示时使用八进制、十进制、十六进制等进制。</p>
<p>二进制，就是逢二进一的一种进制。对于整数部分，比如 $13_{(10)}$ ，由于 $13_{(10)}=8+4+1=2^3+2^2+2^0$ ，转化为二进制就是 $1101_{(2)}$ ；对于小数部分，比如 $0.6875_{(10)}$ ，由于 $0.6875_{(10)}=0.5+0.125+0.0625=2^{-1}+2^{-3}+2^{-4}$ ，转化为二进制就是 $0.1011_{(2)}$ 。</p>
<p>在计算机中，这些类型的变量存储都是采用二进制的，一般1字节就表示有8位，2字节就表示有16位，以此类推。但是布尔型（关键字bool）和长双精度浮点型（关键字long double）是个例外，布尔型占用1字节但仅使用1位，长双精度浮点数在部分平台上内存占16个字节，但仅使用80位。  </p>
<h3 id="范围为整数的类型的计算方法"><a href="#范围为整数的类型的计算方法" class="headerlink" title="范围为整数的类型的计算方法"></a>范围为整数的类型的计算方法</h3><p>对于非负整数，直接使用二进制表示，所有关键字以unsigned开头的类型，保存的都是非负整数。例如，对unsigned char，是1字节8位无符号二进制数， $13_{(10)}$ 表示为 $00001101_{(2)}$ 。因此，对于这种类型，最小值就是全0， $00000000_{(2)}$ 即 $0_{(10)}$ ，最大值就是全1， $11111111_{(2)}$ 即 $255_{(10)}$ 也就是 $2^8-1_{(10)}$ 。<em>需要注意的是，如果已经到了最大值 $11111111_{(2)}$ 再加1的话，就会变到最小值 $00000000_{(2)}$ ，如果再加1就是 $00000001_{(2)}$ 。</em><br>对于负整数，我们将其分为符号和数字两部分。对于符号，由于二进制无法直接保存符号，我们需要转化，由于一个数只有有符号和无符号两种情况，因此我们取变量中最前面的一位作为符号位，0表示无符号，1表示有符号；对于数字，有原码、反码、补码和移码四种编码方式，在下文介绍。</p>
<h4 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h4><p>原码是指负数与其相反数原来的编码相同，即一个数与其相反数只有符号位不同。例如，对char，是1字节8位二进制数， $-13_{(10)}$ 用原码表示为 $10001101_{(2)}$ 。<br>这种表示方法有两个问题：</p>
<ol>
<li>正数运算与负数运算不同，混用很不方便。<br>例如， $12_{(10)}$ 、 $13_{(10)}$ 、 $-12_{(10)}$ 和 $-13_{(10)}$ 分别表示为 $00001100_{(2)}$ 、 $00001101_{(2)}$ 、 $10001100_{(2)}$ 和 $10001101_{(2)}$ 。<br>在十进制下从 $12_{(10)}$ 变到 $13_{(10)}$ 是加1，在二进制下 $00001100_{(2)}$ 变到 $00001101_{(2)}$ 是加1，即对于正数，十进制加1是二进制加1。<br>但在十进制下 $-13_{(10)}$ 变到 $-12_{(10)}$ 是加1，在二进制下 $10001101_{(2)}$ 变到 $10001100_{(2)}$ 是减1，即对于负数，十进制加1是二进制减1。<br>因此不统一。</li>
<li>存在两个0。<br>即存在 $00000000_{(2)}$ 和 $10000000_{(2)}$ 两个 $0_{(10)}$ 。<br>在十进制下从 $-1_{(10)}$ 加到 $1_{(10)}$ 需要加2，即从 $-1_{(10)}$ 加1变到 $0_{(10)}$ ，再加1变到 $1_{(10)}$ 。<br>但在二进制下从 $10000001_{(2)}$ 加到 $00000001_{(2)}$ 需要加3，即从 $10000001_{(2)}$ 加1变到 $10000000_{(2)}$ ，再加1变到 $00000000_{(2)}$ ，然后再加1变到 $00000001_{(2)}$ 。</li>
</ol>
<h4 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h4><p>反码是指负数与其相反数原来的编码相反，即一个数与其相反数的每一位都不一样。例如，对char，是1字节8位二进制数， $-13_{(10)}$ 用反码表示为 $11110010_{(2)}$ 。<br>这种表示方法解决了一个问题：</p>
<ol>
<li>正数运算与负数运算不同的问题。<br>例如， $12_{(10)}$ 、 $13_{(10)}$ 、 $-12_{(10)}$ 和 $-13_{(10)}$ 分别表示为 $00001100_{(2)}$ 、 $00001101_{(2)}$ 、 $11110011_{(2)}$ 和 $11110010_{(2)}$ 。<br>在十进制下从 $12_{(10)}$ 变到 $13_{(10)}$ 是加1，在二进制下 $00001100_{(2)}$ 变到 $00001101_{(2)}$ 是加1，即对于正数，十进制加1是二进制加1。<br>在十进制下 $-13_{(10)}$ 变到 $-12_{(10)}$ 是加1，在二进制下 $11110010_{(2)}$ 变到 $11110011_{(2)}$ 是加1，即对于负数，十进制加1是二进制加1。<br>由此统一。</li>
</ol>
<p>但这种表示方法还存在一个问题：</p>
<ol>
<li>存在两个0。<br>即存在 $00000000_{(2)}$ 和 $11111111_{(2)}$ 两个 $0_{(10)}$ 。<br>在十进制下从 $-1_{(10)}$ 加到 $1_{(10)}$ 需要加2，即从 $-1_{(10)}$ 加1变到 $0_{(10)}$ ，再加1变到 $1_{(10)}$ 。<br>但在二进制下从 $11111110_{(2)}$ 加到 $00000001_{(2)}$ 需要加3，即从 $11111110_{(2)}$ 加1变到 $11111111_{(2)}$ ，因为已经全是1的缘故所以再加1变到 $00000000_{(2)}$ ，然后再加1变到 $00000001_{(2)}$ 。</li>
</ol>
<h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><p>补码是在反码的基础上通过将负数所有的数的编码加1得到的。例如，对char，是1字节8位二进制数， $-13_{(10)}$ 用反码表示为 $11110011_{(2)}$ 。<br>这种表示方法又解决了一个问题：</p>
<ol>
<li>两个0的问题。<br>即这种表示方法只存在 $00000000_{(2)}$ 一个 $0_{(10)}$ 。<br>在十进制下从 $-1_{(10)}$ 加到 $1_{(10)}$ 需要加2，即从 $-1_{(10)}$ 加1变到 $0_{(10)}$ ，再加1变到 $1_{(10)}$ 。<br>在二进制下从 $11111111_{(2)}$ 加到 $00000001_{(2)}$ 也只需要加2，即 $11111111_{(2)}$ 因为已经全是1的缘故所以加1变到 $00000000_{(2)}$ ，再加1变到 $00000001_{(2)}$ 。</li>
</ol>
<p>计算机内部对于负数采用的是补码的表示方法。那么，对char，是1字节8位无符号二进制数，最小值就是符号位为1，其他位为0， $10000000_{(2)}$ 即 $-128_{(10)}$ 也就是 $-2^7_{(10)}$ ，最大值就是符号位为0，其他位为1， $01111111_{(2)}$ 即 $127_{(10)}$ 也就是 $2^7-1_{(10)}$ 。</p>
<h4 id="移码"><a href="#移码" class="headerlink" title="移码"></a>移码</h4><p>移码，是取消最高位作为符号位的设定，转而将所有数字向正数方向移动一定数值，使负数最小值为二进制全0，正数最大值为二进制全1。<br>移码是在补码的基础上提出的一种编码方式，思想与补码移动一位弥补反码的思路一致。一般，对于一个n位二进制数，其移码的偏移值为 $2^{n-1}-1$ ，例如，对于一个1字节8位二进制数，其移码的偏移值位 $2^{8-1}-1=127_{(10)}$ ，如果用移码表示 $13_{(10)}$ 和 $-13_{(10)}$ ，就需要先对其加上偏移值得到 $140_{(10)}$ 和 $114_{(10)}$ ，然后转换位二进制得到 $10001100_{(2)}$ 和 $01110010_{(2)}$ 。<br>当然，偏移值也可以为其他值。</p>
<p><em>一般整数不常用移码进行表示，除了浮点数的指数部分。</em></p>
<h3 id="浮点数范围的计算方法"><a href="#浮点数范围的计算方法" class="headerlink" title="浮点数范围的计算方法"></a>浮点数范围的计算方法</h3><p>刚才介绍的是大部分类型变量的数据范围计算的方法，下面我们介绍一下比较特别的一类数据类型——浮点数。<br>浮点数，是属于有理数中某特定子集的数的数字表示，在计算机中用以近似表示任意某个实数。例如，0.00210245、5012.35和3140520000都是浮点数。<br>浮点数在计算机中表示时使用的是一种以2为底数科学计数法。我们首先了解下以10为底数的科学计数法是怎么表示一个数的，科学计数法分为三部分，符号、指数和因数三部分。符号是指正负号，指数是指十次方幂的指数，因数就是和幂相乘的因数，因数大于等于1小于10，因数又分为整数部分和小数部分。例如对于 $5012.35$ ，应当写成 $5.01235 \times 10^3$ ，其本质是 $( 5 \times 10^{0} + 1 \times 10^{-2} + 2 \times 10^{-3} + 3 \times 10^{-4} + 5 \times 10^{-5} ) \times 10^3$ 。<br>以2为底数科学计数法与以10为底的科学计数法类似，例如对于 $5012.35_{(10)}$ 即 $1001110010100.010110011001100110011001100110011001101_{(2)}$ ，应当写成 $1.001110010100010110011001100110011001100110011001101 \times 2^{12}$ ，其本质是 $( 1 \times 2^{0} + 1 \times 2^{-3} + 1 \times 2^{-4} + 1 \times 2^{-5} + \cdots + 1 \times 2^{-51} ) \times 2^{12}$ 。</p>
<h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p>C/C++语言编辑器采用IEEE 754标准，对float和double都采用下图所示的符号、指数和小数三个域划分，整数位不写入内存。<br><img src="/pic/CBinS01.png" alt="IEEE 754浮点数的三个域"><br>比较特别的一个是long double，采用符号、指数、整数、小数四个域划分。<br>三个关键字每个域对应的长度如下表所示：</p>
<table>
<thead>
<tr>
<th align="right">关键字</th>
<th align="right">符号</th>
<th align="right">指数</th>
<th align="right">整数</th>
<th align="right">小数</th>
<th align="right">总长度</th>
</tr>
</thead>
<tbody><tr>
<td align="right">float</td>
<td align="right">1</td>
<td align="right">8</td>
<td align="right">0</td>
<td align="right">23</td>
<td align="right">32</td>
</tr>
<tr>
<td align="right">double</td>
<td align="right">1</td>
<td align="right">11</td>
<td align="right">0</td>
<td align="right">52</td>
<td align="right">64</td>
</tr>
<tr>
<td align="right">long double</td>
<td align="right">1</td>
<td align="right">15</td>
<td align="right">1</td>
<td align="right">63</td>
<td align="right">80</td>
</tr>
</tbody></table>
<p>float的示意图如下：<br><img src="/pic/CBinS02.png" alt="float三个域的示意图"><br>double的示意图如下：<br><img src="/pic/CBinS03.png" alt="double三个域的示意图"><br>long double的示意图如下：<br><img src="/pic/CBinS04.png" alt="long double三个域的示意图"><br>这里的指数使用的是偏移值为 $2^{n-1}-1$ 的移码（已在上文介绍）。<br>按照这个规则，大家就会得到5012.35转换得到的三个类型的数<br>float： $ \color{lightskyblue}{0}\color{lightseagreen}{10001011}\color{hotpink}{00111001010001011001101} $ （近似处理）<br>double： $ \color{lightskyblue}{0}\color{lightseagreen}{10000001011}\color{hotpink}{0011100101000101100110011001100110011001100110011010} $<br>long double： $ \color{lightskyblue}{0}\color{lightseagreen}{100000000001011}\color{pink}{1}\color{hotpink}{001110010100010110011001100110011001100110011001101000000000000} $ </p>
<h4 id="规约形式的浮点数"><a href="#规约形式的浮点数" class="headerlink" title="规约形式的浮点数"></a>规约形式的浮点数</h4><p>如果浮点数指数的移码值不为全0和全1（全0和全1有特殊用途），且在科学计数法的表示方式下，整数部分是1（小数部分值为全0到全1），那么这个浮点数被称为规约形式的浮点数。“规约”是指用唯一确定的浮点形式表示一个值。</p>
<h4 id="非规约形式的浮点数"><a href="#非规约形式的浮点数" class="headerlink" title="非规约形式的浮点数"></a>非规约形式的浮点数</h4><p>如果浮点数指数的移码值为全0 ，小数部分非全0，那么这个浮点数是非规约形式的浮点数。一般只有某个数相当接近0的时候才会使用非规约形式的浮点数表示。<br>实际上，非规约形式的浮点数是可以正常使用的，只是它的绝对值小于所有规约形式的浮点数，更接近0。<br>需要注意的是，对非规约形式的浮点数，虽然其指数的移码值为全0，但值并不是最小值，这是因为，对非规约形式的浮点数，其指数的移码偏移值为 $2^{n-1}-2$ ，例如float非规约形式的浮点数其指数为-126而不是-127。<br>同时，非规约形式的浮点数其因数的整数部分为0，整个因数大于0小于1。</p>
<h4 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h4><p>这里有三个特殊值需要指出：</p>
<ol>
<li>如果指数为全0并且因数的小数部分是全0，这个数是±0（取决于符号位）。</li>
<li>如果指数为全1并且因数的小数部分是全0，这个数是±∞（取决于符号位）。</li>
<li>如果指数为全1并且因数的小数部分不是全0，这表示的不是一个数字（NaN,Not a Number）。</li>
</ol>
<p>以上，对浮点数的形式总结如下</p>
<table>
<thead>
<tr>
<th align="left">形式</th>
<th align="left">指数</th>
<th align="left">小数部分</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">全0</td>
<td align="left">全0</td>
</tr>
<tr>
<td align="left">非规约形式</td>
<td align="left">全0</td>
<td align="left">不为全0</td>
</tr>
<tr>
<td align="left">规约形式</td>
<td align="left">不为全0和全1</td>
<td align="left">无要求</td>
</tr>
<tr>
<td align="left">∞</td>
<td align="left">全1</td>
<td align="left">全0</td>
</tr>
<tr>
<td align="left">NaN</td>
<td align="left">全1</td>
<td align="left">不为全0</td>
</tr>
</tbody></table>
<p>由此，我们计算出了三类浮点数规约形式的数据范围。</p>
<h4 id="关于精度"><a href="#关于精度" class="headerlink" title="关于精度"></a>关于精度</h4><p>float、double和long double的小数部分存储位数分别为23、52、63，所以一共记录的二进制数位数就为24、53、64。<br> $\lg 2^{24}\approx 7.22$<br> $\lg 2^{53}\approx 15.95$<br> $\lg 2^{64}\approx 19.27$<br>由上计算可得，float可保证7位十进制有效数字，double可保证15位十进制有效数字，long double可保证19位十进制有效数字。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>中文维基百科：<br><a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B_(C%E8%AF%AD%E8%A8%80)" target="_blank" rel="noopener">数据类型 (C语言)</a><br><a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E7%AC%A6%E8%99%9F%E6%95%B8%E8%99%95%E7%90%86" target="_blank" rel="noopener">有符号数处理</a><br><a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE 754</a></p>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
        <tag>CPPUAPA周刊</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 CPPU第五届“精武杯”计算机算法设计网络赛</title>
    <url>/blog/solution-cppu2021/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本篇题解所使用的语言是C++，部分其他语言的选手可能需要理解做法后自行编写对应语言的代码。</p>
<p><strong>本次比赛我认为值得一提的是7-1、7-6、7-7、7-10、和7-15，可以考虑重点看看这几道题的代码。</strong></p>
<h2 id="7-1-连续因子"><a href="#7-1-连续因子" class="headerlink" title="7-1 连续因子"></a>7-1 连续因子</h2><p>一个正整数 N 的因子中可能存在若干连续的数字。例如 630 可以分解为 3×5×6×7，其中 5、6、7 就是 3 个连续的数字。给定任一正整数 N，要求编写程序求出最长连续因子的个数，并输出最小的连续因子序列。</p>
<h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入在一行中给出一个正整数 N（$1$&lt;N&lt;$2^{​31}$）。</p>
<h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>首先在第 1 行输出最长连续因子的个数；然后在第 2 行中按 <code>因子1*因子2*……*因子k</code> 的格式输出最小的连续因子序列，其中因子按递增顺序输出，1 不算在内。</p>
<h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">630</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span>*<span class="number">6</span>*<span class="number">7</span></span><br></pre></td></tr></table></figure>

<p><strong>鸣谢用户 漏穿雪 补充数据！</strong></p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>我们考虑从2开始枚举因子1，然后判断因子1开始的k在满足题目要求的连续时最长可以为多少，在出现更大的k时更新答案。<br>例如，针对630，我们从2开始枚举出了以下几种情况</p>
<ul>
<li>2*3</li>
<li>3</li>
<li>5*6*7</li>
<li>6*7</li>
<li>7</li>
<li>9*10</li>
<li>10</li>
<li>14</li>
<li>15</li>
<li>18</li>
<li>21</li>
</ul>
<p>考虑我们只需要枚举到$\sqrt{N}$，这是因为其余的部分k只能为1。<br>由于 $13!=6,227,020,800 &gt; 2^{31}$，故k最大不会超过11，又由于对于一个素数，我们判断的时间是$O(\sqrt{N})$，所以整体的时间复杂度就是$O(10\sqrt{N})$。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,an,sqn;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;sqn=<span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sqn;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        m=n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(m%j!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans&lt;j-i)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans=j-i;</span><br><span class="line">                    an=i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            m/=j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ans)</span><br><span class="line">        ans=<span class="number">1</span>,an=n; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ans;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c%d"</span>,i==<span class="number">0</span>?<span class="string">'\n'</span>:<span class="string">'*'</span>,i+an);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-2-我也会加密"><a href="#7-2-我也会加密" class="headerlink" title="7-2 我也会加密"></a>7-2 我也会加密</h2><p>字符串加密可以理解为对字符串的一种固定方式的变形，现定义一种基于种子数字的加密方法，首先计算种子数字，计算方法为将该字符串的长度对5求余加1，以该数字为间隔，得到原字符串的子串并求逆得到最终的密码。</p>
<h3 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h3><p>原字符串</p>
<h3 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h3><p>加密后的字符串</p>
<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">abcdefghijklmn</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">kfa</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>按照题意模拟即可</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">char</span> sta[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> l;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="keyword">int</span> n=s.length()%<span class="number">5</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length();i+=n)</span><br><span class="line">    &#123;</span><br><span class="line">        sta[l++]=s[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=l<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,sta[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-3-骑车还是走路？"><a href="#7-3-骑车还是走路？" class="headerlink" title="7-3 骑车还是走路？"></a>7-3 骑车还是走路？</h2><p>在校园里，没有自行车，上课办事会很不方便。但实际上，并非去办任何事情都是骑车快。因为骑车总要找车、开锁、停车、锁车等，这要耽误一些时间。假设找到自行车，开锁并骑上自行车的时间为27秒；停车锁车的时间为23秒；步行每秒行走1.2米，骑车每秒行走3.0米。 编写程序判断走不同的距离去办事，是骑车快还是走路快。</p>
<h3 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入一个数，表示距离</p>
<h3 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h3><p>如果输入的距离骑车快，输出”Bike”；如果是走路快，输出”Walk”；如果一样快，输出”All”。</p>
<h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Bike</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>按照题意模拟即可</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> bike,walk,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    bike=<span class="number">27</span>+<span class="number">23</span>+m/<span class="number">3.0</span>;</span><br><span class="line">    walk=m/<span class="number">1.2</span>;</span><br><span class="line">    <span class="keyword">if</span>(bike&lt;walk)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Bike"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(bike&gt;walk)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Walk"</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"All"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-4-虫子吃苹果"><a href="#7-4-虫子吃苹果" class="headerlink" title="7-4 虫子吃苹果"></a>7-4 虫子吃苹果</h2><p>你买了一箱n个苹果，很不幸的是买完时箱子里混进了一条虫子。虫子每x小时能吃掉一个苹果，假设虫子在吃完一个苹果之前不会吃另一个，那么经过y小时你还有多少个完整的苹果？ 编写程序进行计算。</p>
<h3 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h3><p>在同一行输入n、x和y，以逗号隔开</p>
<h3 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h3><p>还剩下完整的苹果个数</p>
<h3 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例"></a>输入样例</h3><p>以下输入表示：一箱10个苹果，虫子每4个小时吃一个苹果，经过9小时</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>,<span class="number">4</span>,<span class="number">9</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例"></a>输出样例</h3><p>以下输出表示：还剩下几个完整的苹果？</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>按照题意模拟即可</p>
<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d,%d,%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line">    n-=(k+m<span class="number">-1</span>)/m;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-5-纵横"><a href="#7-5-纵横" class="headerlink" title="7-5 纵横"></a>7-5 纵横</h2><p>莫大侠练成纵横剑法，走上了杀怪路，每次仅出一招。这次，他遇到了一个正方形区域，由n×n个格子构成，每个格子（行号、列号都从1开始编号）中有若干个怪。莫大侠施展幻影步，抢占了一个格子，使出绝招“横扫四方”，就把他上、下、左、右四个直线方向区域内的怪都灭了（包括抢占点的怪）。请帮他算算他抢占哪个位置使出绝招“横扫四方”能杀掉最多的怪。如果有多个位置都能杀最多的怪，优先选择按行优先最靠前的位置。例如样例中位置(1,2)、(1,3)，(3,2)，(3,3)都能杀5个怪，则优先选择位置(1,2)。</p>
<h3 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h3><p>首先输入一个正整数T，表示测试数据的组数，然后是T组测试数据。对于每组测试，第一行输入n（3≤n≤20），第二行开始的n行输入n×n个格子中的怪数（非负整数）。</p>
<h3 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h3><p>对于每组测试数据输出一行，包含三个整数，分别表示莫大侠抢占点的行号和列号及所杀的最大怪数，数据之间留一个空格。</p>
<h3 id="输入样例-4"><a href="#输入样例-4" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-4"><a href="#输出样例-4" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>循环暴力求解即可。这里可以采用行列记录的方法优化一维的复杂度。</p>
<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,a[<span class="number">25</span>][<span class="number">25</span>],col[<span class="number">25</span>],rol[<span class="number">25</span>];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;anp;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(col,<span class="number">0</span>,<span class="keyword">sizeof</span>(col));</span><br><span class="line">        <span class="built_in">memset</span>(rol,<span class="number">0</span>,<span class="keyword">sizeof</span>(rol));</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                col[i]+=a[i][j];</span><br><span class="line">                rol[j]+=a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> nw=col[i]+rol[j]-a[i][j];</span><br><span class="line">                <span class="keyword">if</span>(nw&gt;ans)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans=nw;</span><br><span class="line">                    anp=make_pair(i,j);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,anp.first,anp.second,ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-6-小明打字"><a href="#7-6-小明打字" class="headerlink" title="7-6 小明打字"></a>7-6 小明打字</h2><p>小明正使用Microsoft Word打一篇文档，文档只包含a-z的小写字母和空格，在打字过程中可能会一次或多次按下Home键、End键、←方向键、→方向键、Insert键、Backspace键。请编写程序，给定小明在键盘上按键的序列，输出小明屏幕上最终显示的文本。 提示：Home键会将当前光标移至文本开始位置，End键当前光标移至文本尾，←键和→键会使当前光标左移或右移一个位置（如果光标在文档头则无法左移，光标在文档尾则无法右移），Insert键会在插入和替换文本间切换（默认是插入状态），Backspace键会删除当前光标前的一个字符。</p>
<h3 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入为不超过50000个字符，表示小明的按键序列。包含a-z的小写字母、空格以及字符[、]、{、}、-、=。其中字符“[”表示Home键，“]”表示End键，“{”表示←键，“}”表示→键，“-”表示Insert键，“=”表示Backspace键。</p>
<h3 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出为在小明屏幕上最终显示的文本。最后一个字母后没有回车或换行。</p>
<h3 id="输入样例1"><a href="#输入样例1" class="headerlink" title="输入样例1"></a>输入样例1</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">jilin[i lofe&#123;&#123;-v-&#125; ] <span class="attribute">universiti</span>=y</span><br></pre></td></tr></table></figure>

<h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1"></a>输出样例1</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">i</span> love jilin university</span><br></pre></td></tr></table></figure>

<h3 id="输入样例2"><a href="#输入样例2" class="headerlink" title="输入样例2"></a>输入样例2</h3><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">abcd[<span class="keyword">c</span>-de</span><br></pre></td></tr></table></figure>

<h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2"></a>输出样例2</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">cdecd</span></span><br></pre></td></tr></table></figure>

<h3 id="输入样例3"><a href="#输入样例3" class="headerlink" title="输入样例3"></a>输入样例3</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">[</span>]][][]happy=birthday</span><br></pre></td></tr></table></figure>

<h3 id="输出样例3"><a href="#输出样例3" class="headerlink" title="输出样例3"></a>输出样例3</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">happbirthday</span></span><br></pre></td></tr></table></figure>

<h3 id="输入样例4"><a href="#输入样例4" class="headerlink" title="输入样例4"></a>输入样例4</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">efg</span><span class="title">[</span><span class="comment">bbb&#125;&#125;=&#125;&#125;&#125;&#125;=</span><span class="title">[</span><span class="comment">&#123;&#123;&#123;&#123;a</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例4"><a href="#输出样例4" class="headerlink" title="输出样例4"></a>输出样例4</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">abbbe</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>对于C++选手来说，此题是一道STL的模板题。<br>我们设定两个值，当前光标和是否插入状态，并将题目中给的几个操作进行转换：</p>
<ul>
<li>[ 转换为 将光标移到开头</li>
<li>] 转换为 将光标移到结尾</li>
<li>{ 转换为 将光标左移一位，这里要注意如果光标已经在开头，就不要移动</li>
<li>} 转换为 将光标右移一位，这里要注意如果光标已经在结尾，就不要移动</li>
<li>- 转换为 切换插入和替换状态的标记值</li>
<li>= 转换为删除光标前一位字符，并将光标左移一位</li>
<li>其他字符<ul>
<li>如果为插入状态，则在光标位置插入字符并将光标右移一位</li>
<li>如果为替换状态，则将光标位置的字符替换并将光标右移一位</li>
</ul>
</li>
</ul>
<p>我们可以利用string类的如下函数</p>
<ul>
<li>erase(pos=0,len=npos)</li>
<li>insert(pos,n,c)</li>
</ul>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> str,s;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">int</span> nw=<span class="number">0</span>,ist=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getline(<span class="built_in">cin</span>,str);</span><br><span class="line">    <span class="keyword">int</span> l=str.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c=str[i];</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="string">'-'</span>)ist^=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'['</span>)nw=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">']'</span>)nw=s.length();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'&#123;'</span>)nw=max(<span class="number">0</span>,nw<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'&#125;'</span>)nw=min((<span class="keyword">int</span>)s.length(),nw+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c==<span class="string">'='</span>)</span><br><span class="line">            s.erase(nw=max(<span class="number">0</span>,nw<span class="number">-1</span>),<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ist)</span><br><span class="line">                s.insert(nw,<span class="number">1</span>,c);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                s[nw]=c;</span><br><span class="line">            nw++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-7-锯齿几何"><a href="#7-7-锯齿几何" class="headerlink" title="7-7 锯齿几何"></a>7-7 锯齿几何</h2><p>锯齿是由严格的高低不同的刀片组成，而锯齿数组指的是数组中的相邻元素一高一低严格不同。一个元素和两个不同的元素是齿数较少的锯齿数组，因空集属于任何子集，我们规定，空数组也是锯齿数组。如{2，30，5，7}是锯齿数组，而{2，2，30，8，5，7}不是锯齿数组，但我们可以删除2和8，构成长度为4的新的锯齿数组。编写程序，对输入的整数数组，计算删除若干元素后，构成的最长的锯齿数组（可删除元素，但其它元素的相对位置保持不变）的长度。</p>
<h3 id="输入样例1-1"><a href="#输入样例1-1" class="headerlink" title="输入样例1"></a>输入样例1</h3><p>第一行，数组长度N，第二行是空格分隔的N个整数。</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br><span class="line"><span class="symbol">18 </span><span class="number">45</span> <span class="number">30</span> <span class="number">50</span> <span class="number">10</span> <span class="number">17</span> <span class="number">8</span> <span class="number">25</span> <span class="number">19</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例1-1"><a href="#输出样例1-1" class="headerlink" title="输出样例1"></a>输出样例1</h3><p>输出构成的最长的锯齿数组（本例中数据就是锯齿数组，故长度就是9）。</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<h3 id="输入样例2-1"><a href="#输入样例2-1" class="headerlink" title="输入样例2"></a>输入样例2</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">45</span> <span class="number">30</span> <span class="number">50</span> <span class="number">10</span> <span class="number">17</span> <span class="number">10</span> <span class="number">9</span> <span class="number">8</span> <span class="number">25</span> <span class="number">19</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例2-1"><a href="#输出样例2-1" class="headerlink" title="输出样例2"></a>输出样例2</h3><p>输出构成的最长的锯齿数组（本例中数据，至少可删除成上例中的锯齿数组，故长度最大长度也是9）。</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<h3 id="输入样例3-1"><a href="#输入样例3-1" class="headerlink" title="输入样例3"></a>输入样例3</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">18 </span><span class="number">15</span> <span class="number">9</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例3-1"><a href="#输出样例3-1" class="headerlink" title="输出样例3"></a>输出样例3</h3><p>输出构成的最长的锯齿数组（最多只能够留下两个齿）。</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>一道双状态dp题。<br>我们对于每个点，都设计两个状态，这个点到下一个点是变高up和这个点到下一个点是变低dw两个状态，状态的值表示从这个点开始往后符合要求的最长长度。<br>初始状态每个点的两个状态都是1，因为每个点都可以仅剩下自己。<br>转移的方法是从后向前转移，后面点的dw状态可以转移给前面点的up状态当且仅当后面的点的高度大于前面的点；后面点的up状态可以转移给前面点的dw状态当且仅当后面的点的高度小于前面的点。<br>方程为<br>$up_i=max(up_i,dw_j+1),i&lt;j,a_i&lt;a_j$<br>$dw_i=max(dw_i,up_j+1),i&lt;j,a_i&gt;a_j$<br>最终状态是$max(max(up_i,dw_i))$</p>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1005</span>],up[<span class="number">1005</span>],dw[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        up[i]=dw[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[i])</span><br><span class="line">                up[i]=max(up[i],dw[j]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[j]&lt;a[i])</span><br><span class="line">                dw[i]=max(dw[i],up[j]+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ans=max(ans,max(up[i],dw[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-8-秋天的第一杯奶茶"><a href="#7-8-秋天的第一杯奶茶" class="headerlink" title="7-8 秋天的第一杯奶茶"></a>7-8 秋天的第一杯奶茶</h2><p>2020年入秋后，朋友圈和微博上疯狂转发着自己收到的“秋天的第一杯奶茶”。然而小明却什么也没有收到，但是学校举行了这样一场活动：通过5道编写程序题目中的3道即可获得一杯奶茶。小明也想喝到秋天的第一杯奶茶。下面就请你判断小明是否有机会拿到学校的奶茶。<br><img src="/pic/cppusf2021-7-8.jpg" alt="cppusf2021-7-8"></p>
<h3 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h3><p>两行，第一行给出一个整数N（1&lt;=N&lt;=100），随后N行，每行给出一个长度为5的字符串（仅包含Y和N，分别代表5个题目小明是否通过），Y代表本题通过，N代表本题未通过。</p>
<h3 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h3><p>可以拿到奶茶输出“YES”，否则输出“NO”（输出不含双引号）。</p>
<h3 id="输入样例-5"><a href="#输入样例-5" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">NNNYN</span><br><span class="line">NNYYY</span><br><span class="line">YYYNN</span><br></pre></td></tr></table></figure>

<h3 id="输出样例-5"><a href="#输出样例-5" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="literal">NO</span></span><br><span class="line"><span class="literal">YES</span></span><br><span class="line"><span class="literal">YES</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>按照题意模拟即可</p>
<h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ny,nn;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ny=<span class="number">0</span>,nn=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%c"</span>,&amp;c);</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'Y'</span>)</span><br><span class="line">                ny++;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'N'</span>)</span><br><span class="line">                nn++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ny&gt;nn)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-9-镇长修路"><a href="#7-9-镇长修路" class="headerlink" title="7-9 镇长修路"></a>7-9 镇长修路</h2><p>某地对偏远地区实行“村村通”工程，目标是使整个地区任何两个村落间都可以实现快速交通（但不一定有直接的快速道路相连，只要互相间接通过快速路可达即可）。现得到拟修建道路的费用，现请你编写程序，计算出全地区畅通需要的最低成本。</p>
<h3 id="输入格式-7"><a href="#输入格式-7" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入的第一行给出村庄数目N (1≤N≤20)和拟修建的道路数M</p>
<p>接下来的M行对应修建每条村庄间道路的成本，每行给出3个正整数，分别是两个村庄的编号（从1编号到N），此两村庄间道路的成本。</p>
<h3 id="输出格式-7"><a href="#输出格式-7" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出需修建的道路，每行输出一条道路，形式如：道路1编号,道路2编号,费用。(编号小的放前面，编号大的放后面，逗号为英文状态下的逗号)</p>
<p>修建时优先修建最短的路，如果有多条路最短，则优先修建道路1编号小的路，再如果两条路道路1编号相同，则优先输出道路2小的路</p>
<h3 id="输入样例-6"><a href="#输入样例-6" class="headerlink" title="输入样例"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">4 </span><span class="number">6</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-6"><a href="#输出样例-6" class="headerlink" title="输出样例"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span></span><br><span class="line"><span class="number">1</span>,<span class="number">4</span>,<span class="number">1</span></span><br><span class="line"><span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解"></a>题解</h3><p>最小生成树模板题</p>
<h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> fa[<span class="number">25</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> fa[x]==x?x:fa[x]=getfa(fa[x]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=getfa(x),fy=getfa(y);</span><br><span class="line">    <span class="keyword">if</span>(fx==fy)<span class="keyword">return</span> ;</span><br><span class="line">    fa[fx]=fy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;e[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(edge a,edge b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.w!=b.w)</span><br><span class="line">        <span class="keyword">return</span> a.w&lt;b.w;</span><br><span class="line">    <span class="keyword">if</span>(a.u!=b.u)</span><br><span class="line">        <span class="keyword">return</span> a.u&lt;b.u;</span><br><span class="line">    <span class="keyword">return</span> a.v&lt;b.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;e[i].u,&amp;e[i].v,&amp;e[i].w);</span><br><span class="line">        <span class="keyword">if</span>(e[i].u&gt;e[i].v)</span><br><span class="line">        swap(e[i].u,e[i].v);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(e+<span class="number">1</span>,e+m+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">int</span> added=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m&amp;&amp;added&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> fu=getfa(e[i].u),fv=getfa(e[i].v);</span><br><span class="line">        <span class="keyword">if</span>(fu==fv)<span class="keyword">continue</span>;</span><br><span class="line">        merge(fu,fv);</span><br><span class="line">        added++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d,%d,%d\n"</span>,e[i].u,e[i].v,e[i].w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-10-装修"><a href="#7-10-装修" class="headerlink" title="7-10 装修"></a>7-10 装修</h2><p>胡老师买了新房，正在搞装修，装修公司太坑了，于是胡老师就自己找装修师傅来干活，但是装修的很多环节是环环相扣的，比如，要先刷墙才能铺木地板，有些环节呢，又是互相不干扰的，比如厨房的装修和窗帘的安装。但是每个装修师傅的时间又受他接的单所限制。所以必须仔细安排才能把房子装修好。胡老师收到了若干种不同装修师傅的安排，他想尽快装修好了入住，你能帮他吗？</p>
<h3 id="输入格式-8"><a href="#输入格式-8" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行输入正整数T（T&lt; 20），表示有T个方案，对于每一个方案，第一行输入两个正整数N（&lt; 100）和M，其中N是装修时间点的个数，从0开始编号，M是装修环节的个数。随后M行，每行输入三个非负整数表示一个装修环节，<code>Start End Delay</code>,Start表示开始时间点编号，End表示结束时间点编号，Delay表示装修需要时间。</p>
<h3 id="输出格式-8"><a href="#输出格式-8" class="headerlink" title="输出格式"></a>输出格式</h3><p>对每一个方案，如果方案可行，则在一行里输入最早结束的时间，如果不可行，则输出<code>Impossible!</code>。</p>
<h3 id="输入样例-7"><a href="#输入样例-7" class="headerlink" title="输入样例"></a>输入样例</h3><p>在这里给出一组输入。例如：</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="symbol">7 </span><span class="number">10</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">3</span> <span class="number">6</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">4 </span><span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="symbol">5 </span><span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">3</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">0</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-7"><a href="#输出样例-7" class="headerlink" title="输出样例"></a>输出样例</h3><p>在这里给出相应的输出。例如：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line">Impossible!</span><br></pre></td></tr></table></figure>

<h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解"></a>题解</h3><p>拓扑题，记录每个点的入度，从无入度的点开始访问，访问到一条边减少到点的入度，每个点开始访问的时间为最后一条前边遍历完成的时间，答案为最后一个被遍历到的点的访问时间。</p>
<h3 id="代码-9"><a href="#代码-9" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt,ans;</span><br><span class="line"><span class="keyword">int</span> inc[<span class="number">105</span>],head[<span class="number">105</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ne,to,w;</span><br><span class="line">&#125;e[<span class="number">200005</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> st[<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clea</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(inc,<span class="number">0</span>,<span class="keyword">sizeof</span>(inc));</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="built_in">memset</span>(e,<span class="number">0</span>,<span class="keyword">sizeof</span>(e));</span><br><span class="line">    <span class="built_in">memset</span>(st,<span class="number">0</span>,<span class="keyword">sizeof</span>(st));</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())q.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;head[u],v,w&#125;;head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        clea();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v,w;i&lt;=m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);u++;v++;</span><br><span class="line">            inc[v]++;</span><br><span class="line">            add(u,v,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!inc[i])</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">            vis[x]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].ne)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> y=e[i].to;</span><br><span class="line">                inc[y]--;</span><br><span class="line">                st[y]=max(st[y],st[x]+e[i].w);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[i]&amp;&amp;!inc[i])</span><br><span class="line">                    q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=max(ans,st[i]);</span><br><span class="line">            <span class="keyword">if</span>(!vis[i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Impossible!\n"</span>);</span><br><span class="line">                <span class="keyword">goto</span> nextloop;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">        nextloop:</span><br><span class="line">            <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-11-人与神"><a href="#7-11-人与神" class="headerlink" title="7-11 人与神"></a>7-11 人与神</h2><p>跨界大神 L. Peter Deutsch 有一句名言：“To iterate is human, to recurse divine.”（迭代的是人，递归的是神）。本题就请你直接在屏幕上输出这句话。</p>
<h3 id="输入格式-9"><a href="#输入格式-9" class="headerlink" title="输入格式"></a>输入格式</h3><p>本题没有输入。</p>
<h3 id="输出格式-9"><a href="#输出格式-9" class="headerlink" title="输出格式"></a>输出格式</h3><p>在一行中输出 <code>To iterate is human, to recurse divine.</code>。</p>
<h3 id="输入样例-8"><a href="#输入样例-8" class="headerlink" title="输入样例"></a>输入样例</h3><p>无</p>
<h3 id="输出样例-8"><a href="#输出样例-8" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">To</span> iterate <span class="keyword">is</span> human, <span class="keyword">to</span> recurse divine.</span><br></pre></td></tr></table></figure>

<h3 id="题解-10"><a href="#题解-10" class="headerlink" title="题解"></a>题解</h3><p>签到题</p>
<h3 id="代码-10"><a href="#代码-10" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"To iterate is human, to recurse divine."</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-12-强迫症"><a href="#7-12-强迫症" class="headerlink" title="7-12 强迫症"></a>7-12 强迫症</h2><p>小强在统计一个小区里居民的出生年月，但是发现大家填写的生日格式不统一，例如有的人写 <code>199808</code>，有的人只写 <code>9808</code>。有强迫症的小强请你写个程序，把所有人的出生年月都整理成 <code>年年年年-月月</code> 格式。对于那些只写了年份后两位的信息，我们默认小于 <code>22</code> 都是 <code>20</code> 开头的，其他都是 <code>19</code> 开头的。</p>
<h3 id="输入格式-10"><a href="#输入格式-10" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入在一行中给出一个出生年月，为一个 6 位或者 4 位数，题目保证是 1000 年 1 月到 2021 年 12 月之间的合法年月。</p>
<h3 id="输出格式-10"><a href="#输出格式-10" class="headerlink" title="输出格式"></a>输出格式</h3><p>在一行中按标准格式 <code>年年年年-月月</code> 将输入的信息整理输出。</p>
<h3 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例 1"></a>输入样例 1</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">9808</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例 1"></a>输出样例 1</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1998</span><span class="number">-08</span></span><br></pre></td></tr></table></figure>

<h3 id="输入样例-2"><a href="#输入样例-2" class="headerlink" title="输入样例 2"></a>输入样例 2</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">0510</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例 2"></a>输出样例 2</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">2005</span><span class="number">-10</span></span><br></pre></td></tr></table></figure>

<h3 id="输入样例-3"><a href="#输入样例-3" class="headerlink" title="输入样例 3"></a>输入样例 3</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">196711</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-3"><a href="#输出样例-3" class="headerlink" title="输出样例 3"></a>输出样例 3</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1967</span><span class="number">-11</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-11"><a href="#题解-11" class="headerlink" title="题解"></a>题解</h3><p>按照题意模拟即可</p>
<h3 id="代码-11"><a href="#代码-11" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> y,m;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(s)==<span class="number">4</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sscanf</span>(s,<span class="string">"%2d%d"</span>,&amp;y,&amp;m);</span><br><span class="line">        <span class="keyword">if</span>(y&lt;<span class="number">22</span>)y+=<span class="number">2000</span>;</span><br><span class="line">        <span class="keyword">else</span> y+=<span class="number">1900</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">sscanf</span>(s,<span class="string">"%4d%d"</span>,&amp;y,&amp;m);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%04d-%02d"</span>,y,m);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-13-病毒溯源"><a href="#7-13-病毒溯源" class="headerlink" title="7-13 病毒溯源"></a>7-13 病毒溯源</h2><p><img src="/pic/cppusf2021-7-13.jpg" alt="cppusf2021-7-13"><br>病毒容易发生变异。某种病毒可以通过突变产生若干变异的毒株，而这些变异的病毒又可能被诱发突变产生第二代变异，如此继续不断变化。</p>
<p>现给定一些病毒之间的变异关系，要求你找出其中最长的一条变异链。</p>
<p>在此假设给出的变异都是由突变引起的，不考虑复杂的基因重组变异问题 —— 即每一种病毒都是由唯一的一种病毒突变而来，并且不存在循环变异的情况。</p>
<h3 id="输入格式-11"><a href="#输入格式-11" class="headerlink" title="输入格式"></a>输入格式</h3><p>输入在第一行中给 出一个正整数 N（≤$10^​4$），即病毒种类的总数。于是我们将所有病毒从 0 到 N−1 进行编号。</p>
<p>随后 N 行，每行按以下格式描述一种病毒的变异情况：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">k 变异株<span class="number">1</span> …… 变异株k</span><br></pre></td></tr></table></figure>

<p>其中 <code>k</code> 是该病毒产生的变异毒株的种类数，后面跟着每种变异株的编号。第 i 行对应编号为 i 的病毒（0≤i&lt;N）。题目保证病毒源头有且仅有一个。</p>
<h3 id="输出格式-11"><a href="#输出格式-11" class="headerlink" title="输出格式"></a>输出格式</h3><p>首先输出从源头开始最长变异链的长度。</p>
<p>在第二行中输出从源头开始最长的一条变异链，编号间以 1 个空格分隔，行首尾不得有多余空格。如果最长链不唯一，则输出最小序列。</p>
<p>注：我们称序列 ${a_1,\cdots,a_n}$比序列${b_1,\cdots,b_n}$“小”，如果存在 $1≤k≤n$ 满足 $a_i=b_i$ 对所有 $i&lt;k$ 成立，且 $a_k&lt;b_k$​​ 。</p>
<h3 id="输入样例-9"><a href="#输入样例-9" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">6</span> <span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">5</span> <span class="number">9</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">7</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="symbol">2 </span><span class="number">3</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-9"><a href="#输出样例-9" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">0 </span><span class="number">4</span> <span class="number">9</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-12"><a href="#题解-12" class="headerlink" title="题解"></a>题解</h3><p>本题是一道搜索题，写搜索记录最长链即可。</p>
<h3 id="代码-12"><a href="#代码-12" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">10005</span>],cnt,inc[<span class="number">10005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ne,to;</span><br><span class="line">&#125;e[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;head[u],v&#125;;head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans,an[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> nw[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!head[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(d&gt;ans)</span><br><span class="line">        &#123;</span><br><span class="line">            ans=d;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                an[i]=nw[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(d==ans)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> flg=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nw[i]&lt;an[i])</span><br><span class="line">                    flg=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nw[i]&gt;an[i])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flg)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d;i++)</span><br><span class="line">                    an[i]=nw[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].ne)</span><br><span class="line">    &#123;</span><br><span class="line">        nw[d+<span class="number">1</span>]=e[i].to;</span><br><span class="line">        dfs(e[i].to,d+<span class="number">1</span>);</span><br><span class="line">        nw[d+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,k,l;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l);</span><br><span class="line">            add(i,l+<span class="number">1</span>);</span><br><span class="line">            inc[l+<span class="number">1</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!inc[i])</span><br><span class="line">        &#123;</span><br><span class="line">            nw[<span class="number">1</span>]=i;</span><br><span class="line">            dfs(i,<span class="number">1</span>);</span><br><span class="line">            nw[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c%d"</span>,i==<span class="number">1</span>?<span class="string">'\n'</span>:<span class="string">' '</span>,an[i]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-14-大大的叉"><a href="#7-14-大大的叉" class="headerlink" title="7-14 大大的叉"></a>7-14 大大的叉</h2><p>打印出n阶的“叉”，这个叉图案由字符‘+’和‘X’构成，n越大，这个图案也就越大</p>
<h3 id="输入格式-12"><a href="#输入格式-12" class="headerlink" title="输入格式"></a>输入格式</h3><p>一个正整数n，1&lt;=n&lt;=20</p>
<h3 id="输出格式-12"><a href="#输出格式-12" class="headerlink" title="输出格式"></a>输出格式</h3><p>一个n阶叉图案</p>
<h3 id="输入样例1-2"><a href="#输入样例1-2" class="headerlink" title="输入样例1"></a>输入样例1</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例1-2"><a href="#输出样例1-2" class="headerlink" title="输出样例1"></a>输出样例1</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">X</span></span><br></pre></td></tr></table></figure>

<h3 id="输入样例2-2"><a href="#输入样例2-2" class="headerlink" title="输入样例2"></a>输入样例2</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例2-2"><a href="#输出样例2-2" class="headerlink" title="输出样例2"></a>输出样例2</h3><figure class="highlight tp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">X</span>+++<span class="keyword">X</span></span><br><span class="line"></span><br><span class="line">+<span class="keyword">X</span>+<span class="keyword">X</span>+</span><br><span class="line"></span><br><span class="line">++<span class="keyword">X</span>++</span><br><span class="line"></span><br><span class="line">+<span class="keyword">X</span>+<span class="keyword">X</span>+</span><br><span class="line"></span><br><span class="line"><span class="keyword">X</span>+++<span class="keyword">X</span></span><br></pre></td></tr></table></figure>

<h3 id="输入样例3-2"><a href="#输入样例3-2" class="headerlink" title="输入样例3"></a>输入样例3</h3><p>在这里给出一组输入。例如：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例3-2"><a href="#输出样例3-2" class="headerlink" title="输出样例3"></a>输出样例3</h3><p>在这里给出相应的输出。例如：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span></span><br><span class="line"><span class="comment"></span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span></span><br><span class="line"><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span><span class="literal">+</span></span><br><span class="line"><span class="comment">X</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="literal">+</span><span class="comment">X</span></span><br></pre></td></tr></table></figure>

<h3 id="题解-13"><a href="#题解-13" class="headerlink" title="题解"></a>题解</h3><p>按照题意模拟即可</p>
<h3 id="代码-13"><a href="#代码-13" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*n<span class="number">-1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==j||i+j==<span class="number">2</span>*n)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"X"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"+"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-15-3824经典游戏"><a href="#7-15-3824经典游戏" class="headerlink" title="7-15 3824经典游戏"></a>7-15 3824经典游戏</h2><p>24点游戏，也叫3824游戏，是一款经典的心算数字游戏。给出区间[1,13]内的四个整数，验证能否用加、减、乘、除四则运算，将这四个整数组合成24。比如：(3,8,2,4) 可以算出 8*(4−3+2)=24或者(8−4)*(2*3)=24，而(1,1,2,2)无法算出24。注意整除必须除尽，即9/2+10+10=24这种计算无效。</p>
<h3 id="输入格式-13"><a href="#输入格式-13" class="headerlink" title="输入格式"></a>输入格式</h3><p>第一行给出正整数N(1≤N≤1000)。接下来N行数据，每行给出四个正整数$a_i b_i c_i d_i$,用空格分开。($\forall i\in{1,…,N}:1≤a_i b_i c_i d_i≤13$)</p>
<h3 id="输出格式-13"><a href="#输出格式-13" class="headerlink" title="输出格式"></a>输出格式</h3><p>输出N行数据，第i行对应输入数据($a_i b_i c_i d_i$)，如果能算出24，则输出24，如果不能则输出0。</p>
<h3 id="输入样例-10"><a href="#输入样例-10" class="headerlink" title="输入样例"></a>输入样例</h3><figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="symbol">1 </span><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="symbol">3 </span><span class="number">9</span> <span class="number">11</span> <span class="number">2</span></span><br><span class="line"><span class="symbol">13 </span><span class="number">3</span> <span class="number">5</span> <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h3 id="输出样例-10"><a href="#输出样例-10" class="headerlink" title="输出样例"></a>输出样例</h3><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">24</span></span><br></pre></td></tr></table></figure>

<p>(1,1,1,1)和(3,9,11,2)都无法算出24，(1,2,3,4)和(13,3,5,7)可以算出：1*2*3*4=24和(13*5+7)/3=24。</p>
<h3 id="题解-14"><a href="#题解-14" class="headerlink" title="题解"></a>题解</h3><p>整理下求24点的思路，给定四个数字，不限定他们的排序，自己指定三个运算符和括号添加位置，让结果等于24。<br>于是我们将四个数读入后排序，并使用next_permutation函数得到这四个数的全排列。<br>接着我们枚举三个运算符，一共有$4^3$种情况。<br>然后我们指定括号，这里指定括号可以理解为指定运算符的运算顺序，也就是123,132,213,231,312,321这几种，其中132和312这两种是相同的结果，于是就只有五种运算顺序。<br>枚举完所有情况后我们计算结果并判断是否为24即可。<br>需要注意的是对于除法，由于必须整除，我们最好写浮点运算，同时排除下除数是0的情况即可。</p>
<h3 id="代码-14"><a href="#代码-14" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> op[]=<span class="string">"/*-+"</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">d</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">24</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="number">24</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tp==<span class="number">0</span>)<span class="keyword">return</span> x/y;</span><br><span class="line">    <span class="keyword">if</span>(tp==<span class="number">1</span>)<span class="keyword">return</span> x*y;</span><br><span class="line">    <span class="keyword">if</span>(tp==<span class="number">2</span>)<span class="keyword">return</span> x-y;</span><br><span class="line">    <span class="keyword">if</span>(tp==<span class="number">3</span>)<span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">model1</span><span class="params">(<span class="keyword">int</span> t1,<span class="keyword">int</span> t2,<span class="keyword">int</span> t3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nw=a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(!t1&amp;&amp;(!a[<span class="number">2</span>]||nw%a[<span class="number">2</span>]!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(nw,a[<span class="number">2</span>],t1);</span><br><span class="line">    <span class="keyword">if</span>(!t2&amp;&amp;(!a[<span class="number">3</span>]||nw%a[<span class="number">3</span>]!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(nw,a[<span class="number">3</span>],t2);</span><br><span class="line">    <span class="keyword">if</span>(!t3&amp;&amp;(!a[<span class="number">4</span>]||nw%a[<span class="number">4</span>]!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(nw,a[<span class="number">4</span>],t3);</span><br><span class="line">    <span class="keyword">return</span> d(nw);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">model2</span><span class="params">(<span class="keyword">int</span> t1,<span class="keyword">int</span> t2,<span class="keyword">int</span> t3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nw,nw1=a[<span class="number">1</span>],nw2=a[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span>(!t1&amp;&amp;(!a[<span class="number">2</span>]||nw1%a[<span class="number">2</span>]!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw1=cal(nw1,a[<span class="number">2</span>],t1);</span><br><span class="line">    <span class="keyword">if</span>(!t3&amp;&amp;(!a[<span class="number">4</span>]||nw2%a[<span class="number">4</span>]!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw2=cal(nw2,a[<span class="number">4</span>],t3);</span><br><span class="line">    <span class="keyword">if</span>(!t2&amp;&amp;(!nw2||nw1%nw2!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(nw1,nw2,t2);</span><br><span class="line">    <span class="keyword">return</span> d(nw);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">model3</span><span class="params">(<span class="keyword">int</span> t1,<span class="keyword">int</span> t2,<span class="keyword">int</span> t3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nw=a[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(!t2&amp;&amp;(!a[<span class="number">3</span>]||nw%a[<span class="number">3</span>]!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(nw,a[<span class="number">3</span>],t2);</span><br><span class="line">    <span class="keyword">if</span>(!t1&amp;&amp;(!nw||a[<span class="number">1</span>]%nw!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(a[<span class="number">1</span>],nw,t1);</span><br><span class="line">    <span class="keyword">if</span>(!t3&amp;&amp;(!a[<span class="number">4</span>]||nw%a[<span class="number">4</span>]!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(nw,a[<span class="number">4</span>],t3);</span><br><span class="line">    <span class="keyword">return</span> d(nw);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">model4</span><span class="params">(<span class="keyword">int</span> t1,<span class="keyword">int</span> t2,<span class="keyword">int</span> t3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nw=a[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">if</span>(!t2&amp;&amp;(!a[<span class="number">3</span>]||nw%a[<span class="number">3</span>]!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(nw,a[<span class="number">3</span>],t2);</span><br><span class="line">    <span class="keyword">if</span>(!t3&amp;&amp;(!a[<span class="number">4</span>]||nw%a[<span class="number">4</span>]!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(nw,a[<span class="number">4</span>],t3);</span><br><span class="line">    <span class="keyword">if</span>(!t1&amp;&amp;(!nw||a[<span class="number">1</span>]%nw!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(a[<span class="number">1</span>],nw,t1);</span><br><span class="line">    <span class="keyword">return</span> d(nw);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">model5</span><span class="params">(<span class="keyword">int</span> t1,<span class="keyword">int</span> t2,<span class="keyword">int</span> t3)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nw=a[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">if</span>(!t3&amp;&amp;(!a[<span class="number">4</span>]||nw%a[<span class="number">4</span>]!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(nw,a[<span class="number">4</span>],t3);</span><br><span class="line">    <span class="keyword">if</span>(!t2&amp;&amp;(!nw||a[<span class="number">2</span>]%nw!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(a[<span class="number">2</span>],nw,t2);</span><br><span class="line">    <span class="keyword">if</span>(!t1&amp;&amp;(!nw||a[<span class="number">1</span>]%nw!=<span class="number">0</span>))<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    nw=cal(a[<span class="number">1</span>],nw,t1);</span><br><span class="line">    <span class="keyword">return</span> d(nw);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">4</span>;k++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span>(model1(i,j,k))<span class="keyword">goto</span> nextloop; </span><br><span class="line">                        <span class="keyword">if</span>(model2(i,j,k))<span class="keyword">goto</span> nextloop; </span><br><span class="line">                        <span class="keyword">if</span>(model3(i,j,k))<span class="keyword">goto</span> nextloop; </span><br><span class="line">                        <span class="keyword">if</span>(model4(i,j,k))<span class="keyword">goto</span> nextloop; </span><br><span class="line">                        <span class="keyword">if</span>(model5(i,j,k))<span class="keyword">goto</span> nextloop; </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(next_permutation(a+<span class="number">1</span>,a+<span class="number">5</span>));</span><br><span class="line">        nextloop:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>复现 CPPU第五届“精武杯”电子数据取证竞赛</title>
    <url>/blog/reproduction-cppu2021/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="案情简介"><a href="#案情简介" class="headerlink" title="案情简介"></a>案情简介</h2><p>某市公安机关在侦办一起贩毒案件中，抓获嫌疑人王勇，缴获毒品数十克。通过现场勘查，扣押了犯罪嫌疑人王勇的一台计算机、两部手机、及一个 U盘，现已将证据进行固定并生成镜像（备份）文件，请对以上检材进行取证分析。</p>
<h2 id="检材列表"><a href="#检材列表" class="headerlink" title="检材列表"></a>检材列表</h2><ul>
<li>检材1-Wangy Disk.E01</li>
<li>检材2-Wangy U.E01</li>
<li>检材3-iphone backup.rar</li>
<li>检材4-Huawei Backup.rar</li>
<li>涉毒样本库.xml</li>
</ul>
<h2 id="所需工具"><a href="#所需工具" class="headerlink" title="所需工具"></a>所需工具</h2><ul>
<li>取证大师（FMP）</li>
<li>手机大师</li>
<li>火眼证据分析软件</li>
<li>火眼证据仿真软件</li>
</ul>
<h2 id="预处理工作"><a href="#预处理工作" class="headerlink" title="预处理工作"></a>预处理工作</h2><p>用取证大师跑检材1和检材2，用手机大师跑检材3和检材4，用火眼证据分析软件跑检材1至4。<br>在跑的时候要将所有的选项都点上（至少我是这么做的，我的电脑取证大师和手机大师都是很快跑完的，火眼可以后台慢慢跑）。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>注：此顺序为美亚发的pdf文件中的顺序，和实际比武时的顺序有出入，不影响答案正确性。</p>
<h3 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h3><p><strong>通过对计算机检材的用户痕迹分析，找出该对象关闭计算机前最后访问的文档，请写出其文件名（格式如: abc.txt）。（3分）</strong></p>
<p>在取证大师中，查看取证结果，找到检材1的用户痕迹—最近访问记录—最近访问的文档，将文档按照最后访问时间降序排序，第一个文件即为所求。<br><img src="/pic/cppuqz2021-1.png" alt="cppuqz2021-1"><br>答案：wang.txt</p>
<h3 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h3><p><strong>请对所给检材进行分析,找出 BitLocker 驱动器解密的恢复密钥（格式如: 139689-758052-869353-054631-172373-167809-346820-267891）。（4分）</strong></p>
<p>BitLocker恢复密钥的结构为48位数字，每六位数字一组中间用“-”隔开，本题可以利用正则表达式用原始数据搜索找到；也可以用数据恢复—格式化恢复，选中检材2恢复即可看到。<br><img src="/pic/cppuqz2021-2.png" alt="cppuqz2021-2"><br>答案：239019-657052-019393-056331-170973-182809-325820-284911</p>
<p><em>在此关通过后，最好使用恢复密钥串将驱动器解密，然后再进行一次自动取证，收集到所有信息。</em></p>
<h3 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h3><p><strong>请使用取证大师软件找出该对象即时通讯工具“SKYPE”账号关联的邮件地址（格式如: <a href="mailto:abc123@abc.com" target="_blank" rel="noopener">abc123@abc.com</a>）。（4分）</strong></p>
<p>在取证大师中，查看取证结果，找到检材1的即时通讯—SKYPE—petter.petter56的资料信息，电子邮件即为所求。<br><img src="/pic/cppuqz2021-3.png" alt="cppuqz2021-3"><br>答案：<a href="mailto:64906054@qq.com" target="_blank" rel="noopener">64906054@qq.com</a></p>
<h3 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h3><p><strong>请对检材分析，获取邮箱账号“<a href="mailto:wangy2015@sina.com" target="_blank" rel="noopener">wangy2015@sina.com</a>”的密码（格式如: wwyong123）。（4分）</strong></p>
<p>在取证大师中，查看案例概览，找到检材1的密码列表，第一个即为所求。<br><img src="/pic/cppuqz2021-4.png" alt="cppuqz2021-4"><br>答案：wangy0401</p>
<h3 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h3><p><strong>请写出对象的iCloud同步账号（格式如: <a href="mailto:wope123@icloud.com" target="_blank" rel="noopener">wope123@icloud.com</a>）。（4分）</strong></p>
<p>在手机大师中，查看取证结果，找到检材3的文件信息—同步账号，第一个即为所求。<br><img src="/pic/cppuqz2021-5.png" alt="cppuqz2021-5"><br>答案：<a href="mailto:wangyong000328@icloud.com" target="_blank" rel="noopener">wangyong000328@icloud.com</a></p>
<h3 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h3><p><strong>请对检材分析，获取该计算机Windows操作系统可疑登录密码（格式如:13678929322）。（4分）</strong></p>
<p>用火眼镜像仿真检材1进入登录画面，得到密码提示为Tel，即电话号码。<br><img src="/pic/cppuqz2021-6-1.png" alt="cppuqz2021-6-1"><br>接着在手机大师中，查看取证结果，找到检材3的文件信息—备忘录，可以看到第一个备忘录的内容是“登录密码：18900001111”。结合我们刚刚仿真得到的密码提示，我们使用这个手机号码登录，确认了这个登录密码指的是操作系统的登录密码。<br><img src="/pic/cppuqz2021-6-2.png" alt="cppuqz2021-6-2"><br>答案：18900001111</p>
<h3 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h3><p><strong>请对检材分析，提取记录有常联络QQ好友的文档，写出涉案QQ好友“信”的真实姓名（格式如:林市中）。（5分）</strong></p>
<p>在取证大师中，查看取证结果，找到检材1的文件分析—文件分类—办公文档—Word文档中的“常联络QQ好友信息.doc”，文件内容中记录的第一个QQ相关信息即包含答案。<br><img src="/pic/cppuqz2021-7.png" alt="cppuqz2021-7"><br>答案：陈音信</p>
<h3 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h3><p><strong>通过对计算机检材JPG格式图片进行数据恢复，请写出物理扇区为21936520图片的逻辑大小（格式如:1029字节）。（5分）</strong></p>
<p>在取证大师中用数据恢复—签名恢复，设置参数为图片—JPEG图片，选中检材1恢复，在分区3_本地磁盘[E]中，按照物理扇区排序，找到物理扇区为21,936,520的图片，在摘要中即可看到逻辑大小。<br><img src="/pic/cppuqz2021-8.png" alt="cppuqz2021-8"><br>答案：649380字节</p>
<h3 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h3><p><strong>请找出对象计算机中涉案图片“块. jpg”，并计算解密后的MD5值（格式如:35A437BF4B1F84193CA7D74EAO3D69FF）。（6分）</strong></p>
<p>通过第六关，我们用火眼镜像仿真检材1进入Windows操作系统，找到图片文件，对图片右键，选择属性，点击高级，将保护关闭。<br><img src="/pic/cppuqz2021-9-1.png" alt="cppuqz2021-9-1"><br>然后我们将解密的文件计算MD5值即可。<br><img src="/pic/cppuqz2021-9-2.png" alt="cppuqz2021-9-2"><br>答案：21E6371F841BF474EA037DD69FFB93CA</p>
<h3 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h3><p><strong>根据对检材中邮件的解析，提取邮件附件压缩包甲的涉案图片“猪头肉.jpg”，请写出其MD5值（格式如:35A437BF4B1F84193CA7D74EAO3D69FF）。（6分）</strong></p>
<p>我没有做出来。</p>
<p>答案：2bce78b48c8e55240030734c21041b02</p>
<h3 id="第十一关"><a href="#第十一关" class="headerlink" title="第十一关"></a>第十一关</h3><p><strong>通过提取检材中7月-10月的话单，对话单进行关联分析，请写出与该对象四个月联系次数最多的联系人手机号码（格式如:13812345678）。（4分）</strong></p>
<p>在取证大师中，查看取证结果，找到检材1的文件分析—文件分类—办公文档—Excel电子表格中的“2016年07月全部详单.xls”、“2016年08月全部详单.xls”、“2016年09月全部详单.xls”和“2016年10月全部详单.xls”。<br><img src="/pic/cppuqz2021-11-1.png" alt="cppuqz2021-11-1"><br>将文件内容中记录的信息合并到一个Excel文件中。<br><img src="/pic/cppuqz2021-11-2.png" alt="cppuqz2021-11-2"><br>使用Excel自带的函数MODE.SNGL统计出出现次数最多的号码。<br><img src="/pic/cppuqz2021-11-3.png" alt="cppuqz2021-11-3"><br>答案：15659832975</p>
<h3 id="第十二关"><a href="#第十二关" class="headerlink" title="第十二关"></a>第十二关</h3><p><strong>通过提取检材中7月-10月的话单，对话单进行关联分析，请写出该对象与李四的通话总时长（格式如:45678秒）。（4分）</strong></p>
<p>在手机大师中，查看取证结果，找到检材3的文件信息—通讯录—手机，找到李四的手机号。<br><img src="/pic/cppuqz2021-12-1.png" alt="cppuqz2021-12-1"><br>使用第十一关制作的Excel文件，筛选出李四手机号对应的记录。<br><img src="/pic/cppuqz2021-12-2.png" alt="cppuqz2021-12-2"><br>使用Excel自带的函数SUBTOTAL将通信时长加和即可得到结果。<br><img src="/pic/cppuqz2021-12-3.png" alt="cppuqz2021-12-3"><br>答案：131828秒</p>
<h3 id="第十三关"><a href="#第十三关" class="headerlink" title="第十三关"></a>第十三关</h3><p><strong>通过对检材分析，获取对象7月-10月的收支记录，请统计这四个月的净收入（格式如:23.8万）。（5分）</strong></p>
<p>在手机大师中，查看取证结果，找到检材3的文件信息—备忘录，可以看到后个备忘录的标题和内容分别是7-10月的开支情况。我们将净收入加和即可得到答案。<br><img src="/pic/cppuqz2021-13.png" alt="cppuqz2021-13"><br>答案：35.8万</p>
<h3 id="第十四关"><a href="#第十四关" class="headerlink" title="第十四关"></a>第十四关</h3><p><strong>通过题目中提供的“涉毒样本库.xml”文件，分析提取计算机检材中涉案的文件，请填写命中的文件个数（格式如:2）。（5分）</strong><br>打开“涉毒样本库.xml”，复制第一个样本文件的MD5值。<br><img src="/pic/cppuqz2021-14-2.png" alt="cppuqz2021-14-2"><br>在取证大师中，选中所有文件后，计算所有文件的MD5值，筛选出MD5值对应的文件。<br><img src="/pic/cppuqz2021-14-1.png" alt="cppuqz2021-14-1"><br>跳转到源文件，可以找到其余三个MD5值对应的文件，同时可以找到4个文件经过修改的对应文件，涉案文件一共八个。<br><img src="/pic/cppuqz2021-14-3.png" alt="cppuqz2021-14-3"><br>答案：8</p>
<h3 id="第十五关"><a href="#第十五关" class="headerlink" title="第十五关"></a>第十五关</h3><p><strong>通过对检材分析，请找出王勇的支付宝账号（格式如:<a href="mailto:abc123@qq.com" target="_blank" rel="noopener">abc123@qq.com</a>）。（6分）</strong></p>
<p>在火眼取证分析中，查看分析页面，找到检材1的微软便签(Sticky Notes)，第一个便签的内容即为答案。<br><img src="/pic/cppuqz2021-15.png" alt="cppuqz2021-15"><br>答案：<a href="mailto:wy1080@163.com" target="_blank" rel="noopener">wy1080@163.com</a></p>
<h3 id="第十六关"><a href="#第十六关" class="headerlink" title="第十六关"></a>第十六关</h3><p><strong>请对嫌疑人手机检材进行分析，写出SSID为“leo”的WiFi密码(格式如: abc123）。（6分）</strong></p>
<p>在火眼取证分析中，查看分析页面，找到检材4的基本信息—Wi-Fi连接记录，第二条记录对应的密码即为答案。<br><img src="/pic/cppuqz2021-16.png" alt="cppuqz2021-16"><br>答案：qwer1350</p>
<h3 id="第十七关"><a href="#第十七关" class="headerlink" title="第十七关"></a>第十七关</h3><p><strong>请对嫌疑人手机检材进行分析，找出联系人为“大山”的手机号码（格式如:18912345678）。（6分）</strong></p>
<p>在手机大师中，查看取证结果，找到检材4的文件信息—通讯录—手机，可以找到大山的手机号。离谱的是姓名和手机号码居然是反的。<br><img src="/pic/cppuqz2021-17.png" alt="cppuqz2021-17"><br>答案：18725715233</p>
<h3 id="第十八关"><a href="#第十八关" class="headerlink" title="第十八关"></a>第十八关</h3><p><strong>通过对检材的综合分析，找到王勇供货上线的微信号（格式如: abcd123）。（5分）</strong></p>
<p>在取证大师中，查看取证结果，找到检材1的文件分析—文件分类—办公文档—Word文档中的“1.docx”，文件内容中记录的微信号码相关信息即为答案。<br><img src="/pic/cppuqz2021-18.png" alt="cppuqz2021-18"><br>答案：13800100809</p>
<h3 id="第十九关"><a href="#第十九关" class="headerlink" title="第十九关"></a>第十九关</h3><p><strong>通过对检材的综合分析，请写出涉案关系人“李四”的真实姓名（格式如:李发）。（7分）</strong></p>
<p>在取证大师中，查看取证结果，找到检材1的即时通讯—SKYPE—petter.petter5—聊天消息—好友聊天消息—tin12317。通过对聊天内容中“小李”、“四”等词，我们不难分析出该好友即为“李四”，根据一条消息中的“另一个手机号是18684676356”，我们得到了李四的另一个手机号。<br><img src="/pic/cppuqz2021-19-1.png" alt="cppuqz2021-19-1"><br>在手机大师中，查看取证结果，找到检材4的文件信息—通讯录—手机，可以找到手机号对应的姓名，即为李四的真实姓名。离谱的是姓名和手机号码居然是反的。<br><img src="/pic/cppuqz2021-19-2.png" alt="cppuqz2021-19-2"><br>答案：李安</p>
<h3 id="第二十关"><a href="#第二十关" class="headerlink" title="第二十关"></a>第二十关</h3><p><strong>通过对检材进行分析，根据对象记录账号的文档，请获取百度网盘的登录密码（格式如: abc123）。（7分）</strong></p>
<p>找到了“Accounts .docx”但不知道密码。。。<br>答案：yong168</p>
]]></content>
      <tags>
        <tag>复现</tag>
      </tags>
  </entry>
  <entry>
    <title>我很好，也值得更好</title>
    <url>/blog/Autobiography-04/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="“为什么我总是很心累？”"><a href="#“为什么我总是很心累？”" class="headerlink" title="“为什么我总是很心累？”"></a>“为什么我总是很心累？”</h2><p>&emsp;&emsp;经常会莫名感到心累、有深深的无力感。<br>&emsp;&emsp;<br>&emsp;&emsp;生活压力大，忙忙碌碌却觉得迷茫、空虚、压抑；<br>&emsp;&emsp;不管怎么努力，好像总是卡在某个地方；<br>&emsp;&emsp;好像总是重复同样的错误，内心不安、和朋友争吵、和父母冷战；<br>&emsp;&emsp;性格敏感自卑，想要突破自己却总是无疾而终……<br>&emsp;&emsp;<br>&emsp;&emsp;仿佛心里住着一个不受控制的孩子，在拼命拉扯自己。<br>&emsp;&emsp;我想向前，他要向后；我想挑战自己，他要畏惧退缩；我想心平气和，他要哭闹崩溃。<br>&emsp;&emsp;我责怪他不成熟，他却哭得更凶了。<br>&emsp;&emsp;他似乎正在向我呼救，渴求被我看到和疼爱。  </p>
<h2 id="内在小孩不长大"><a href="#内在小孩不长大" class="headerlink" title="内在小孩不长大"></a>内在小孩不长大</h2><p>&emsp;&emsp;我再努力也无法成长<br>&emsp;&emsp;<br>&emsp;&emsp;大概我的心里住着这么一个长不大的小孩。<br>&emsp;&emsp;不管在童年，还是成年后，当他没有得到足够的关心和爱护，他就会一直蹲在角落哭泣，成了一个阴晴不定的孩子。<br>&emsp;&emsp;<br>&emsp;&emsp;他会霸占大脑：<br>让我的思维不清晰，容易情绪化。当我的诉求得不到满足时，当别人跟我的意见不同时，当事与愿违时……让我愤怒、悲伤、恐慌，甚至他让我发展出了抑郁症、焦虑症；<br>&emsp;&emsp;<br>&emsp;&emsp;他会加剧我的原生家庭矛盾：<br>他把我在童年时缺失的那份爱，以叛逆、冷漠、抗拒沟通等形式加倍的“偿还”给我的父母；<br>&emsp;&emsp;<br>&emsp;&emsp;他会破坏我的朋友关系：<br>让我缺乏安全感，交友经常小心翼翼，害怕失去；<br>&emsp;&emsp;<br>&emsp;&emsp;他会搅乱我的学习和工作：<br>让我在学习和工作中没自信，总害怕做错事，不敢拒绝，不敢争取，影响我的判断和决策，在关键时刻“拖我后腿”；<br>&emsp;&emsp;<br>&emsp;&emsp;他还会改变我的性格：<br>时间久了，他会将情绪化、脆弱敏感、拖延、自卑等注入进我的性格……<br>&emsp;&emsp;<br>&emsp;&emsp;而且，越是无视他，越是压抑他，内在小孩会更沮丧和抗争，仿佛一个死循环，让我丧失好的性格、好的关系、好的生活。<br>&emsp;&emsp;因为，内在小孩的需求得不到满足、情绪得不到释放、价值观得不到肯定，他就会一直蹲在那里哭泣，停止成长。<br>&emsp;&emsp;内在小孩就如同我人生木桶的最短板。他不长大，我再努力也无法成长。<br>&emsp;&emsp;所以荣格说：“内在小孩是一切光之上的光，是治愈的引领者。”<br>&emsp;&emsp;只有内在小孩被看见、被疗愈，并且与我一同快乐健康地成长，我的内心才会真正成长，真正感到快乐。  </p>
<h2 id="一直在向外寻求和解"><a href="#一直在向外寻求和解" class="headerlink" title="一直在向外寻求和解"></a>一直在向外寻求和解</h2><p>&emsp;&emsp;不如陪内在小孩长大<br>&emsp;&emsp;<br>&emsp;&emsp;在我从小到大的疗愈路上，人们总对我说说要“与原生家庭和解”、“接纳残酷的世界”、“拥抱不完美的自己”……但表面的和解与接纳，更多是缘木求鱼，隔靴搔痒。<br>&emsp;&emsp;与内在小孩一起成长，才是对自己最深度的疗愈。  </p>
]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>嘿，看到了就点进来吧！</title>
    <url>/blog/Happynintyo/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="抱歉啊，我以为你看的时候已经到21号了，对你而言是明天的日期。" data-whm="抱歉啊，你填写数字的哈希值检验出错了，不过你乐意听就来听吧。"><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="嗨，你知道今天的日期的八位数字是多少吗？" /><label>嗨，你知道今天的日期的八位数字是多少吗？</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="2ecd1ec5660608accb743912e3a55c45b6e718a2d1698f4c09b69f66ab4fb7ef">9899f8527cfe8a4ab83fde11b26f59331ea9fdeb7adefc363a4f43d856e8768a276d9b613f7a8811523eaffcf93f58c3ae25f6b0913c9c9ccbf74f10a4a3c8cf34ccc89d78e20cec953365bfb5664c83a06557ac9869dbf1bccc3ec5d8231bcbedd5d7a9ed47f6ce08b7c17458dc7aeadcc2ba150d5aff5f4075b6f4c3c70b882db1a877331a1317f1cac588d15df63850e3fccd6c7738d44898016ddd42dbc18cea3fd0603177984342dfa9b76501fe433fd30f451ee0de30cc32f5b7217c7758b0e0174567329e383dffaa83adf66337f2598f3a56848dad6759468db6be1f7f550f0bcf747d2d082064dadcb8f0f396aa12f22551064fad6a3fa5ba1f3beeb82f5ab2ad86aa833757dc4e11eaa66b0e079eb0551e1adfbafe377bf4ad1ee86ab5f40d71e6801e205990fc6e09f4c5361b8408fcc0ce5edefb9dc5fb293bf7225d1ac5ba3ddc8d9b426e0b9a3d3de05df998fb8d6e72e0752d62a70ed9614574763ba0ef4fae02751c70813169976906bcadfeed2b07bd28a6d68036a3183e4f98d1ef55d66fe3a9cd2dfebf8adba07f30d5a388e9b67d058f3781731125a6f0c4b1ef8464f425ccc6c166a2bd39a7d1bf08d68e5aed35ddfe6c2b3735bc7e91376f3f1b1051a26a63bd48f8e7f5f3b4de146aaba85651bad9f5be346f28f43feb3930338ecfcf3bffeb2eb2196c2e1b0165e29265dd87e84079778796c830303baf649b58d672701af1920f4ff88ebceaa82a94599bb281195d7e202df559f6ded606b36f304a9aa495086f5af33bc489f7a34432169fdf0e90e811c83a96f11e0d9423e78c6bc47c5a30e02d87d163551fb9046cce0fd548ca11de8d0dc66e09a1e172d60d15d7940db637a3c1a7f9d817df4c1604d4399ec6c92483760a88fb3537defce4fd8697e2a86e8e7deb5bdc42134a286ee9072f17b18232c91a1585f2ddc13d77f466e5a5acd84863880de9c1029f5bac561ffddbbdaf1a05e973fe7b145fd3e7fdd9fae0c32fe47afb18a4ec880c808d44bc88bb08b64d2d5a6ccdb336493895fac7b9864cf785ab36ad45040496b6955e74c9a355613a71e4aa31642a8beddb0ec54f1562720f087f72c93b955d1b3dab946d247cdd79b6e72a7c04faace64b86e4cdef236f423acedd247e09bfce8ed0d75f0523589508b4a5f1055b1e7224eb6517e35ff29af0d2555600d5aaa20285f35f9ac6c68977608fc55a869b68b8eb37cbd901f7a8ea2c34566e3bc0e7131b0cba89c37154680afea653c520e1db49ed4c4b8d186daa196eccff1ef804247cf88333584664dc573383eeccd1a29f092d64771d6bb8e4973175170620b4807bbf5c11e7e5ba3d4318f632caea20da69cab5250747b7ab5e2a6a937fe0f8dddcbb2c079108f73fab8b5127bb935f55a1eb04cfdbe9be9fea544da6382ee63f9675a45a79d628dbd9ea5d894ae282b453c846d15a2586a801471a3a4fde33c7ab2f6ee2b4fd6b37b21e81d4a25ee4382d84390606570b0ed35e403902e12cff85230254763002e598db230ed9675f70c9fe7688b2808e2806a7deaf7a4fa33b07efc0d1e0e0a702442a6d3dca01f349b2e57d4ae02d696f6f9eba87fa4a0e53b107de8b6d5655ff9678d2c096364723533bd1d929b6e340d3c8659dac520f8393436edc119ad9c8e67eaa259d72cb91f7eb176fbbd76455187a1d2568dd21db6462381cc3b17ca060880ec76a2bc9d9e87da091b6d05b0236044984219de43d7f076ad3826d87de5a0b5ff0867cd7afc961d4c9025b0b58020e38d38707b01199d82f59659c74329f12c942d963c2f71f2d60cdd24a63fe35a961aede049b360e1630035474d9280eaf86203174f8048508fc62be216b7dbfff088314f0f7803b1631c1e522965eb15583d285346655534ac3250bbcb5db1b4e365a5d89d32ce78ccb7b622679184d016b49ba2af63291c42a68f95cb58ecee65f285e298a0b309bfa81010b59052e9be65c21355480ea98571b32446546b485a35d2aefad215e3dc0389180d324c2580f970137da708e00f15dc2800b207d5f289558912dbfad04a5a4633a1182fd252c84c1f5544db39a83a0792083049e6d7666e25dd7e3e3ac086ebd1bdc92011f90b0093cbf1dfc6ab60cf355cc5445441876929d608cddaccc89c99171e2af107d0aa08d0583f774b6c6f2d44d284b84ece824b5baf3e1a1c7897fedca0ef16aa559ec0849a375c36f9bcb8672f78fd3464f34c52027439d69e2d8f028fc3d97461c6258d4a316859b4da49b0eb905371121f6fcd7ba2a8d8c8b591f2e077fb2de4f36ddb791fe76fc592fa9b6c99da72c2373fe5c18474e5cdea25f6398d0cdfa89d3e3657d2eddbc112f542a3ff8ef4e9f8f4f620d90d02abc33a028c8d1e2a8a4d8b6280bbcfa81699fe90b06a042b5c72843d5e5cb17155ab8dd8c86f76287c9bc4e02c9b547a95aa3fdd16a5307ce7bada627203828fbdd9dc3cf578129b46a75bc9929d795061f3717036c157a08ed3aaa3dcd5b6b58fb9bac843ecdfd2764fa22919653ac699d6c5c4242bf3aab958d2afbfca9a0120c7445b36da9facfd1514d2d40f3b93b4f08fce962e3dcf9c8e25b9772c7618e61bedbdaafd80f51b2a5a99a496670b9ae5e3ac14dcbab484c0d5746147c0624f27a9bc4039b4ce6a6a8471c49ca120adf692f53490c2c586457b07c4e208e83023f25426245de2dc03537eb67774e4bf9ba47f50331f325264287e70579e9ba276e9e75cd9b7dd5f2ce2c86f4898e60e867348664418540b8575a31fbd8fba7393e0ddff746b724341164f0f6bc362bea67baecc0d31a8994e144f6dabc0e0535e42eb73143dbec9ed614078a85536e9dfd3bc2d1a4093cdc52232c63386cbcde3b85e40d7990b86b7b4f64df6180ce86d6bd7a0d94cea938656e2b5d5d5bbd7141d7591b37f66b331544c09e9f4c56178c4e91b5a6c39acb89d83626d48ebcd05aa3466b86ec6ce28632f9fc7489c39e13682d97dc83891a9dd77917892727c2892d024c1df88e92951827f36e97ad40b244d947cc0fcc4c826f31cfe203fafc99f86ed5e7760e33f48d26f1304d86f90b76b1db883c3275f0452975a35736a260f2ff05a817a7b6dab46ac2185a46c8fbef7fe988e2397f30991bd5b65da609401d3fb9555975d6c065297226e0252ddd9c8e5c487ed1f6533b574694cc26c232115db6dd9c6c58f842e23ccd257257148d64eca49a1499d6046b4eef7b489a9bc58071c945840d984bffa989a8272995ea2374d85f1b9f36b0c1dff5b15fe790162d72c9d699f4798ce51404c579d9b1fe32ab30ef3abe79a98c676d0a03b07a30d692fe1ca8acdc70bd30378c86dbeb84fc7605f67b3166d07f727c6d3409af54694a0d1f530bbcd9d6b49e056862dc46015499d32a90a046a702b4c4a98bd28fcd19958c0da5560f05231a2173f990224aaa98958a9fad5f78bfbb2720fd1d07b789493f954f45dc26a26e95f1ca438609d05a0f17560bc88da2b05d9df250cc2336459c45909f9e076c36c786a6e45a883e0ca06835c2b0bfe7c8cf39aa343a4ed3fbecbf3badc877afaea589c23c997e95ba29113ba5949799361a49b045f6371f37e41c88986a1e0c6f05e935a0530e5e1235d7134bc663e9d87da4dd60aeea2150d3299e824710d8ef801b29d08fa96c5d7b70066c16ec7d43e92ecaca43f8b14ef6cdd8c5d106cd1314290af01b85deef</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python入门】02 Python基础1——输入输出</title>
    <url>/blog/Course/Python/02/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在上一期的末尾我们说到三段大差不差的代码</p>
<p>代码的第一行都有计算<code>100+200</code>的意思，有的也得到了<code>300</code>，第二行都有显示<code>Hello, World!</code>的意思也都输出了</p>
<p>第一段代码在Python交互模式下输出了</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="number">300</span></span><br><span class="line"><span class="built_in">Hello,</span> World!</span><br></pre></td></tr></table></figure>

<p>第二段代码正常运行输出了</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="number">300</span></span><br><span class="line"><span class="built_in">Hello,</span> World!</span><br></pre></td></tr></table></figure>

<p>第三段代码正常运行却只输出了</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> World!</span><br></pre></td></tr></table></figure>

<p>这是为什么呢？<br>原因在于Python交互模式会将你执行的代码结果输出，而正常的程序结果只会在写了输出语句时才会输出</p>
<p><strong>我们在下文的代码中，如果开头有提示符<code>&gt;&gt;&gt;</code>即表示在Python交互模式下执行</strong></p>
<h1 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h1><p>输入和输出需要利用<code>input()</code>和<code>print()</code>，我们把这种具有一定固定作用(function)的语句称为<strong>函数(function)</strong>，这里的括号即表明<code>input</code>和<code>print</code>是一个函数。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>在print()的括号里加上字符串即可输出，就比如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Hello, World!'</span>)</span><br></pre></td></tr></table></figure>

<p>print()里也可以接受多个字符串，用”,”隔开，会输出一个空格，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Hello'</span>,<span class="string">'The'</span>,<span class="string">'World'</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Hello The World</span></span><br></pre></td></tr></table></figure>

<p>当然print()也支持输出整数或者输出计算结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">300</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">100</span>+<span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果为</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">300</span></span><br><span class="line"><span class="number">300</span></span><br></pre></td></tr></table></figure>

<p>当然我们也可以结合字符串把结果变得更好看一些，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'100 + 200 ='</span>,<span class="number">100</span>+<span class="number">200</span>)</span><br></pre></td></tr></table></figure>

<p>这样就会输出</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">100 </span>+ <span class="number">200</span> = <span class="number">300</span></span><br></pre></td></tr></table></figure>

<p>现在你已经掌握了基本的输出。</p>
<p>值得注意的是</p>
<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>现在我们可以通过print()输出结果了，但是我们想要用一个程序计算很多种情况而不想每次都去改程序怎么办？</p>
<p>我们这就要利用input()了，input()可以读取一个字符串<br>我们如果要利用这个字符串，就需要一个<strong>变量</strong>去保存<br>我们使用name变量（name只是一个名称，不同于print和input这种函数的名字，可以在不冲突的前提下任意起）保存这样的字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=input()</span><br><span class="line">Peter_Matthew</span><br></pre></td></tr></table></figure>

<p>当我们输入第一行后，Python交互模式就在等待我们输入了，我们可以任意输入一些东西，比如输入第二行的Peter_Matthew。</p>
<p>输入完后不会有任何提示而是又回到了”&gt;&gt;&gt; “的提示状态，我们刚才输入的内容保存到了变量name里<br>我们可以直接输入<code>name</code>查看变量内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br></pre></td></tr></table></figure>

<p>结果是</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line"><span class="symbol">'Peter_Matthew</span>'</span><br></pre></td></tr></table></figure>

<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>请注意，我们初中设正方形的边长为$a$,则正方形的面积就为$a^2$，我们把a看做一个变量，用于计算不同的a的不同的面积，比如：</p>
<ul>
<li>a=1,S=a*a=1*1=1</li>
<li>a=1.5,S=a*a=1.5*1.5=2.25</li>
</ul>
<p>计算机中的变量不仅可以为整数或浮点数（带小数的数），还可以是字符串，上文的name变量就是一个字符串</p>
<p>我们可以通过print函数输出变量内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br></pre></td></tr></table></figure>

<p>这样的结果是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Peter_Matthew</span><br></pre></td></tr></table></figure>

<h1 id="输入输出的一些小点"><a href="#输入输出的一些小点" class="headerlink" title="输入输出的一些小点"></a>输入输出的一些小点</h1><p>这样，我们就可以魔改hello World程序了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=input()</span><br><span class="line">print(<span class="string">'hello,'</span>,name)</span><br></pre></td></tr></table></figure>

<p>运行后输入Peter_Matthew，我们便可以看到</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hello,</span> Peter_Matthew</span><br></pre></td></tr></table></figure>

<p>我们发现没有任何提示就让你输入东西，十分地不方便，我们就想让程序先输出一行提示，这样我们的用户就可以根据提示输入了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'Please enter your name here: '</span>)</span><br><span class="line">name=input()</span><br><span class="line">print(<span class="string">'hello,'</span>,name)</span><br></pre></td></tr></table></figure>

<p>这样运行的结果是</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">Please enter your <span class="built_in">name</span> here:</span><br></pre></td></tr></table></figure>

<p>此时我们键入Peter_Matthew，即可得到</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hello,</span> Peter_Matthew</span><br></pre></td></tr></table></figure>

<p>有没有更简单的方法呢？<br>当然有的，input()函数可以让你显示一个字符串提示用户，于是我们就把代码改成了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name=input(<span class="string">'Please enter your name here: '</span>)</span><br><span class="line">print(<span class="string">'hello,'</span>,name)</span><br></pre></td></tr></table></figure>

<p>这样运行的结果和上文的程序类似，只不过上面的程序输入时换行了，下面的程序输入时没有换行（在同一行输入的）。值得注意的是与print函数不同，input函数中只能加入一段字符串</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>任何程序，都是为了执行一定特殊的操作。<br>有了输入，用户才能告诉程序所需的信息。<br>有了输出，程序运行后才能告诉用户结果。  </p>
<p>输入的英文为Input，输出的英文为Output，因此我们把输入输出统称为Input/Output，简称I/O，有时也写作IO。</p>
<hr>
<h1 id="提前尝试"><a href="#提前尝试" class="headerlink" title="提前尝试"></a>提前尝试</h1><p>请执行此代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a&gt;=<span class="number">0</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure>

<p>观察显示的的结果并尝试完成以下任务：</p>
<ol>
<li>思考这段代码中每行都表示什么意思</li>
<li>修改a的值或将a的值变为输入时赋值</li>
</ol>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python入门</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python入门】01 环境设置＆交互模式</title>
    <url>/blog/Course/Python/01/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>额，值得说明的是，这篇文章其实是在2019年1月13日写的，在两年后的2021年1月14日，在展开了对我的博客的大规模修复的工作时，这个当时被我鸽了的内容就得以残喘。至于当时写这篇博客的原因，其实是为了给我一个学长写教程，但显然文字教程不如实际教学，故我也就鸽了文字版的。今天，我开始重构这个系列，在经过了一系列网站的搭建、备案后，我决定 有 空 了 出一个视频教学版本来配合文字版达到最大的教学效果，当然目前还是没有时间的状态。</p>
<h1 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h1><p>相比我们介绍到的C++来说，Python的编辑器和编译器被官方融于一体，只需要下载<a href="https://www.python.org/downloads/release" target="_blank" rel="noopener">官网</a>上的Python安装即可。<br><img src="/pic/course/Python/Python01-01.png" alt=""><br>特别地，我们要在安装Python时选中<code>Add Python 3.9 to PATH</code>。</p>
<h1 id="运行Python"><a href="#运行Python" class="headerlink" title="运行Python"></a>运行Python</h1><p>我们打开命令行，输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">python</span></span><br></pre></td></tr></table></figure>

<p>如果此时出现类似</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">Python 3.9.1 (tags/v3.9.1:1e5d33e, Dec  7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="keyword">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>这样的文字，那么就说明已经安装成功。</p>
<p>如果提示</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">'python' 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br></pre></td></tr></table></figure>

<p>则说明未安装或者在安装时没有选择<code>Add Python 3.9 to PATH</code>。</p>
<h1 id="Python交互模式"><a href="#Python交互模式" class="headerlink" title="Python交互模式"></a>Python交互模式</h1><p>在命令行输入python后进入的样子称为<code>Python交互模式</code>。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│C:\WINDOWS\system32\cmd.<span class="keyword">exe</span> - Python              - □ <span class="keyword">x</span> │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│C:\Users\WilliamPeterMatthew&gt;<span class="keyword">python</span>                     │</span><br><span class="line">│Python <span class="number">3.9</span>.<span class="number">1</span> (<span class="keyword">tags</span>/v3.<span class="number">9.1</span>:<span class="number">1</span>e5d33e, Dec  <span class="number">7</span> <span class="number">2020</span>, <span class="number">17</span>:<span class="number">08</span>:<span class="number">21</span>│</span><br><span class="line">│) [MSC v.<span class="number">1927</span> <span class="number">64</span> bit (AMD64)] <span class="keyword">on</span> win32                  │</span><br><span class="line">│Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="built_in">or</span> <span class="string">"license"</span> <span class="keyword">for</span> mor│</span><br><span class="line">│<span class="keyword">e</span> information.                                          │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>在该模式下<code>&gt;&gt;&gt;</code>是一个提示符，表示你可以在<br>可以输入<code>exit()</code>退出此交互模式</p>
<p>您可以写一个代码（可以从提前尝试部分复制）保存为<code>.py</code>文件（例如a.py)<br>请将命令行路径调整到保存文件的目录然后在命令行模式执行</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">python <span class="selector-tag">a</span>.py</span><br></pre></td></tr></table></figure>

<p>如果是复制提前尝试部分的代码，应该可以在命令行看到</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="number">300</span></span><br><span class="line"><span class="built_in">Hello,</span> World!</span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> World!</span><br></pre></td></tr></table></figure>

<p>表示运行了该程序。</p>
<p>Python交互模式的代码是输入一行，执行一行，而命令行模式下直接运行.py文件是一次性执行该文件内的所有代码。可见，Python交互模式主要是为了调试Python代码用的，也便于初学者学习，它不是正式运行Python代码的环境！</p>
<h1 id="系统菜单中的四个东西"><a href="#系统菜单中的四个东西" class="headerlink" title="系统菜单中的四个东西"></a>系统菜单中的四个东西</h1><ul>
<li>IDLE (Python 3.9 64-bit)</li>
<li>Python 3.9 (64-bit)</li>
<li>Python 3.9 Manuals (64-bit)</li>
<li>Python 3.9 Module Docs (64-bit)</li>
</ul>
<p>第一个东西点开是一个白框下的Python交互模式，我们可以点击菜单栏上的<code>File-&gt;New File</code>来写一份新代码，或者<code>File-&gt;Open</code>打开代码，然后在新弹出来的窗口中选择<code>Run-&gt;Run Module</code>执行它。<br>第二个东西点开发现就是Python交互模式，与命令行打开的不用的是，此时输入exit()不会进入命令行模式而是会直接关闭窗口<br>第三个东西是一个英文手册，是一个完全看不懂而且可以忽略的东西<br>第四个东西一点开发现弹出了一个网页，发现也是英文手册，也可以忽略。对了，如果要退出此状态要找到打开的一个小黑框，在里面输入q敲回车即可</p>
<hr>
<h1 id="提前尝试"><a href="#提前尝试" class="headerlink" title="提前尝试"></a>提前尝试</h1><p>请在Python交互模式中分行输入以下代码并执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span>+<span class="number">200</span></span><br><span class="line">print(<span class="string">'Hello, World!'</span>)</span><br></pre></td></tr></table></figure>

<p>请创建两个.py文件输入以下代码并分别执行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="number">100</span>+<span class="number">200</span>)</span><br><span class="line">print(<span class="string">'Hello, World!'</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span>+<span class="number">200</span></span><br><span class="line">print(<span class="string">'Hello, World!'</span>)</span><br></pre></td></tr></table></figure>

<p>观察显示的的结果并尝试完成以下任务：</p>
<ol>
<li>思考一下这几段代码中每行都表示什么意思</li>
<li>试着修改显示出来的内容，并尝试减法、乘法和除法</li>
<li>为什么第三段代码执行时没有输出第一行的内容</li>
</ol>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python入门</tag>
      </tags>
  </entry>
  <entry>
    <title>不要看这篇文章</title>
    <url>/blog/Autobiography-03/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><center>中国人民警察大学 张开昕</center>

<p>&emsp;&emsp;学弟学妹们好，我相信你们翻开这册书的时候，一定多少都带有渴望从中汲取学习方法的想法。你们已经读了一些我们班通过报送、强基、高考进入清北等名校的同学的文章，相信你们已感受颇多；但很可惜，我并不优秀，不能给你们很好的学习方法，正如我在标题中提到的，不要看这篇文章，无论是出于对标题的好奇还是一篇一片地翻到了这里，我都很感谢你们能够将一名非优秀生的文章读到这里。</p>
<p>&emsp;&emsp;首先，简单做一个自我介绍，我叫张开昕，男生，2002年4月的，河南洛阳人，20年从郑外分校高考考入中国人民警察大学，入学时的专业是公安政治工作（法学学士学位），现在正在努力兼修网络安全与执法（工学学士学位）。下面简单给大家聊聊我的经历，希望对大家有所警示。</p>
<p>不要看这篇文章，因为我中考成绩就不是很好。</p>
<p>有人会问我来郑外，中考分高吗？答案是高，也不高。相信不少洛阳人都知道地调吧，也就是洛阳地矿双语学校。（不知道有没有同学和我一个初中。）我考出去的时候，分数不高，是一模和郑外签约才来的。到了班上后发现自己的排名十分靠后，再加上对一两个月不回家的不适应感，倒数个后五六名是稳定发挥。我是一名文科不好的学生，我的语文成绩能达到及格的90分我就觉得庆幸了，要是能上个100分，那我简直要乐开了花，是的，我的语文水平真的不高。（相信你读到这里之前就发现了。）九门学科中五门文科使我头大，所幸高一下学期我们实行有侧重地学习，分文理考试，成绩才慢慢向班里中等水平靠近。我初中数学是班里最好的，可来郑外后发现，高手如云，我根本比不过他们。那时的我还有许多动力，每天晚上比别人晚睡半个小时或者一个多小时，把几个学科老师的PPT提前拷到Kindle上，来回翻看来记，成绩算是接近我想要的了。到高二，我自然选的是理科。</p>
<p>你们应该可以从这里看到了，要尽快在环境变化时抓紧适应。不要对过往的成绩留恋，你应该要为保持而努力。</p>
<p>不要看这篇文章，是因为我高二大半年就没怎么再班里上课，所以给不了你们很好的学习方法。</p>
<p>有人会问我，你学竞赛，为了什么，累么？答案是为了升学，也不为了升学；累，也不累。还是给大家重点详细讲讲我竞赛的经历吧，毕竟学习上我也没什么好说的。</p>
<p>大家应该都知道五大学科竞赛吧，也就是数学、物理、化学、生物、信息五门。前四门大家应该都熟悉，和大家日常学习也多少沾点儿边，学了就算没得奖也对高考解决一些问题开拓了思路。也许有这个原因吧，信息学竞赛一直都没有多少人报。这不仅仅是郑外如此，河南省所有学校都是如此，这就导致人口大省河南一年报名参加信息学竞赛的总人数连四位数都不到（当然，这是我那年的参加人数，现在有多少我不是很清楚），因此非常好拿奖，固然很多学校认为其含金量并不高。尽管如此，分校对五大学科竞赛也全都是有培训的，但与之相反的是，前四科在分校都属于兴趣班，而信息学竞赛是分校唯一允许停课学习的竞赛。（其实就是自愿放弃停课期间的学习、考试去捣鼓竞赛，而别的竞赛的没人愿意这么做。）</p>
<p>这里我必须要提一下，你们看了王子骏和孙启皓的文章也应该知道，王子骏和孙启皓实力接近且都比我强很多，培训时报的都是省选组难度的。真是硬要比的话，骏哥更聪明，皓哥更努力。而我就是我们三个人中又不聪明又不努力最菜的那个，培训时报的是提高组难度的。</p>
<p>当然我们在高一的时候停课还并不明显，也就是利用休息时间学习，寒暑假去了福建和浙江培训了而已。但到了高二，十月运动会一结束，我们便开始了停课生活，从早到晚一直在学知识点、做题，每周都有模拟赛。终于到了十一月，我们打完竞赛，回去准备会考。结果出分后我的成绩并不理想，虽然过了省一等奖分数线和省选人数控制分数线，但是这个成绩在省选中实在不占优势。遗憾的是孙启皓突然发挥失利，遗憾地拿了省三等奖，不过王子骏拿了省一等奖。所幸会考我全科都是A。</p>
<p>接着，2019年1月1日，正在新的一年到来之时，我和王子骏与其他班过省选线的同学一起踏上了冲向省队的道路，又开始了没日没夜的停课学习生活。好在省选前我们去安徽培训时，路上顺便到南京游览了一下风光稍稍放松了下绷得有点紧的神经。然而省选的结果非常不好，整个学校没有人进入省队，大致的结果就是王子骏错了1.2分进省队，我因为对字符串过于自信，把一部分代码删了少了40分，错了36.2分进省队。最后就只好回去补文化课去了，高三又拿着玩一玩的心态考了一次拿了一张省一等奖。（高三是不能参加省选的。）</p>
<p>有人会问我的那个科技创新有用吗？答案是，没用，那个只是兴趣使然。我十分喜欢计算机，相信大家能从我上面的文字中看出来一些痕迹。高中那个我，趁着自己竞赛的部分时间比较空余，学习了人工智能中深度学习图像分割的一些东西，最后发了一篇小的论文，也参加了答辩。但是很可惜啊，原本论文是可以在自主招生中有用的，可后来都没用了。</p>
<p>你们应该可以从这里看到了，不要对竞赛下太大功夫，除非你真的实力很强；别一门心思捣鼓那有的没的，老老实实学习在高中阶段比什么都强。</p>
<p>不要看这篇文章，因为形势变化太大。</p>
<p>有人会问我一些竞赛政策。我只能说，我也不知道。我不知道我说完政策会不会马上就变，我不知道你们的新政策又是什么。从12年竞赛省一保送到20年金银牌才能参加强基计划竞赛类，几年时间，形势变化太大。你根本不知道你将会面对什么样的政策，通过什么方式进入大学。当唯一不变的是，你的实力决定了你能走到哪里，而不是政策；强者终归会到好学校。无奈还是我自己太菜，竞赛的路走不好，文化课又被吊着打，高考失利也只是活该。</p>
<p>你们应该可以从这里看到了，正如滕老师所言，能用上非高考的优惠条件的人不多；当然，除了外语类保送生。</p>
<p>不要看这篇文章，因为你们见证历史太难。</p>
<p>有人会问说新冠期间你们高三的学习怎么进行的？我只能说，老师们都非常负责任，但是我没有把握好自主学习的机会。</p>
<p>高三如高山，翻过一山又一山，以为前方一马平川，其实是自己没有爬山。高三上学期，在努力了一个学期后，我的学习成绩终于有了点起色，排了中等。正在我寒假努力之际，一场到我写文章时还隔三岔五有本土新增确诊病例的新型冠状病毒引起的肺炎疫情开始了。我们的寒假就这么被延长了，而且是一次又一次地延长。</p>
<p>第一次延长的时候，我还庆幸可以稍微休息一会儿了，可假期一次又一次的延长，使我慌张了起来——我是一个喜欢偷懒的人，在家里虽然也在学，但是时间上不及在学校的时间。终于，百日誓师的那天到了，线上的誓师让我决心改变在家的习惯。但，可惜，已经太晚了，我已经追不上那些在家里认认真真学习的人了。但国家还是给我塞了一片后悔药，我们见证了历史，七月份高考。</p>
<p>记得那天是上午教育部上午开发布会宣布高考延期一个月，下午河南省教育厅开发布会宣布一周后返校。返校后，我努力追赶，可成效不大，最终高考没有考好，在题目容易的情况下仍然只考了597分，虽然数学考了145分，但是其他科考得真的非常差。</p>
<p>出分那天晚上，我没有怎么哭，因为我知道我会考的很差，什么结果我知道；我只是很犹豫，我在决战到底是在一些学校不好的专业读，还是在一些有计算机专业但学校不好的地方读，还是选择复读一年。我真的很犹豫。我一直准备复读，因为我觉得这个成绩已经这样了，我已经不想再填报什么学校了，只想用今年的成绩逼迫自己让自己明年取得让自己满意的成绩。</p>
<p>你们应该可以从这里看到了，你们没有后悔药，你们应该抓紧自己的时间，不能浪费，一定不能用一时的喜悦造成一生的后悔，别拿自己的前途开玩笑。</p>
<p>不要看这篇文章，因为选择警校就读不一定是你的选择。</p>
<p>但无奈，在父母老师的劝导下，我在一本填了几个还能让我自己接受的学校和专业，然后在提前批公安院校中开始抉择。更让我崩溃的事情出现了，我的分数远不及中国人民公安大学和中国刑事警察学院，只能尝试中国人民警察大学。于是我填报了警察大学，理论上按去年的录取结果，我应该走最好的专业都没有问题，于是我直接只填了两个专业——网络安全与执法和大数据技术。结果没想到的是，我只比体检面试分数线高十几分，而体检面试是按1:3划线的，这就意味着我不一定能考上警察大学，更不要说那两个专业能不能上了。但万幸的是，我考上了；不幸的是，我被调剂的专业是公安政治工作，是个纯文科，而我文科十分不好。</p>
<p>中国人民警察大学前身是中国人民武装警察部队学院，是2018年军转警的学校，保留了很多部队时期的原则做法。军训的日子是很苦的，队列训练、紧急集合、压被子都是军训常态。正式上课了也有周一周四的队列训练和一周一次的体能训练，每天也要按规定整理内务。没有一定的耐受度还真不能来这里。</p>
<p>不过警大的生活也很丰富，也有学生会、社团、记者团等等，你也能参加一些竞赛啊拿奖拿钱，就比如我在写文章的时候，刚拿到天梯赛的个人国三、团体省一、团体国三，和一个中国电子数据取证大赛的全国一等奖，因此开始了网络安全与执法专业的学习；你也能参加一些校内勤工助学岗位赚钱。在校四年后你将收获与你高中同学不一样的自己。</p>
<p>你们应该可以从这里看到了，警校是一种选择，但不是唯一的，希望大家填志愿的时候再谨慎一些。滕老师说学校比专业重要，我觉得是一种考量，我还是建议大家多多参考。</p>
<p>但，这篇文章还是要看的，你们从中真的看到了许多东西，相信你们一定看到了一些血的教训，希望各位不要步我的后尘。</p>
<p>最后，不要看这篇文章，因为你来警察大学的话，我可能就会是你们军训时候的组训班长。</p>
]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>信竞要以和为贵，要讲码德！</title>
    <url>/blog/Autobiography-02/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&emsp;&emsp;同学们好啊，我是中国人民警察大学学员张开昕。刚才有个同学问我说开昕发生什么事了？我说怎么回事？给我发了一个张照片，我一看！噢！原来是昨天有两个年轻人，十六七岁，一个拿了数学的省一，一个拿了物理的省一。<br>&emsp;&emsp;塔们说，诶，有一个说是我在教室里学习编程不懂了，开昕你能不能教教我信息竞赛，诶，帮助丰富一下，他的技能树。我说可以。我说你在教室里学太“死”了，不好用，他不服气，我说：小学弟，你两个人来比我一个竞赛的。他比不过。他说你这个没用，我说我这个有用，这个是积累，信息竞赛讲积累的，简洁而高效。两张省一的其他竞赛的，比我不比我这一个信竞的。啊，哈！他非要和我比比，我说可以。<br>&emsp;&emsp;诶，我一说完，啪就打开电脑了，很快啊！然后上来就是一行万能头，一个标准域，一个int main，我全部代码打完了啊。打完了以后，自然是传统技艺你打完为止；代码粘到洛谷上没提交，我笑一下准备关机。因为这时间，诶，传统技艺的打完为止，他已经输了；如果我一点提交，一下就让他看到我AC了。粘到洛谷上没有提交，他也承认，我先打完他后完。他不知道代码粘到洛谷上没提交，他承认我先打完他后完啊。<br>&emsp;&emsp;我关机的时间不交了，他突然提交代码AC刺我眼。啊，我大一了啊，没有交。诶，他的代码比起我，啊，提交，快了一点，但没关系啊！他也说，啊他截图也说了，两分多钟，当时就一片绿，指着我，我说停，停。然后两分钟钟以后，两分多钟以后，诶，就过了。<br>&emsp;&emsp;我说小学弟你不讲码德你不懂。他说开昕哥对不起对不起，我不懂规矩啊，我是…他说他是瞎写的，他可不是瞎写的啊，一百多行宏定义，训练有素，后来他说他写过一两年Java，啊，看来是有备而来！<br>&emsp;&emsp;这两个年轻人不讲码德，来骗，来偷袭，我这十八岁的老学长，这好吗？这不好。我劝这位年轻人，耗子尾汁，好好反思，以后不要再犯这样的聪明，小聪明，啊。呃…信竞要以和为贵，要讲码德，不要搞校内斗！谢谢朋友们！</p>
]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 L1-001 【Hello World】</title>
    <url>/blog/solution-L1-001/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://pintia.cn/problem-sets/994805046380707840/problems/994805147132084224" target="_blank" rel="noopener">PTA L1-001</a>:</p>
<p>本题是语言入门题，作为新手，你只需要照代码打出即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello World!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面对代码进行解析：<br>第一行表示引用<code>iostream</code>库，库中包含cin/cout函数。<br>第二行表示声明使用标准命名空间<code>std</code>，如果不声明，可以在第五行<code>cout</code>前加<code>std::</code>变为<code>std::cout</code>。<br>下来进入主函数，第五行表示输出<code>Hello World!</code>；第六行表示将程序返回0，即正常结束。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>假如生活欺骗了你</title>
    <url>/blog/Essay-01/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>假如生活欺骗了你，<br>站会儿军姿吧，<br>军姿是不会欺骗你的，<br>两小时真的就是两小时。</p>
<p><img src="/pic/Essay-01.png" alt="Essay-01"></p>
<p>假如生活欺骗了你，<br>不要悲伤，不要心急！<br>军训的日子里须要镇静：<br>相信吧，站军姿的日子将会来临！<br>两小时真的就是两小时；<br>现在却常是瞬息。<br>一切都是瞬息，<br>一切都将会过去；<br>而那两个小时，<br>就会成为痛苦的回忆。</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>【昕体验01】闭眼倾听，世界更美丽</title>
    <url>/blog/Xin-Experience/01W/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/pic/Xin-Experience/01/Banner.png" alt="banner"></p>
<blockquote>
<p>“给明眼人写盲人应用评测，你也是评测界的一股清流。”</p>
<p align="right">——某刘姓博客主</p>
</blockquote>
<h1 id="TalkBack体验"><a href="#TalkBack体验" class="headerlink" title="TalkBack体验"></a>TalkBack体验</h1><p>&emsp;&emsp;因为个人原因，最近几天我不能用眼睛直视手机、电脑等电子产品；不过接打电话、听听歌曲还是可以的。但是不甘于放下手机的我于是想起了Google提供的无障碍服务中的TalkBalk。</p>
<h2 id="TalkBack简介"><a href="#TalkBack简介" class="headerlink" title="TalkBack简介"></a>TalkBack简介</h2><p><img src="/pic/Xin-Experience/01/TalkBack.png" alt="TalkBack"><br>&emsp;&emsp;TalkBack是Google的<a href="https://play.google.com/store/apps/details?id=com.google.android.marvin.talkback" target="_blank" rel="noopener">Android无障碍套件</a>（全文手机系统默认为Android）中的一个应用。无障碍套件包含一系列无障碍应用：“无障碍功能”菜单、随选朗读、开关控制和TalkBack屏幕阅读器，可以让我们无需使用双眼或者仅通过开关设备即可使用手机。</p>
<blockquote>
<p>无障碍套件简介：</p>
<ul>
<li>“无障碍功能”菜单：可以使用这个屏幕菜单来执行锁定手机、控制音量和亮度、截取屏幕截图等操作。</li>
<li>随选朗读：系统会朗读屏幕上选定的内容</li>
<li>开关控制：可以使用一个或多个开关或使用键盘（而不是触摸屏）与手机进行互动。</li>
<li>TalkBack 屏幕阅读器：操作手机时会获得语音反馈，可以使用手势控制手机，并使用屏幕盲文键盘输入。</li>
</ul>
</blockquote>
<h2 id="开启TalkBack"><a href="#开启TalkBack" class="headerlink" title="开启TalkBack"></a>开启TalkBack</h2><p>&emsp;&emsp;我使用的手机是小米8，系统是MIUI12 20.7.15。MIUI提供了以下几种开启TalkBack的方式。</p>
<ol>
<li><p>开机引导<br>&emsp;&emsp;在新手机开机后，会加载出开机引导页面，此时双指按住屏幕大于10秒左右，即可听到语音提示“持续按住双指即可启用无障碍功能”，此时继续双指按住屏幕后会听到语音提示”无障碍功能TalkBack已开启”并自动进入TalkBack教程页面。</p>
<blockquote>
<p>&emsp;&emsp;如果是刷完机会显示“本设备已锁定”界面覆盖开机引导，此时若想不激活设备就启用TalkBack的话，可参照第二种方法启用。</p>
</blockquote>
</li>
<li><p>音量键快捷方式<br>&emsp;&emsp;在任意界面同时长按音量+-键3秒，即可启用TalkBack。<br><img src="/pic/Xin-Experience/01/o2.png" alt="o2"></p>
</li>
<li><p>小爱同学语音开启<br>&emsp;&emsp;直接对小爱说“打开TalkBack”或者“打开屏幕阅读器”，小爱同学会提示“打开TALKBACK后，服务会监测您的操作及输入，检索窗口内容，并开启触摸浏览。请注意隐私，如需关闭，可以对我说：关闭TALKBACK”并将TalkBack服务开启。<br><img src="/pic/Xin-Experience/01/o3.png" alt="o3"></p>
</li>
<li><p>进入设置打开开关<br>&emsp;&emsp;对于MIUI 12 20.7.15，打开设置—更多设置—无障碍—视觉—TalkBack，将开启服务开关打开即可打开。</p>
</li>
</ol>
<h2 id="关闭TalkBack"><a href="#关闭TalkBack" class="headerlink" title="关闭TalkBack"></a>关闭TalkBack</h2><p>&emsp;&emsp;如果你误启用了TalkBack，可以通过以下方式关闭</p>
<ol>
<li><p>音量键快捷方式<br>&emsp;&emsp;在进入TalkBack模式时，屏幕上会有“当前处于talkback模式”的水印提示TalkBack服务一起用，此时可按照第二行水印”同时长按音量+-键3秒即可退出”的说明退出。<br><img src="/pic/Xin-Experience/01/c1.png" alt="c1"></p>
</li>
<li><p>小爱同学语音关闭<br>&emsp;&emsp;直接对小爱说“关闭TalkBack”或者“关闭屏幕阅读器”即可。<br><img src="/pic/Xin-Experience/01/c2.png" alt="c2"></p>
</li>
<li><p>进入设置关闭开关<br>&emsp;&emsp;对于MIUI 12 20.7.15，打开设置—更多设置—无障碍—视觉—TalkBack，将开启服务开关关闭即可关闭。</p>
<blockquote>
<p>&emsp;&emsp;注意：对于这种方式，你需要掌握一定的触摸浏览方式才能进行，如果是误打误撞进入的TalkBack模式，十分不推荐这样退出。</p>
</blockquote>
</li>
</ol>
<h2 id="TalkBack教程"><a href="#TalkBack教程" class="headerlink" title="TalkBack教程"></a>TalkBack教程</h2><p>&emsp;&emsp;TalkBack的官方教程分为五课，如果是有需求的人，建议完成官方教程，因为官方教程不仅文字描述具体，而且具有交互教学性，可以真正地。<br>&emsp;&emsp;当然，本着一颗无聊心，你也可以看一下我的简介。</p>
<ol>
<li><p>第一课：基本浏览操作<br>&emsp;&emsp;快速向左滑动手指可以向左及向上浏览内容，快速向右滑动手指可以向右及向上浏览内容。要激活选定框所选取的内容，只需在任意位置点按两次即可。注意并不是点按某一位置两次就可以激活，而是要先选定再在任意位置点按两次才能激活。<br><img src="/pic/Xin-Experience/01/Guide01.png" alt="Guide01"></p>
</li>
<li><p>第二课：滚动<br>&emsp;&emsp;如果要使用固定单位向前滚动列表，可以使用单指向左再向右滑动；如果要使用固定单位向后滚动列表，可以使用单指向右再向左滑动。<br><img src="/pic/Xin-Experience/01/Guide02.png" alt="Guide02"></p>
<blockquote>
<p>&emsp;&emsp;事实上，双指操作基本等同于原本的未开启TalkBack模式下的单指操作。</p>
</blockquote>
</li>
<li><p>第三课：TalkBack菜单<br>&emsp;&emsp;TalkBack菜单分为全局TalkBack菜单和本地TalkBack菜单。全局TalkBack菜单可以通过单指先向下再向右滑动激活，菜单中的项目是固定的，用于进行TalkBack的常用操作和设置。本地TalkBack菜单可以通过单指先向上再向右滑动激活，菜单中的内容会因为选取的内容不同而异。<br><img src="/pic/Xin-Experience/01/Guide03.png" alt="Guide03"></p>
</li>
<li><p>第四课：文字浏览<br>&emsp;&emsp;由于打字和浏览时，盲人无法直接看出文字的不同，比如使用“白勺”“的”、“土也”“地”和“彳”旁“得”的时候，语音无法直接听出来区别，所以就需要控制一次读出的文段长度，例如一个段落、一行、一个字词或者一个字符。而设置的方法就是点按需要的文字，然后上下滑动修改读出的长度。比方说设置为字符朗读后，只需要向右滑动选定的文字，就可以逐字符朗读。例如“的地得”就会逐字符读为“的，我的；地，天地；得，得失。”<br><img src="/pic/Xin-Experience/01/Guide04.png" alt="Guide04"></p>
</li>
<li><p>第五课：文字编辑<br>&emsp;&emsp;如果要进行文字编辑，建议先下载便于盲输的键盘，可惜的是国内的搜狗输入法、百度输入法等都不便于进行盲输。编辑框激活后，屏幕下方就会弹出输入法供使用，可以点按返回关闭。输入文字时按住键盘区域然后移动手指，TalkBack会读出此时手指所按的字符，松手即可激活该字符。同时，可以使用音量+-键调整光标的位置，音量+键向后移动一格光标，音量-键向前移动一格光标，TalkBack会读出光标前的一个字符，同时可以结合本地TalkBack菜单进行选择、剪切、复制或粘贴文字操作。<br><img src="/pic/Xin-Experience/01/Guide05.png" alt="Guide05"></p>
</li>
</ol>
<h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><p>&emsp;&emsp;在使用TalkBack的几天里，我深深感受到了一种绝望感，由于刚上手TalkBack，操作熟练度不够，经常操作失误，需要全局返回重新操作。如果不是因为我知道应用长什么样，哪里可以干什么，我可能什么都干不了。接听电话或者是打开网易云音乐从我的歌单里选歌听听还是比较简单的，但打开输入法搜歌或者发送消息什么的就比较困难了。</p>
<h3 id="影音视听"><a href="#影音视听" class="headerlink" title="影音视听"></a>影音视听</h3><p>&emsp;&emsp;在不能看东西的几天里，我尝试听完了《破冰行动》，发现只能大致搞懂剧情（这当然是废话），使用了哔哩哔哩和央视影音，整体感觉是还可以，可以跟随语音提示正常操作。使用网抑云网易云音乐可以正常听歌，基本不受影响。</p>
<h3 id="聊天社交"><a href="#聊天社交" class="headerlink" title="聊天社交"></a>聊天社交</h3><p>&emsp;&emsp;几天当中，我完全放弃了使用聊天社交，因为我手机上的搜狗输入法和百度输入法对盲输的支持不好，在敲字母时由于字母不会移动，所以能够正常输入，但是选词和输入特殊符号由于会跟随滑动，所以基本是完全蒙的状态，不过后来使用语音输入就比较方便了，但我还是没有太多地尝试聊天社交。</p>
<h3 id="娱乐消遣"><a href="#娱乐消遣" class="headerlink" title="娱乐消遣"></a>娱乐消遣</h3><p>&emsp;&emsp;在这几天里，刷沙雕段子绝对是消遣时间的主要方式，然而最右这个应用很多的段子是图片或者是视频，所以不是很方便，但是文字段子也不少，所以也很能消遣时间。</p>
<h3 id="新闻资讯"><a href="#新闻资讯" class="headerlink" title="新闻资讯"></a>新闻资讯</h3><p>&emsp;&emsp;除了娱乐消遣，新闻资讯也是空闲时间的一项重要活动，今日头条和学习强国还是挺方便的，毕竟大部分都是文字资讯，视频资讯也会经常将主要内容用语音播报，所以新闻资讯的阅读几乎不受影响。</p>
<h3 id="居家生活"><a href="#居家生活" class="headerlink" title="居家生活"></a>居家生活</h3><p>&emsp;&emsp;虽然说这个类别的应用我不是在家尝试的，但毕竟分类叫这个名，我就也这么用了。我这几天用的应用不多，就有一个美团，尝试盲点了一个外卖，但是最后还是在家人的帮助下才完成的。由于我不是很熟悉这个应用，所以使用感觉效果不好，用了两次也不用了，当然也有一部分原因是我不能吃刺激性的食物所以点不了多少外卖。</p>
<h3 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h3><p>&emsp;&emsp;游戏？图像太多，这样子玩不了的。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>&emsp;&emsp;记得之前我在YT上发过一条关于德国的色盲/色弱矫正眼镜的体验视频，带上这个眼镜我就可以通过色彩校正看到正常颜色，不过后来因为这个眼镜的部分问题我把视频删了。想必也有不少人体验过或正在使用类似的眼镜。<br>&emsp;&emsp;其实很早我们就想出办法让盲人感受到这个世界。布莱叶盲文的发明使盲人可以仅靠触觉就能感受文字、获得知识，然而智能手机并不能将屏幕上的文字转换为布莱叶盲文供盲人阅读，因而盲人大多也不会持有智能手机。然而一次路上，我看到一位盲人拿着老年机拨打电话。我们都知道老年机大多有实体数字键盘，并且有声音提示。这个声音提示本质上是为了眼睛老花了的老年人能够知道屏幕上的文字所设计的，而他很巧妙地利用了这个机制使自己能够使用手机。但其实如果他熟悉TalkBack，应该可以帮助他更好地使用手机。<br>&emsp;&emsp;当然不只是手机，盲人也感受不到我们看到的自然美景。“当上帝关了这扇门，一定会为你打开另一扇门。”大部分盲人的听力和触觉感知力都好于一般人。也许他们无法看到山中绿水青山的美景，但他们比我们更容易听到微风吹拂树木、鸟儿山中啼叫的美妙声音，更容易感受到树干的粗糙以及这背后生长的艰辛。<br>&emsp;&emsp;我想如果给我一天闭眼到大自然中感受世界的时间，我想我也许会更用心感受世界的美好。<br>&emsp;&emsp;放下手机，用心去感受。<br>&emsp;&emsp;闭眼倾听，世界更美丽。</p>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>昕体验</tag>
        <tag>TalkBack</tag>
      </tags>
  </entry>
  <entry>
    <title>成人快乐</title>
    <url>/blog/HappyGrownup/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>终于<br>&emsp;&emsp;<br>2020年4月20日10点55分，我18岁了。<br>&emsp;&emsp;<br>十分感谢一路上陪伴我的家人，朋友，同学，老师，以及那些给过我一个温暖的微笑的亲爱的陌生人，感谢你们让我坚持走到现在。<br>也要和那些冷眼相待我的人说声感谢，感谢你们让我认识到了社会。<br>&emsp;&emsp;<br>十八年来，我也曾被别人伤害过，也曾伤害过别人。但无论如何，都要和你们说一声对不起。<br>&emsp;&emsp;<br>能改变一切的只有时间。十年为了一个人，九年也为了一个人，八年也为了一个人。也许路人早十五分钟是另一个结局，路人晚十分钟又是另一个结局，但时间选择了中间，一刀切断所有。<br>&emsp;&emsp;<br>十八岁了，丹参成仁了。有遗憾，没有体会到青春的这一份美好，也许以后可以拥有，也许不会拥有。<br>&emsp;&emsp;<br>十八岁了，也许应该满怀期待奔向明天，也许会被残酷现实打击，但我总要向前。<br>&emsp;&emsp;<br>十八岁了啊。<br>&emsp;&emsp;<br>&emsp;&emsp;<br>最后：<br>&emsp;&emsp;<br>愿漂泊的人，都能有酒喝，<br>愿孤独的人，都自在唱歌。<br>愿相爱的人，都拥有未来，<br>愿等待的人，都得到回答。<br>愿孤单的人，不必总逞强，<br>愿逞强的人，身边有肩膀。<br>愿有个肩膀，承欢喜忧伤，<br>愿天下情人，永执手相望。<br>愿你如阳光，明媚不忧伤，<br>愿你如月光，明亮不清冷。<br>愿你走四方，总有休憩处，<br>愿你爱的人，是爱你的人。<br>&emsp;&emsp;<br>十八岁了。<br>成人快乐。<br>&emsp;&emsp;<br><font color="white">叶昕</font><br>张开昕<br>2020年4月20日<br>庚子鼠年庚辰月癸巳日<br><img src="/pic/115282_OuDWsPsO.png" alt="丹参成仁（单身成人）"></p>
]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>PC软件推荐</title>
    <url>/blog/Software-PC/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>（博主较忙，先列上部分列表占个坑，以后回来填）</p>
<h1 id="杀毒软件"><a href="#杀毒软件" class="headerlink" title="杀毒软件"></a>杀毒软件</h1><h2 id="火绒"><a href="#火绒" class="headerlink" title="火绒"></a>火绒</h2><h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="百分浏览器"><a href="#百分浏览器" class="headerlink" title="百分浏览器"></a>百分浏览器</h2><h1 id="聊天"><a href="#聊天" class="headerlink" title="聊天"></a>聊天</h1><h2 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h2><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><h2 id="迅雷U享版"><a href="#迅雷U享版" class="headerlink" title="迅雷U享版"></a>迅雷U享版</h2><h1 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h1><h2 id="搜狗智慧输入法"><a href="#搜狗智慧输入法" class="headerlink" title="搜狗智慧输入法"></a>搜狗智慧输入法</h2><h1 id="音乐软件"><a href="#音乐软件" class="headerlink" title="音乐软件"></a>音乐软件</h1><h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><h1 id="视频软件"><a href="#视频软件" class="headerlink" title="视频软件"></a>视频软件</h1><h2 id="PotPlayer"><a href="#PotPlayer" class="headerlink" title="PotPlayer"></a>PotPlayer</h2><h1 id="解压软件"><a href="#解压软件" class="headerlink" title="解压软件"></a>解压软件</h1><h2 id="Bandizip"><a href="#Bandizip" class="headerlink" title="Bandizip"></a>Bandizip</h2><h1 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h1><h2 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h2><h1 id="办公软件"><a href="#办公软件" class="headerlink" title="办公软件"></a>办公软件</h1><h2 id="Microsoft-Office"><a href="#Microsoft-Office" class="headerlink" title="Microsoft Office"></a>Microsoft Office</h2><h2 id="网易邮箱大师"><a href="#网易邮箱大师" class="headerlink" title="网易邮箱大师"></a>网易邮箱大师</h2><h1 id="图片编辑"><a href="#图片编辑" class="headerlink" title="图片编辑"></a>图片编辑</h1><h2 id="Adobe-Photoshop"><a href="#Adobe-Photoshop" class="headerlink" title="Adobe Photoshop"></a>Adobe Photoshop</h2><h1 id="音乐编辑"><a href="#音乐编辑" class="headerlink" title="音乐编辑"></a>音乐编辑</h1><h2 id="Adobe-Audition"><a href="#Adobe-Audition" class="headerlink" title="Adobe Audition"></a>Adobe Audition</h2><h1 id="视频编辑"><a href="#视频编辑" class="headerlink" title="视频编辑"></a>视频编辑</h1><h2 id="Adobe-Premiere-Pro"><a href="#Adobe-Premiere-Pro" class="headerlink" title="Adobe Premiere Pro"></a>Adobe Premiere Pro</h2><hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>软件推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>下歌</title>
    <url>/blog/Song-Download/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>文章以 Google Chrome 浏览器作示例。<br>视频文件较大建议下载到本地观看。<br>视频文件较大建议下载到本地观看。  </p>
</blockquote>
<h1 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h1><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://peter_matthew.coding.net/api/share/download/cc7d91cb-1dac-4959-ac9a-4a69fc6ff474","pic":"/pic/SongDownload/WYY01.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
<p><a href="https://Peter_Matthew.coding.net/s/cc7d91cb-1dac-4959-ac9a-4a69fc6ff474" target="_blank" rel="noopener">点这里下载视频</a></p>
<h2 id="图文分解"><a href="#图文分解" class="headerlink" title="图文分解"></a>图文分解</h2><p>1.打开歌曲页面<br><img src="/pic/SongDownload/WYY01.png" alt="WYY01"></p>
<p>2.在页面右键，选择“检查”（审查元素）<br><img src="/pic/SongDownload/WYY02.png" alt="WYY02"></p>
<p>3.在新出来的对话框中选择 Network 选项卡<br><img src="/pic/SongDownload/WYY03.png" alt="WYY03"></p>
<p>4.播放歌曲<br><img src="/pic/SongDownload/WYY04.png" alt="WYY04"></p>
<p>5.在左方的区域找到<code>.mp3</code>结尾的文件<br><img src="/pic/SongDownload/WYY05.png" alt="WYY05"></p>
<p>6.右键此文件选择’Open in new tab’<br><img src="/pic/SongDownload/WYY06.png" alt="WYY06"></p>
<p>7.如果浏览器可以直接下载，则下载；如果不可以直接下载，复制歌曲网址，打开下载器，选择新建下载，在地址框中粘贴网址并下载<br><img src="/pic/SongDownload/WYY07.png" alt="WYY07"></p>
<h1 id="QQ音乐"><a href="#QQ音乐" class="headerlink" title="QQ音乐"></a>QQ音乐</h1><h2 id="视频-1"><a href="#视频-1" class="headerlink" title="视频"></a>视频</h2><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"video":{"url":"https://peter_matthew.coding.net/api/share/download/766da116-d34b-47b5-8f39-800cc5a0b160","pic":"/pic/SongDownload/QQ01.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
<p><a href="https://Peter_Matthew.coding.net/s/766da116-d34b-47b5-8f39-800cc5a0b160" target="_blank" rel="noopener">点这里下载视频</a></p>
<h2 id="图文分解-1"><a href="#图文分解-1" class="headerlink" title="图文分解"></a>图文分解</h2><p>1.打开歌曲页面<br><img src="/pic/SongDownload/QQ01.png" alt="QQ01"></p>
<p>2.在页面右键，选择“检查”（审查元素）<br><img src="/pic/SongDownload/QQ02.png" alt="QQ02"></p>
<p>3.在新出来的对话框中选择 Network 选项卡<br><img src="/pic/SongDownload/QQ03.png" alt="QQ03"></p>
<p>4.播放歌曲<br><img src="/pic/SongDownload/QQ04.png" alt="QQ04"></p>
<p>5.在左方的区域找到<code>.m4a</code>结尾的文件<br><img src="/pic/SongDownload/QQ05.png" alt="QQ05"></p>
<p>6.右键此文件选择’Open in new tab’<br><img src="/pic/SongDownload/QQ06.png" alt="QQ06"></p>
<p>7.如果浏览器可以直接下载，则下载；如果不可以直接下载，复制歌曲网址，打开下载器，选择新建下载，在地址框中粘贴网址并下载<br><img src="/pic/SongDownload/QQ07.png" alt="QQ07"></p>
<h1 id="酷狗音乐"><a href="#酷狗音乐" class="headerlink" title="酷狗音乐"></a>酷狗音乐</h1><h2 id="视频-2"><a href="#视频-2" class="headerlink" title="视频"></a>视频</h2><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"video":{"url":"https://peter_matthew.coding.net/api/share/download/aa07edfd-5d0f-4a55-a7b6-089410122e1f","pic":"/pic/SongDownload/KG01.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
<p><a href="https://Peter_Matthew.coding.net/s/aa07edfd-5d0f-4a55-a7b6-089410122e1f" target="_blank" rel="noopener">点这里下载视频</a></p>
<h2 id="图文分解-2"><a href="#图文分解-2" class="headerlink" title="图文分解"></a>图文分解</h2><p>1.打开歌曲页面<br><img src="/pic/SongDownload/KG01.png" alt="KG01"></p>
<p>2.在页面右键，选择“检查”（审查元素）<br><img src="/pic/SongDownload/KG02.png" alt="KG02"></p>
<p>3.在新出来的对话框中选择 Network 选项卡<br><img src="/pic/SongDownload/KG03.png" alt="KG03"></p>
<p>4.播放歌曲<br><img src="/pic/SongDownload/KG04.png" alt="KG04"></p>
<p>5.在左方的区域找到<code>.mp3</code>结尾的文件<br><img src="/pic/SongDownload/KG05.png" alt="KG05"></p>
<p>6.右键此文件选择’Open in new tab’<br><img src="/pic/SongDownload/KG06.png" alt="KG06"></p>
<p>7.如果浏览器可以直接下载，则下载；如果不可以直接下载，复制歌曲网址，打开下载器，选择新建下载，在地址框中粘贴网址并下载<br><img src="/pic/SongDownload/KG07.png" alt="KG07"></p>
<h1 id="酷我音乐"><a href="#酷我音乐" class="headerlink" title="酷我音乐"></a>酷我音乐</h1><h2 id="视频-3"><a href="#视频-3" class="headerlink" title="视频"></a>视频</h2><div id="dplayer3" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer3"),"video":{"url":"https://peter_matthew.coding.net/api/share/download/ece1e2e9-2c43-4971-b416-b6190c87a1f8","pic":"/pic/SongDownload/KW01.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
<p><a href="https://Peter_Matthew.coding.net/s/ece1e2e9-2c43-4971-b416-b6190c87a1f8" target="_blank" rel="noopener">点这里下载视频</a></p>
<h2 id="图文分解-3"><a href="#图文分解-3" class="headerlink" title="图文分解"></a>图文分解</h2><p>1.打开歌曲页面<br><img src="/pic/SongDownload/KW01.png" alt="KW01"></p>
<p>2.在页面右键，选择“检查”（审查元素）<br><img src="/pic/SongDownload/KW02.png" alt="KW02"></p>
<p>3.在新出来的对话框中选择 Network 选项卡<br><img src="/pic/SongDownload/KW03.png" alt="KW03"></p>
<p>4.播放歌曲<br><img src="/pic/SongDownload/KW04.png" alt="KW04"></p>
<p>5.在左方的区域找到<code>.mp3</code>结尾的文件<br><img src="/pic/SongDownload/KW05.png" alt="KW05"></p>
<p>6.右键此文件选择’Open in new tab’<br><img src="/pic/SongDownload/KW06.png" alt="KW06"></p>
<p>7.如果浏览器可以直接下载，则下载；如果不可以直接下载，复制歌曲网址，打开下载器，选择新建下载，在地址框中粘贴网址并下载<br><img src="/pic/SongDownload/KW07.png" alt="KW07"></p>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>张开昕自传</title>
    <url>/blog/Autobiography-01/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h4><p>&emsp;&emsp;建国70年，师留此任，欲以文言之语述人物之传。左思右想，虑吾实无大好，且朋稀少，应无人会记吾，且吾不熟他人，不便写他人，故作此传。虽拙，无趣，但以吾本人所记，无知己可懂，只为终任。</p>
<h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>&emsp;&emsp;开昕，张氏，河南洛阳人也，未有字。因名如嬉也，少有人送外号，然以述雍正帝而为送外号“四爷”。生于农历壬午年甲辰月戊午日。因母醒见日，故易“心”为“昕”。幼时体弱多疾，不及周岁，会大疾，几亡，未几自愈，不知所以。相貌平平，亦不勤学，排名屡处他人之后，但亦盼成大器。噫！朽木不可雕也。<br>&emsp;&emsp;吾本顽童，生长于洛阳，苟且偷乐于童年，不求提名于金榜。家父不以吾顽劣，猥自枉驱，三顾吾于床榻之上，施吾以长拳短脚，由是恐惧，遂许家父以趋驰。后值败绩，受教乎拼音数字，擅长乎加减乘除，尔来十有一年矣。<br>&emsp;&emsp;吾有多好，然不善之。好朗诵，以文绩欠佳不使上台而去。好唱歌，生性胆小，常于空旷外引吭高歌，不敢扰民。然吾性恶为人逼，因多失欲好之物。尝欲读，后为强读名著而读书倦。亦尝欲诵书，然小学师强留我诵书，吾欲与之为难，故智逃诵书，终不善诵书。<br>&emsp;&emsp;呜呼！既志不得实现，只得于虚幻中尝试。吾热衷于电脑，亦颇有造化。尝得科考三级、四级证与省试甲等证，虽自招势恶，已无大用，然犹可明吾颇有造化。吾志不在高，无欲攀得人之峰顶，但欲竭尽吾之所能。无欲清北，但欲学有一技所长。吾幼好航空航天，尝观太空授课直播于校，特欲参航空航天，历知往事，欲就北京航空航天飞行控制中心。然吾又好刑侦，常读事件，又欲奋身才参警刑事部或支持部，且军战略支援部亦可，若才足，欲入国安、国报至矣。此二者为吾之所欲者，然若不可得，为程序员于公司或为游戏主播于家中，皆非吾所恶者。嘻！脸皮之厚度，人难以匹敌哉！<br>&emsp;&emsp;吾欲交友，但尝有车祸，丧一要友而吾伤。然此不曾为他人道也，盖幼时体弱多疾，以一行疾隐之。然身疾已愈而心疾长留，虽受医师理疗可与他人交谈，然益孤僻。虽竭尽无欲令他人见而使色朗，实则愿独处一室。然今虽欲独处一室，但非恶与他人交谈，可实乐，若有一知己益佳。<br>&emsp;&emsp;凡有熟吾者，皆道吾“怪”。建国59年，入小学，待人以随和，行事以斟酌，不斤斤于得失，不争争于屑小，似非他人。故师常与吾谈话，知己白颢阳故曰“怪”。建国65年，入初中，因信息技术为全级老师所识，常管校内监控、校训平台，但又以故坏监控、当众阅游戏视频为校长谈。老师称吾与同班好友岳文轩为“二怪才”，文轩怪于魔方之术，甚曾有国内五阶盲拧第二、四阶盲拧第三之奖。校长以吾异于他人，敢数次交流于校长，称吾“怪”。建国68年，入高中，因同学以学业为重，所熟者甚少，未尝有人称吾“怪”。<br>&emsp;&emsp;今人有云：“先天下早饭而早饭，后天下晚饭而晚饭。”其言兹若中学生乎？挑灯夜读，以得其分。初中之学生欤？高中之学生欤？然今人甚有云：“天将降大任于斯人也，必先卸其QQ，封其微博，删其微信，去其贴吧，收其电脑，夺其手机，摔其iPad，断其WiFi，剪其网线，使其百无聊赖，然后静坐、喝茶、思过、锻炼、读书、弹琴、练字、明智、开悟、精进，而后必成大器也。”如此可见，吾非能荷重任之人。<br>&emsp;&emsp;时建国70年农历七月初一。</p>
]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T74818 【[开昕生日愚人题#6]有规律数列】</title>
    <url>/blog/solution-t74818/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T74818" target="_blank" rel="noopener">LuoguT74818</a>:</p>
<p>去年我们的无规律数列是纽结数，今年的也和纽结有关。当环是被奇次翻折后粘贴的，则剪开后应是翻折次数纽结的第一个即X_1（X是翻着次数，下同）；当为偶次，则应是双圈纽结的第一个即X^2_1。但是由于不存在1_1（因为单独的交点可以折为没有交点），所以应该输出0_1。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T74817 【[开昕生日愚人题#5]质数的检验】</title>
    <url>/blog/solution-t74817/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T74817" target="_blank" rel="noopener">LuoguT74817</a>:</p>
<p>这题是打表题，你需要先打出一些特殊数的表，然后if/switch判断并输出即可（当然如果你是神仙的话也可以尝试现场筛素数）。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T74816 【[开昕生日愚人题#4]多项式展开】</title>
    <url>/blog/solution-t74816/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T74816" target="_blank" rel="noopener">LuoguT74816</a>:</p>
<p>去年的多项式展开，我们采用的方法是将(x+1)^2转化为计算(11)^2，得到的结果用于输出。</p>
<p>那么今年的方法类似，将(a+b+c)^2转化为计算(111)^2用于输出即可，其中第i位上的数表示次数和为i-1的项，具体例子如下：  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">           111</span><br><span class="line">           111</span><br><span class="line">         -----</span><br><span class="line">           111</span><br><span class="line">          111</span><br><span class="line">         111</span><br><span class="line">         -----</span><br><span class="line">         12321</span><br><span class="line">           |</span><br><span class="line">           V</span><br><span class="line">a^2+2ab+3ac+3b^2+2bc+c^2</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T74815 【[开昕生日愚人题#3]退役的日子】</title>
    <url>/blog/solution-t74815/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T74815" target="_blank" rel="noopener">LuoguT74815</a>:</p>
<p>这题是一道打表题，为的是纪念退役。</p>
<p>对于”20181110”、”20181111”、”20181110-11”和”NOIp”，请输出在NOIp2018时留在分校2楼机房的人。</p>
<p>对于”20190406”、”20190407”、”20190406-07”和”HAOI”，请输出在HAOI2019时留在分校4楼机房的人。</p>
<p>对于”ZZFLS”，请输出以上名单中总校的人；对于”XFY”，请输出以上名单中分校的人。（不用考虑张泰玮了。。。）</p>
<p>最后一条ZZFLS不输出分校人员的原因是ZZFLS OJ注册时分校用XFY做前缀，总校用ZZFLS前缀以区分。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T74814 【[开昕生日愚人题#2]谁优化了谁】</title>
    <url>/blog/solution-t74814/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T74814" target="_blank" rel="noopener">LuoguT74814</a>:</p>
<p>50pts：随机输出1/-1（期望50pts）或者只输出1/-1中的一个</p>
<p>100pts：这道题的难点在于读入最后一行字符串，然后处理出绝对值最大的一个数m，然后判断m-1是否小于等于n。另外，由于PM不会矩乘优化DP，也不会DP优化矩乘，所以他只会1次优化（使用DP而不用暴力计算）。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T74813 【[开昕生日愚人题#1]船新的版本】</title>
    <url>/blog/solution-t74813/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T74813" target="_blank" rel="noopener">LuoguT74813</a>:</p>
<p>去年这个时候，我出了Minecraft的题，内容是数字ID转英文名称，今年也是一样的。今年的这道在去年的基础上就比较好做了，如果关注新闻就知道这里指的船新版本是被京东云代理的Minecraft:Educational Edition，即《我的世界：教育版》。但是显然PM买不了（因为要学校资格证），所以正确解法是查看Minecraft Wiki（我的世界维基百科）。</p>
<p>100pts：按Wiki的表打表即可。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>线性基</title>
    <url>/blog/LinearBasis/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getlb</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">62</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&amp;(<span class="number">1l</span>l&lt;&lt;i))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!p[i])</span><br><span class="line">            &#123;</span><br><span class="line">                p[i]=x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                x^=p[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>线性基</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划——洛谷试炼场题目小结</title>
    <url>/blog/DynamicPlanning/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客使用教程</title>
    <url>/blog/Blog-Hexo/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li>为什么使用Hexo？</li>
<li>其实你想使用哪个使用哪个，只不过我个人觉得Hexo比较方便。</li>
<li>优点：灵活度高、主题丰富、插件丰富、资瓷Markdown和LaTeX。</li>
<li>缺点：要求有一定的计算机初阶知识水平，源码包含大量外文注释。</li>
</ul>
<h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>必不可少的有</p>
<ul>
<li><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js</a>（可以使用命令<code>node -v</code>查看版本）  </li>
<li><img src="/pic/Blog-Hexo01.png" alt="Node.js">  </li>
<li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a>（可以使用命令’git version’查看版本）</li>
<li><img src="/pic/Blog-Hexo02.png" alt="Git"><br>这些是生成博客的必要软件</li>
</ul>
<p>可选的有</p>
<ul>
<li><a href="https://notepad-plus-plus.org/download/" target="_blank" rel="noopener">Notepad++</a>  </li>
<li><img src="/pic/Blog-Hexo04.png" alt="Notepad++"><br>这个是为了编写方便使用的软件，不推荐使用Windows自带的记事本和写字板编写文件。如果你手上有其他多功能文本编辑器，当然也可以使用。</li>
</ul>
<blockquote>
<p>注意：如果你选择使用Notepad++，应该在安装Git时将编辑器选择<code>Use Notepad++ as Git&#39;s default editor</code>。<br><img src="/pic/Blog-Hexo03.png" alt="DefaultEditor">  </p>
</blockquote>
<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>新建一个博客目录文件夹，然后右键文件夹中的空白处，选择<code>Git Bash Here</code>。<br><img src="/pic/Blog-Hexo05.png" alt=""></p>
<p>等到出现以 <code>$</code> 开头的提示表示可以键入命令后，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i -g hexo</span><br></pre></td></tr></table></figure>

<p>即可安装Hexo。</p>
<blockquote>
<p>请注意：所有输入命令前的<code>$</code>，只是为了表示是在Git Bash下执行的命令，实际输入时并不需要输入。</p>
</blockquote>
<p>安装完后，输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure>

<p>等待初始化文件夹。初始化成功后，你会看到很多文件和文件夹</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">└Hexo				&lt;-博客目录</span><br><span class="line"> ├<span class="selector-class">.deploy_git</span>			&lt;-上传博客的文件</span><br><span class="line"> │└... </span><br><span class="line"> ├node_modules			&lt;-插件目录（依赖包）</span><br><span class="line"> │└...</span><br><span class="line"> ├public			&lt;-博客生成后的文件</span><br><span class="line"> ├scaffolds			&lt;-博客模板文件</span><br><span class="line"> │├draft.md</span><br><span class="line"> │├page.md</span><br><span class="line"> │└post.md</span><br><span class="line"> ├source			&lt;-生成博客时的根目录</span><br><span class="line"> │└_posts			&lt;-博客目录</span><br><span class="line"> │ └hello-world<span class="selector-class">.md</span>		&lt;-初始示例博客文件</span><br><span class="line"> ├themes			&lt;-主题文件夹</span><br><span class="line"> │└landscape			&lt;-默认主题</span><br><span class="line"> │ └...</span><br><span class="line"> ├<span class="selector-class">.gitignore</span>			&lt;-gitignore文件，用于git上传时使用</span><br><span class="line"> ├_config<span class="selector-class">.yml</span>			&lt;-博客主配置文件</span><br><span class="line"> ├db<span class="selector-class">.json</span>			&lt;-source解析文件</span><br><span class="line"> ├package<span class="selector-class">.json</span>			&lt;-项目所需模块项目的配置信息</span><br><span class="line"> └package-lock<span class="selector-class">.json</span>		&lt;-项目所需模块项目的配置信息</span><br></pre></td></tr></table></figure>

<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果提示不存在此指令，请输入以下指令安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm i hexo-server</span><br></pre></td></tr></table></figure>
</blockquote>
<p>然后打开浏览器，输入<code>http://localhost:4000</code>，即可预览博客的样子。</p>
<p>如果要关闭，按 Ctrl+C 即可关闭。</p>
<blockquote>
<p>如果你打开此地址看不到你的博客，存在一种情况是你安装的软件（例如福昕PDF阅读器）占用了你的4000端口，此时应该切换端口，例如5000。此时应该输入下方指令切换。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure>
</blockquote>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h2 id="传到平台"><a href="#传到平台" class="headerlink" title="传到平台"></a>传到平台</h2><p>下面推荐几个平台</p>
<ul>
<li><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>（强力推荐）<ul>
<li>优点：平台成立较早，设施完善，有微软收购的支持，全球的开发者均在此</li>
<li>缺点：主语言为英文，且国内访问较慢。</li>
</ul>
</li>
<li><del><a href="https://coding.net/" target="_blank" rel="noopener">Coding</a></del>（已被腾讯收购，建议直接注册腾讯云开发者平台）<ul>
<li><del>优点：国内国外访问均快，设施较为完善。</del></li>
<li><del>缺点：功能限制过大，服务器容易宕机</del></li>
</ul>
</li>
<li><a href="https://dev.tencent.com/" target="_blank" rel="noopener">TencentDev</a><ul>
<li>优点：腾讯服务器强大，国内国外访问均快</li>
<li>缺点：腾讯功能限制过大</li>
</ul>
</li>
<li><a href="https://gitee.com/" target="_blank" rel="noopener">Gitee</a><ul>
<li>优点：与GitHub类似，但国内访问速度快，而且支持GitHub项目直接导入</li>
<li>缺点：设施不太完善。</li>
</ul>
</li>
</ul>
<h3 id="提前说明"><a href="#提前说明" class="headerlink" title="提前说明"></a>提前说明</h3><p>在下文中：</p>
<ul>
<li>yourname指你注册网站的用户名</li>
<li>youremail指你注册网站的邮箱</li>
</ul>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>注册账号，然后创建一个repo，名字为<code>yourname.github.io</code><br>在<code>_config.yml</code>里，编辑末尾的配置</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:yourname/yourname.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>

<p>在文件夹下键入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure>

<p>然后连敲几下回车，然后打开<code>C:\Users\你电脑的用户名</code>，找到<code>.ssh</code>文件夹，用编辑器打开<code>id_rsa.pub</code>文件，然后复制里面的所有文本。</p>
<p>在GitHub的Settings里，找到SSH keys，右上角新建一个SSH key，然后在Key那个大框中粘贴你复制的东西，随便起一个名字然后点下方的添加。</p>
<h3 id="Coding-TencentDev"><a href="#Coding-TencentDev" class="headerlink" title="Coding(TencentDev)"></a>Coding(TencentDev)</h3><p>注册账号，然后创建一个repo，名字为<code>yourname</code><br>在<code>_config.yml</code>里，编辑末尾的配置</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@git</span>.coding.<span class="attribute">net</span>:yourname/yourname.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>

<p>在文件夹下键入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure>

<p>然后连敲几下回车，然后打开<code>C:\Users\你电脑的用户名</code>，找到<code>.ssh</code>文件夹，用编辑器打开<code>id_rsa.pub</code>文件，然后复制里面的所有文本。</p>
<p>在网站的个人设置里，找到SSH keys，新建一个SSH key，然后在Key那个大框中粘贴你复制的东西，随便起一个名字然后点下方的添加。</p>
<h3 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h3><p>注册账号，然后创建一个repo，名字为<code>yourname</code><br>在<code>_config.yml</code>里，编辑末尾的配置</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@gitee</span>.<span class="attribute">com</span>:yourname/yourname.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>

<p>在文件夹下键入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure>

<p>然后连敲几下回车，然后打开<code>C:\Users\你电脑的用户名</code>，找到<code>.ssh</code>文件夹，用编辑器打开<code>id_rsa.pub</code>文件，然后复制里面的所有文本。</p>
<p>在Gitee的设置里，找到SSH keys，新建一个SSH key，然后在Key那个大框中粘贴你复制的东西，随便起一个名字然后点下方的添加。</p>
<h3 id="多Git账户"><a href="#多Git账户" class="headerlink" title="多Git账户"></a>多Git账户</h3><p>生成多个key，即在执行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure>

<p>后的第一步将名字改为<code>id_rsa-github.pub</code>,<code>id_rsa-coding.pub</code>,<code>id_rsa-gitee.pub</code>，然后在<code>.ssh</code>文件夹下新建一个<code>config</code>文件。在文件内粘贴并修改以下内容</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置github.com</span></span><br><span class="line">Host github.com                 </span><br><span class="line">    HostName github.com         </span><br><span class="line">    IdentityFile ~\\.ssh\\id_rsa-github</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">   <span class="built_in"> User </span>yourname-github</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置git.coding.net</span></span><br><span class="line">Host git.coding.net             </span><br><span class="line">    HostName git.coding.net     </span><br><span class="line">    IdentityFile ~\\.ssh\\id_rsa-coding</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">   <span class="built_in"> User </span>yourname-coding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置gitee.com                 </span></span><br><span class="line">Host gitee.com                  </span><br><span class="line">    HostName gitee.com</span><br><span class="line">    IdentityFile ~\\.ssh\\id_rsa-gitee</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">   <span class="built_in"> User </span>yourname-gitee</span><br></pre></td></tr></table></figure>

<p>即可</p>
<h2 id="三步部署"><a href="#三步部署" class="headerlink" title="三步部署"></a>三步部署</h2><p>按照上述配置好后，每次修改博客就只用执行下面三行指令就行了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<blockquote>
<p>第一次执行之前需要执行下方两行指令设置个人信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">$ git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>第一次执行时会询问你是否使用ssh（此时在弹出的框中输入yes即可）之类的操作<br>从第二次起就真的只用这三行了。</p>
</blockquote>
<h2 id="访问你的博客"><a href="#访问你的博客" class="headerlink" title="访问你的博客"></a>访问你的博客</h2><h3 id="GitHub-1"><a href="#GitHub-1" class="headerlink" title="GitHub"></a>GitHub</h3><p>在repo的Settings里向下翻到GitHub Pages，将 <code>None</code> 改为 <code>master branch</code> 。<br>然后就可以访问<a href="https://yourname.github.io/" target="_blank" rel="noopener">https://yourname.github.io/</a></p>
<h3 id="Coding-TencentDev-1"><a href="#Coding-TencentDev-1" class="headerlink" title="Coding(TencentDev)"></a>Coding(TencentDev)</h3><p>在repo的代码下拉菜单点Pages服务，勾选<code>我已阅读《Coding Pages 服务声明》</code>，然后点击<code>一键开启 Coding Pages</code>。<br>然后就可以访问<a href="https://yourname.coding.me/" target="_blank" rel="noopener">https://yourname.coding.me/</a>  </p>
<h3 id="Gitee-1"><a href="#Gitee-1" class="headerlink" title="Gitee"></a>Gitee</h3><p>在repo的服务下拉菜单点Gitee Pages，部署分支选择<code>master</code>，然后点击<code>启动</code>。<br>然后就可以访问<a href="https://yourname.gitee.io/" target="_blank" rel="noopener">https://yourname.gitee.io/</a>  </p>
<h1 id="设置博客"><a href="#设置博客" class="headerlink" title="设置博客"></a>设置博客</h1><h2 id="博客基本配置"><a href="#博客基本配置" class="headerlink" title="博客基本配置"></a>博客基本配置</h2><p>你可以参照<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a>配置，也可以参照以下信息配置</p>
<figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="section">title: 标题</span></span><br><span class="line"><span class="section">subtitle: 副标题</span></span><br><span class="line"><span class="section">description: 描述</span></span><br><span class="line"><span class="section">keywords: 关键词</span></span><br><span class="line"><span class="section">author: 作者</span></span><br><span class="line"><span class="section">language: zh-CN</span></span><br><span class="line"><span class="section">timezone: Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="section">url: 访问你博客的地址</span></span><br><span class="line"><span class="section">root: /</span></span><br><span class="line"><span class="section">permalink: :year/:month/:day/:title/</span></span><br><span class="line"><span class="section">permalink_defaults:</span></span><br></pre></td></tr></table></figure>

<h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>你需要使用Markdown格式编辑博客  </p>
<p>你可以使用指令创建一篇写好基本信息的博客然后修改</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new 博客标题</span><br></pre></td></tr></table></figure>

<p>也可以在_post文件夹下新建一个<code>.md</code>文件，并在开头写上</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">文章标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">20</span><span class="string">XX-XX-XX</span> <span class="attr">XX:XX:XX</span></span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="bullet">  -</span> <span class="string">分类</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>然后在下面写正文部分。</p>
<blockquote>
<p>当以上文字存在部分符号不合法时会出现错误，建议加上<code>&quot;&quot;</code>号分割前后，例如：<code>title: &quot;标题[1]&quot;</code><br>如果出现渲染错误，比如上面的内容出现在了文章开头而不是被隐藏，请检查文章的格式是否为Windows(CR LF)；<br>如果出现中文乱码，比如出现了 <code>˖Ԗ}ёڷޯ</code> 或 <code>鎵嬫寔涓ゆ妸妫嶆枻閾?</code> 这种乱码，请检查文章的编码是否为UTF-8；<br><img src="/pic/Blog-Hexo06.png" alt=""></p>
</blockquote>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>有很多非常好的主题，由于主题数量庞大且编写风格不一，所以无法在这里为每位读者所喜爱的主题写建站教程。<br>这里只介绍Vexo即我使用的主题的相关配置。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>大部分主题可以在GitHub上找到，找到后通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/作者/hexo-theme-主题.git themes/主题</span><br></pre></td></tr></table></figure>

<p>这条指令下载到主题文件夹中，然后在博客目录下的<code>_config.yml</code>中写上</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">theme:</span> 主题</span><br></pre></td></tr></table></figure>

<h3 id="Vexo"><a href="#Vexo" class="headerlink" title="Vexo"></a>Vexo</h3><p>作者：<a href="https://github.com/yanm1ng" target="_blank" rel="noopener">yanm1ng</a><br>主题地址：<a href="https://github.com/yanm1ng/hexo-theme-vexo" target="_blank" rel="noopener">hexo-theme-vexo</a></p>
<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>可以通过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/yanm1ng/hexo-theme-vexo.git themes/vexo</span><br><span class="line">$ cp -R themes/vexo/_source/* <span class="built_in">source</span>/</span><br></pre></td></tr></table></figure>

<p>同时修改主目录下的<code>_config.yml</code></p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">theme:</span> vexo</span><br></pre></td></tr></table></figure>

<p>完成初步的安装</p>
<h4 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h4><p>事实上，在每篇文章开头的<em>front-matter</em>都这么写。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标题</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">20</span><span class="string">XX-XX-XX</span> <span class="attr">XX:XX:XX</span></span><br><span class="line"><span class="attr">banner:</span> <span class="string">图片.扩展名</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">标签1</span></span><br><span class="line"><span class="bullet"> -</span> <span class="string">标签2</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在主题的<code>_config.yml</code>里，有这些东西，可以看我的注释配置你的</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">author:</span> 作者</span><br><span class="line"><span class="symbol">description:</span> 描述</span><br><span class="line"><span class="symbol">keyword:</span> 关键词</span><br><span class="line"><span class="symbol">favicon:</span>      <span class="meta">#图标，默认没有</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">excerpt_link:</span> Read more  <span class="meta">#查看更多的提示文字</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">menu:</span></span><br><span class="line"> 主页: /</span><br><span class="line"> 标签: <span class="meta-keyword">/tags/</span></span><br><span class="line"> 归档: <span class="meta-keyword">/archives/</span></span><br><span class="line"> 项目: <span class="meta-keyword">/project/</span></span><br><span class="line"> 关于: <span class="meta-keyword">/about/</span></span><br></pre></td></tr></table></figure>

<p>然后翻到最下面</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">about:</span> </span><br><span class="line"><span class="symbol">  banner:</span> 图片.扩展名</span><br><span class="line"><span class="symbol">  avatar:</span> 头像地址</span><br><span class="line"><span class="symbol">  description:</span> 描述</span><br><span class="line"><span class="symbol">  weibo_username:</span> 微博用户名</span><br><span class="line"><span class="symbol">  twitter_username:</span> Twitter用户名</span><br><span class="line"><span class="symbol">  github_username:</span> GitHub用户名</span><br><span class="line"><span class="symbol">  zhihu_username:</span> 知乎用户名</span><br><span class="line"><span class="symbol">  douban_username:</span> 豆瓣用户名</span><br><span class="line"><span class="symbol">  linkedin_username:</span> 领英用户名</span><br><span class="line"><span class="meta"># 没有的话不填就行了</span></span><br></pre></td></tr></table></figure>

<h4 id="自定义图片"><a href="#自定义图片" class="headerlink" title="自定义图片"></a>自定义图片</h4><p>打开主题下的<code>/source/css/images</code>文件夹，<strong>替换</strong> <code>logo.png</code> 、 <code>alipay.jpg</code> 和 ‘wechat.jpg’ 。</p>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h2><p>有很多很优秀的评论插件，例如Gitment、Gitalk、Valine、Disqus、Uyan等。<br>由于本人使用的是Gitment，所以只会介绍Gitment。。。  </p>
<blockquote>
<p>建议直接使用主题所附带的评论系统，这样一般是兼容页面的既好用又好看。</p>
</blockquote>
<h3 id="Vexo下的Gitment"><a href="#Vexo下的Gitment" class="headerlink" title="Vexo下的Gitment"></a>Vexo下的Gitment</h3><blockquote>
<p>Gitment利用GitHub上repo中的Issues功能完成评论存储的功能。<br>注意，Gitment只支持GitHub上的repo，如果你要利用Coding或者Gitee的功能，可以尝试DIY。</p>
</blockquote>
<p>请<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">点这里</a>打开GitHub的OAuth应用创建页面，输入博客名字、主页地址、描述和调用地址。<strong>请注意：主页地址和调用地址都要填你的博客的地址。</strong><br><img src="/pic/Blog-Hexo07.png" alt=""></p>
<p>创建完后，复制Client ID和Client Secret的信息。</p>
<p>请点开Vexo主题下的`_config.yml’，将下面对应的行修改成这样</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">comment:</span> gitment</span><br></pre></td></tr></table></figure>

<p>然后在下方对应的部分</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># gitment config</span></span><br><span class="line"><span class="symbol">gitment_owner:</span> yourname</span><br><span class="line"><span class="symbol">gitment_repo:</span> 博客地址</span><br><span class="line"><span class="symbol">gitment_oauth_id:</span> 复制的Client ID</span><br><span class="line"><span class="symbol">gitment_oauth_secret:</span> 复制的Client Secret</span><br></pre></td></tr></table></figure>

<p>即可完成配置</p>
<blockquote>
<p>请注意，每篇博客都需要博主手动初始化，否则会显示Error。<br><img src="/pic/Blog-Hexo08.png" alt=""><br><img src="/pic/Blog-Hexo09.png" alt="">  </p>
</blockquote>
<h2 id="置顶操作"><a href="#置顶操作" class="headerlink" title="置顶操作"></a>置顶操作</h2><p>打开博客目录下的<code>.\node_modules\hexo-generator-index\lib</code>文件夹，将<code>generator.js</code>文件内容替换为下面的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 两篇文章top都有定义</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date; <span class="comment">// 若top值一样则按照文章日期降序排</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// 都没定义按照文章日期降序排</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在博客开头的部分定义top值</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">top:</span> <span class="string">数值</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：top没填时默认为0，置顶顺序为top值降序排列，top相等时按日期排序。</p>
</blockquote>
<h1 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h1><p>自动部署需要一个网站——Travis CI，这个网站分为 <a href="https://travis-ci.org/" target="_blank" rel="noopener">PublicRepo版</a> 和 <a href="https://travis-ci.com/" target="_blank" rel="noopener">PrivateRepo版</a>，但是只支持GitHub上的项目。  </p>
<blockquote>
<p>对于自动部署博客，我的做法需要在上传到GitHub的文件里写上你Github的密码，因此强烈建议各位新建一个Private项目。</p>
</blockquote>
<p>我们新一个项目（当然也可以在原repo上新建一个分支），然后<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">点这里</a>生成一个AccessToken（建议把除了delete_repo以外的权限全部开启），然后把出来的一串值复制。</p>
<p>打开Travis CI，点开你新建的项目，在Environment Variables里，在Value处粘贴那串值，名字随意，然后点击Add。<br><img src="/pic/Blog-Hexo10.png" alt=""></p>
<p>返回Hexo的文件目录，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git remote add origin https://github.com/yourname/repo的名字.git</span><br></pre></td></tr></table></figure>

<p>使用命令行新建一个<code>.travis.yml</code>文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd.&gt;.travis.yml</span><br></pre></td></tr></table></figure>

<p><img src="/pic/Blog-Hexo11.png" alt=""></p>
<p>粘贴如下内容并修改后保存</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">language</span>: node_js</span><br><span class="line"><span class="attribute">node_js</span>: stable</span><br><span class="line"></span><br><span class="line"># S: Build Lifecycle</span><br><span class="line"><span class="attribute">install:</span></span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">#before_script:</span><br><span class="line"> # - npm install -g gulp</span><br><span class="line"></span><br><span class="line"><span class="attribute">script:</span></span><br><span class="line">  - hexo g</span><br><span class="line"></span><br><span class="line"><span class="attribute">after_script:</span></span><br><span class="line">  - cd ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name "yourname"</span><br><span class="line">  - git config user.email "youremail"</span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m "Site Updated"</span><br><span class="line">  - git push --force --quiet "https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;" master:master</span><br><span class="line"># E: Build LifeCycle</span><br><span class="line"></span><br><span class="line"><span class="attribute">branches:</span></span><br><span class="line">  only:</span><br><span class="line">    - master</span><br><span class="line"><span class="attribute">env:</span></span><br><span class="line"> global:</span><br><span class="line">   - GH_REF: github.com/yourname/repo的名字.git</span><br><span class="line">   - GH_TOKEN: yourname:GitHub密码</span><br></pre></td></tr></table></figure>

<p>这样处理好后执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"Site Updated"</span></span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<p>当显示完成时，打开Travis，如果显示build passing，则说明正常（如果网站还未更新、显示build failing等，可以检查下配置）。</p>
<blockquote>
<p>状态：<br><img src="/pic/passing.svg" alt="passing"><br><img src="/pic/failing.svg" alt="failing"><br><img src="/pic/error.svg" alt="error"><br><img src="/pic/unknown.svg" alt="unknown"></p>
</blockquote>
<p>这样就配置好了。</p>
<h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><p>在安装时如果没有选中notepad++，也可以在后来执行以下命令改为notepad++</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global core.editor notepad++</span><br></pre></td></tr></table></figure>

<p>hexo的很多命令都可以简写<br>比如</p>
<ul>
<li><code>hexo server</code>        -&gt;    <code>hexo s</code></li>
<li><code>hexo generate</code>    -&gt;    <code>hexo g</code></li>
<li><code>hexo deploy</code>        -&gt;    <code>hexo d</code></li>
</ul>
<p>但是由于c开头的指令不止一个，所以clean无法简写为c。</p>
<p>使用Gitment时如果想使用Coding、Gitee等地方的Pages，可以考虑只使用GitHub的repo当一个评论仓库，就可以利用其它平台的Pages了。</p>
<p>自动部署系统Travis CI虽然只支持GitHub，但是我们可以只利用GitHub作源码仓库，把Pages的仓库利用其它平台存储，做法是修改<code>.travis.yml</code>中的最后的git指令。</p>
<p>执行时如果出现错误：fatal: remote origin already exists，则执行以下语句：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote rm origin</span><br></pre></td></tr></table></figure>

<p>再执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git remote add origin https://github.com/yourname/repo的名字.git</span><br></pre></td></tr></table></figure>

<p>如果出现错误failed to push som refs to…….，则执行以下语句，先把远程服务器github上面的文件拉先来，再push 上去：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure>

<p>npm切换为淘宝源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">$ npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python入门】05 咕咕咕</title>
    <url>/blog/Course/Python/Python-05/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>咕咕咕！！！</p>
<p>由于最近要换笔记本，正在清理旧电脑的所有软件，Python当然被我清掉了（毕竟现在我用的还少，需要用会上在线IDE），为了保证读者的体验，所以只能暂时咕下去了，大约三月中旬就好了。。。</p>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python入门</tag>
      </tags>
  </entry>
  <entry>
    <title>最小表示法/最大表示法</title>
    <url>/blog/string-MRepresentation/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我们可以求出最小/最大开始的位置然后输出。</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">char</span> *s)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">2</span>,k=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=len&amp;&amp;j&lt;=len&amp;&amp;k&lt;len)</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> t=s[(i+k<span class="number">-1</span>)%len+<span class="number">1</span>]-s[(j+k<span class="number">-1</span>)%len+<span class="number">1</span>];  </span><br><span class="line">        <span class="keyword">if</span>(!t)k++;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(t&gt;<span class="number">0</span>)i=i+k+<span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">else</span> j=j+k+<span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">if</span>(i==j)j++;  </span><br><span class="line">            k=<span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> min(i,j);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">char</span> *s)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">2</span>,k=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=len&amp;&amp;j&lt;=len&amp;&amp;k&lt;len)</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> t=s[(i+k<span class="number">-1</span>)%len+<span class="number">1</span>]-s[(j+k<span class="number">-1</span>)%len+<span class="number">1</span>];  </span><br><span class="line">        <span class="keyword">if</span>(!t)k++;  </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(t&gt;<span class="number">0</span>)j=j+k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> i=i+k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==j)j++;</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> min(i,j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是一份0下标开始的版本</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">char</span> *s)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>,k=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;len&amp;&amp;j&lt;len&amp;&amp;k&lt;len)</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> t=s[(i+k)%len]-s[(j+k)%len];  </span><br><span class="line">        <span class="keyword">if</span>(!t)k++;  </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(t&gt;<span class="number">0</span>)i=i+k+<span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">else</span> j=j+k+<span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">if</span>(i==j)j++;  </span><br><span class="line">            k=<span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> min(i,j);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">char</span> *s)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>,k=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">while</span>(i&lt;len&amp;&amp;j&lt;len&amp;&amp;k&lt;len)</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> t=s[(i+k)%len]-s[(j+k)%len];  </span><br><span class="line">        <span class="keyword">if</span>(!t)k++;  </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span>(t&gt;<span class="number">0</span>)j=j+k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> i=i+k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i==j)j++;</span><br><span class="line">            k=<span class="number">0</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> min(i,j);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>回文自动机</title>
    <url>/blog/string-PalindromicTree/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>类似AC自动机的一种回文串匹配自动机，也就是一棵字符树。准确的说，是两颗字符树，0号表示回文串长度为偶数的树，1号表示回文串长度为奇数的树。</p>
<p>洛谷上的模板题（<a href="https://www.luogu.org/problemnew/show/P3649" target="_blank" rel="noopener">P3649 【APIO2014】回文串</a>）：<br>求的其实就是$max(cnt[i] \times len[i])$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">300005</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">300005</span>],ch[<span class="number">300005</span>][<span class="number">26</span>],len[<span class="number">300005</span>],num[<span class="number">300005</span>],cnt[<span class="number">300005</span>],tot,last;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newpoint</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++tot;</span><br><span class="line">    <span class="built_in">memset</span>(ch[tot],<span class="number">0</span>,<span class="keyword">sizeof</span>(ch[tot]));</span><br><span class="line">    len[tot]=l;</span><br><span class="line">    cnt[tot]=<span class="number">0</span>;</span><br><span class="line">    num[tot]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">-1</span>;</span><br><span class="line">    last=<span class="number">0</span>;</span><br><span class="line">    newpoint(<span class="number">0</span>);</span><br><span class="line">    newpoint(<span class="number">-1</span>);</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    fail[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(s[l-len[x]<span class="number">-1</span>]!=s[l])</span><br><span class="line">        x=fail[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        cnt[fail[i]]+=cnt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cur=getfail(last,i);</span><br><span class="line">        <span class="keyword">if</span>(!ch[cur][s[i]-<span class="string">'a'</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> now=newpoint(len[cur]+<span class="number">2</span>);</span><br><span class="line">            fail[now]=ch[getfail(fail[cur],i)][s[i]-<span class="string">'a'</span>];</span><br><span class="line">            ch[cur][s[i]-<span class="string">'a'</span>]=now;</span><br><span class="line">            num[now]=num[fail[now]]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        last=ch[cur][s[i]-<span class="string">'a'</span>];</span><br><span class="line">        cnt[last]++;</span><br><span class="line">    &#125;</span><br><span class="line">    count();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    build(s);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">        ans=max(ans,(<span class="keyword">long</span> <span class="keyword">long</span>)cnt[i]*len[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>求本质不同的回文子串个数（HihoCoder-1602、<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3948" target="_blank" rel="noopener">HDU3948</a>）：<br>回文自动机上的每个点都是一个本质不同的回文子串，所以就是求回文自动机总点的个数，同时注意刚开始有两个点0和1不是串上的点，所以统计答案时去掉这两个点的影响。HDU的题要注意从头再来时的清空。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// #include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">300005</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">300005</span>],ch[<span class="number">300005</span>][<span class="number">26</span>],len[<span class="number">300005</span>],num[<span class="number">300005</span>],cnt[<span class="number">300005</span>],tot,last;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newpoint</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++tot;</span><br><span class="line">    <span class="built_in">memset</span>(ch[tot],<span class="number">0</span>,<span class="keyword">sizeof</span>(ch[tot]));</span><br><span class="line">    len[tot]=l;</span><br><span class="line">    cnt[tot]=<span class="number">0</span>;</span><br><span class="line">    num[tot]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">-1</span>;</span><br><span class="line">    last=<span class="number">0</span>;</span><br><span class="line">    newpoint(<span class="number">0</span>);</span><br><span class="line">    newpoint(<span class="number">-1</span>);</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    fail[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(s[l-len[x]<span class="number">-1</span>]!=s[l])</span><br><span class="line">        x=fail[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        cnt[fail[i]]+=cnt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cur=getfail(last,i);</span><br><span class="line">        <span class="keyword">if</span>(!ch[cur][s[i]-<span class="string">'a'</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> now=newpoint(len[cur]+<span class="number">2</span>);</span><br><span class="line">            fail[now]=ch[getfail(fail[cur],i)][s[i]-<span class="string">'a'</span>];</span><br><span class="line">            ch[cur][s[i]-<span class="string">'a'</span>]=now;</span><br><span class="line">            num[now]=num[fail[now]]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        last=ch[cur][s[i]-<span class="string">'a'</span>];</span><br><span class="line">        cnt[last]++;</span><br><span class="line">    &#125;</span><br><span class="line">    count();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        build(s);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,i,tot<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>统计所有回文串的个数（HihoCoder-1589）：<br>即cnt之和</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">800005</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">800005</span>],ch[<span class="number">800005</span>][<span class="number">26</span>],len[<span class="number">800005</span>],num[<span class="number">800005</span>],cnt[<span class="number">800005</span>],tot,last;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newpoint</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++tot;</span><br><span class="line">    <span class="built_in">memset</span>(ch[tot],<span class="number">0</span>,<span class="keyword">sizeof</span>(ch[tot]));</span><br><span class="line">    len[tot]=l;</span><br><span class="line">    cnt[tot]=<span class="number">0</span>;</span><br><span class="line">    num[tot]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tot=<span class="number">-1</span>;</span><br><span class="line">    last=<span class="number">0</span>;</span><br><span class="line">    newpoint(<span class="number">0</span>);</span><br><span class="line">    newpoint(<span class="number">-1</span>);</span><br><span class="line">    s[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    fail[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(s[l-len[x]<span class="number">-1</span>]!=s[l])</span><br><span class="line">        x=fail[x];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        cnt[fail[i]]+=cnt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> cur=getfail(last,i);</span><br><span class="line">        <span class="keyword">if</span>(!ch[cur][s[i]-<span class="string">'a'</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> now=newpoint(len[cur]+<span class="number">2</span>);</span><br><span class="line">            fail[now]=ch[getfail(fail[cur],i)][s[i]-<span class="string">'a'</span>];</span><br><span class="line">            ch[cur][s[i]-<span class="string">'a'</span>]=now;</span><br><span class="line">            num[now]=num[fail[now]]+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        last=ch[cur][s[i]-<span class="string">'a'</span>];</span><br><span class="line">        cnt[last]++;</span><br><span class="line">    &#125;</span><br><span class="line">    count();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    build(s);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)</span><br><span class="line">        ans+=cnt[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python入门】04 Python基础3——字符串和编码</title>
    <url>/blog/Course/Python/Python-04/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在上一期的末尾我们说到一段代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">n = <span class="number">123</span></span><br><span class="line">f = <span class="number">456.789</span></span><br><span class="line">s1 = <span class="string">'Hello, world'</span></span><br><span class="line">s2 = <span class="string">'Hello, \'Adam\''</span></span><br><span class="line">s3 = <span class="string">r'Hello, "Bart"'</span></span><br><span class="line">s4 = <span class="string">r'''Hello,</span></span><br><span class="line"><span class="string">Lisa!'''</span></span><br></pre></td></tr></table></figure>

<p>我们看到有一行注释<code># -*- coding: utf-8 -*-</code></p>
<p>这个表示编码采用UTF-8编码，那么什么是字符编码呢？</p>
<h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><p>我们已经知道字符串也是一种数据类型，但是，字符串还存在一个特殊的编码问题。</p>
<p>计算机在设计时以8比特（bit）作为一个字节（byte），所以一个字节最大表示整数为255（$11111111_{(2)}=255_{(10)}$），如果要表示更大的整数，需要用更多的字节，比如两个字节最大为65535,4个字节最大为4294967295。<br>由于计算机是美国人发明的，最早只有127个字符被编码写入计算机，也就是大小写英文字母、数字和一些符号，它们被称为<code>ASCII</code>编码，比如大写字母A是65，小写字母z是122。<br>但是明显中文一个字节肯定不够用，起码也要两个字节，而且不能与ASCII编码冲突，于是中国便制定了<code>GB2312</code>编码，用来把中文编进去。<br>你可以想到的是，全世界有上百种语言，日本把日文编到<code>Shift-JIS</code>编码里，韩国把韩文编到<code>EUC-KR</code>编码里，甚至中文的繁体字都采用另一种编码<code>Big5</code>。各国有各国的标准，就会不可避免的产生冲突，结果就是，在多语言的文本中，会出现乱码。</p>
<p><img src="/pic/Python04-01.png" alt="字符编码的问题真是令人头疼！"></p>
<p>因此，<code>Unicode</code>应运而生，Unicode把所有语言统一到一套编码，这样就不会再出现乱码问题了。<br>Unicode标准不断地在发展，最常用地是用两个字节表示一个字符（偏僻字符需要4个字节）。现代的操作系统和大多数编程语言都直接支持Unicode。<br>现在，捋一捋ASCII和Unicode的编码区别：ASCII编码是一个字节，Unicode通常是两个字节。</p>
<p>例如：  </p>
<ul>
<li>字母<code>A</code>用ASCII编码是十进制<code>65</code>，二进制<code>01000001</code>；  </li>
<li>字符<code>0</code>用ASCII编码是十进制<code>48</code>，二进制<code>00110000</code>，注意这里的<code>0</code>是字符<code>&#39;0&#39;</code>而不是整数<code>0</code>；  </li>
<li>汉字<code>中</code>超出ASCII编码范围，用Unicode编码是十进制的<code>20013</code>，二进制<code>01001110 00101101</code>。  </li>
</ul>
<p>你可以猜测的是，如果把ASCII编码的<code>A</code>用Unicode编码，在前方补0，因此<code>A</code>的Unicode编码是<code>00000000 01000001</code>。</p>
<p>但是新的问题又出现了：如果统一成Unicode编码，乱码问题没了，但是如果你写的文本基本上全是英文的话，用Unicode编码比ASCII编码多一倍空间，所以储存和传输上十分不划算。<br>所以本着节约的精神，又出现了把Unicode转化为“可变长编码”的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是三个字节，只有生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p>
<table>
<thead>
<tr>
<th align="right">字符</th>
<th align="right">ASCII</th>
<th align="right">Unicode</th>
<th align="right">UTF-8</th>
</tr>
</thead>
<tbody><tr>
<td align="right">A</td>
<td align="right">01000001</td>
<td align="right">00000000 01000001</td>
<td align="right">01000001</td>
</tr>
<tr>
<td align="right">中</td>
<td align="right">X</td>
<td align="right">01001110 00101101</td>
<td align="right">11100100 10111000 10101101</td>
</tr>
</tbody></table>
<p>从上面的表格还可以发现，UTF-8有个额外的好处，就是ASCII编码实际上是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。<br>搞清楚了ASCII、Unicode和UTF-8的关系，我们现在总结下计算机系统通用的字符编码工作方式：<br>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者传输的时候，就转换为UTF-8编码。<br>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p>
<p><img src="/pic/Python04-02.png" alt=""></p>
<p>浏览网页时，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</p>
<p><img src="/pic/Python04-03.png" alt=""></p>
<p>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p>
<h1 id="Python的字符串"><a href="#Python的字符串" class="headerlink" title="Python的字符串"></a>Python的字符串</h1><p>搞清楚了字符编码问题后，我们再来研究Python的字符串。</p>
<p>在最新版Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'包含中文的str'</span>)</span><br><span class="line">包含中文的str</span><br></pre></td></tr></table></figure>

<p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换成对应的字符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'A'</span>)</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'中'</span>)</span><br><span class="line"><span class="number">20013</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">66</span>)</span><br><span class="line"><span class="string">'B'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">25991</span>)</span><br><span class="line"><span class="string">'文'</span></span><br></pre></td></tr></table></figure>

<p>如果知道字符的整数编码，还可以用十六进制这么写str：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'\u4e2d\u6587'</span></span><br><span class="line"><span class="string">'中文'</span></span><br></pre></td></tr></table></figure>

<p>两种写法完全等价。</p>
<p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p>
<p>Python对<code>bytes</code>类型的数据用<code>b</code>前缀表示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=<span class="string">b'ABC'</span></span><br></pre></td></tr></table></figure>

<p>注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是str，后者虽然显示和前者一样，但bytes的每个字符都只占用一个字节。</p>
<p>以Unicode表示的str通过<code>encode()</code>方法可以编码为直径的bytes，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>)</span><br><span class="line"><span class="string">b'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'ascii'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure>

<p>纯英文的str可以用ASCII编码为bytes，内容一致，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码范围超过了ASCII，Python会报错。</p>
<p>在bytes中，无法显示为ASCII自负的字节，用<code>\x##</code>显示。</p>
<p>反过来，如果我们从网络或磁盘上读取了字节流，那么读取到的数据就是bytes。腰包bytes变为str，需要<code>decode()</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ascii'</span>)</span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">'中文'</span></span><br></pre></td></tr></table></figure>

<p>如果bytes中包含无法解码的字节，decode()会报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xff'</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t decode byte 0xff in position 3: invalid start byte</span></span><br></pre></td></tr></table></figure>

<p>如果bytes中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xff'</span>.decode(<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>)</span><br><span class="line"><span class="string">'中'</span></span><br></pre></td></tr></table></figure>

<p>要计算str包含多少个字符，可以用<code>len()</code>函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'ABC'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'中文'</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>len()函数计算的是str的字符数，如果换成bytes，len()就计算字节数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">b'ABC'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。</p>
<p>在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。</p>
<p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure>

<p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；<br>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。  </p>
<p>申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：</p>
<p><img src="/pic/Python04-04.png" alt=""></p>
<p>如果.py文件本身使用UTF-8编码，并且也申明了<code># -*- coding: utf-8 -*-</code>，打开命令提示符测试就可以正常显示中文：</p>
<p><img src="/pic/Python04-05.png" alt=""></p>
<h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>最后一个常见的问题是如何输出格式化的字符串。我们经常会输出类似<code>&#39;亲爱的xxx你好！你xx月的话费是xx，余额是xx&#39;</code>之类的字符串，而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</p>
<p>在Python中，采用的格式化方式和C语言是一致的，用<code>%</code>实现，举例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, %s!'</span>%<span class="string">'world'</span></span><br><span class="line"><span class="string">'Hello, world!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hi, %s, you have $%d.'</span>%(<span class="string">'Michael'</span>,<span class="number">1000000</span>)</span><br><span class="line"><span class="string">'Hi, Michael, you have $1000000.'</span></span><br></pre></td></tr></table></figure>

<p>你可能猜到了，<code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p>
<table>
<thead>
<tr>
<th align="left">占位符</th>
<th align="left">替换内容</th>
</tr>
</thead>
<tbody><tr>
<td align="left">%d</td>
<td align="left">整数</td>
</tr>
<tr>
<td align="left">%f</td>
<td align="left">浮点数</td>
</tr>
<tr>
<td align="left">%s</td>
<td align="left">字符串</td>
</tr>
<tr>
<td align="left">%x</td>
<td align="left">十六进制整数</td>
</tr>
</tbody></table>
<p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%2d-%02d'</span>%(<span class="number">3</span>,<span class="number">1</span>))</span><br><span class="line"> <span class="number">3</span><span class="number">-01</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%.2f'</span>%<span class="number">3.1415926</span>)</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure>

<p>如果你不太确定应该用什么，<code>%s</code>永远起作用，它会把任何数据类型转换为字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Age: %s. Gender: %s'</span>%(<span class="number">25</span>,<span class="keyword">True</span>)</span><br><span class="line"><span class="string">'Age: 25. Gender: True'</span></span><br></pre></td></tr></table></figure>

<p>有些时候，字符串里面的<code>%</code>是一个普通字符怎么办？这个时候就需要转义，用<code>%%</code>来表示一个<code>%</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'growth rate: %d %%'</span>%<span class="number">7</span></span><br><span class="line"><span class="string">'growth rate: 7 %'</span></span><br></pre></td></tr></table></figure>

<h2 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h2><p>另一种格式化字符串的方法是使用<code>format()</code>，它会用传入的参数一次替换字符串中的占位符<code>{0}</code>、<code>{1}</code>……，不过这明显比%麻烦得多：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class="string">'小明'</span>,<span class="number">17.125</span>)</span><br><span class="line"><span class="string">'Hello, 小明, 成绩提升了 17.1%'</span></span><br></pre></td></tr></table></figure>

<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Python 3的字符串使用Unicode，直接支持多语言。</p>
<p>当str和bytes互相转换时，需要指定编码。最常用的编码是UTF-8。Python当然也支持其他编码方式，比如把Unicode编码成GB2312：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'gb2312'</span>)</span><br><span class="line"><span class="string">b'\xd6\xd0\xce\xc4'</span></span><br></pre></td></tr></table></figure>

<p>但这种方式纯属自找麻烦，如果没有特殊业务要求，请牢记仅使用UTF-8编码。</p>
<p>格式化字符串的时候，可以用Python的交互式环境测试，方便快捷。</p>
<hr>
<h1 id="提前尝试"><a href="#提前尝试" class="headerlink" title="提前尝试"></a>提前尝试</h1><p>复习知识点并尝试练习此题目：</p>
<blockquote>
<p>T04-01: 小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出<code>&#39;xx.x%&#39;</code>，只保留小数点后1位：</p>
<p>提示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">s1 = <span class="number">72</span></span><br><span class="line">s2 = <span class="number">85</span></span><br><span class="line">r = ???</span><br><span class="line">print(<span class="string">'???'</span> % r)</span><br></pre></td></tr></table></figure>
</blockquote>
<p>请执行此代码</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>=100</span><br><span class="line"><span class="keyword">if</span> a&gt;=0:</span><br><span class="line">    <span class="builtin-name">print</span>(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span>(-a)</span><br></pre></td></tr></table></figure>

<p>观察显示的的结果并尝试完成以下任务：</p>
<ol>
<li>思考这段代码中每行都表示什么意思</li>
<li>修改a的值或将a的值变为输入时赋值</li>
</ol>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python入门</tag>
      </tags>
  </entry>
  <entry>
    <title>crt和excrt</title>
    <url>/blog/crt-and-excrt/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="crt"><a href="#crt" class="headerlink" title="crt"></a>crt</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span> a;&#125;</span><br><span class="line">    <span class="keyword">int</span> t=exgcd(b,a%b,y,x);y-=a/b*x;<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">crt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,lcm=<span class="number">1</span>,x,y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">        lcm*=b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tp=lcm/b[i];</span><br><span class="line">        exgcd(tp,b[i],x,y);</span><br><span class="line">        x=(x%b[i]+b[i])%b[i];</span><br><span class="line">        ans=(ans+tp*x*a[i])%lcm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans+lcm)%lcm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="excrt"><a href="#excrt" class="headerlink" title="excrt"></a>excrt</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span> a;&#125;</span><br><span class="line">    <span class="keyword">int</span> t=exgcd(b,a%b,y,x);y-=a/b*x;<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">excrt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,k;</span><br><span class="line">    <span class="keyword">int</span> M=b[<span class="number">1</span>],ans=a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c=(a[i]-ans%b[i]+b[i])%b[i];</span><br><span class="line">        <span class="keyword">int</span> gcd=exgcd(M,b[i],x,y),bg=b[i]/gcd;</span><br><span class="line">        <span class="keyword">if</span>(c%gcd)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        x=x*c/gcd%bg;</span><br><span class="line">        ans+=x*M;</span><br><span class="line">        M*=bg;</span><br><span class="line">        ans=(ans%M+M)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans%M+M)%M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>多项式</title>
    <url>/blog/Polynomial/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h1><h2 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> M_PI</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI		3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fushu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;f[<span class="number">4000005</span>],g[<span class="number">4000005</span>];</span><br><span class="line">fushu <span class="keyword">operator</span>+(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x+b.x,a.y+b.y&#125;;&#125;</span><br><span class="line">fushu <span class="keyword">operator</span>-(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</span><br><span class="line">fushu <span class="keyword">operator</span>*(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x&#125;;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="keyword">int</span> lim,fushu *a,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lim==<span class="number">1</span>)<span class="keyword">return</span> ;</span><br><span class="line">    fushu a1[lim&gt;&gt;<span class="number">1</span>],a2[lim&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lim;i+=<span class="number">2</span>)</span><br><span class="line">        a1[i&gt;&gt;<span class="number">1</span>]=a[i],a2[i&gt;&gt;<span class="number">1</span>]=a[i+<span class="number">1</span>];</span><br><span class="line">    fft(lim&gt;&gt;<span class="number">1</span>,a1,tp);</span><br><span class="line">    fft(lim&gt;&gt;<span class="number">1</span>,a2,tp);</span><br><span class="line">    fushu Wn=(fushu)&#123;<span class="built_in">cos</span>(<span class="number">2.0</span>*M_PI/lim),tp*<span class="built_in">sin</span>(<span class="number">2.0</span>*M_PI/lim)&#125;,w=(fushu)&#123;<span class="number">1.0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(lim&gt;&gt;<span class="number">1</span>);i++,w=w*Wn)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=a1[i]+w*a2[i];</span><br><span class="line">        a[i+(lim&gt;&gt;<span class="number">1</span>)]=a1[i]-w*a2[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;f[i].x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;g[i].x);</span><br><span class="line">    <span class="keyword">int</span> lim=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;=n+m)</span><br><span class="line">        lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    fft(lim,f,<span class="number">1</span>);</span><br><span class="line">    fft(lim,g,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lim;i++)</span><br><span class="line">        f[i]=f[i]*g[i];</span><br><span class="line">    fft(lim,f,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.0lf "</span>,<span class="built_in">floor</span>(f[i].x/lim));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中可以小优化一下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(lim&gt;&gt;<span class="number">1</span>);i++,w=w*Wn)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">complex</span> t=w*a2[i];</span><br><span class="line">    a[i]=a1[i]+t,</span><br><span class="line">    a[i+(lim&gt;&gt;<span class="number">1</span>)]=a1[i]-t;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="迭代版"><a href="#迭代版" class="headerlink" title="迭代版"></a>迭代版</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> M_PI</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI		3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fushu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">&#125;f[<span class="number">10000005</span>],g[<span class="number">10000005</span>];</span><br><span class="line">fushu <span class="keyword">operator</span>+(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x+b.x,a.y+b.y&#125;;&#125;</span><br><span class="line">fushu <span class="keyword">operator</span>-(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</span><br><span class="line">fushu <span class="keyword">operator</span>*(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x&#125;;&#125;</span><br><span class="line"><span class="keyword">int</span> l,r[<span class="number">10000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="keyword">int</span> lim,fushu *a,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">        <span class="keyword">if</span>(i&lt;r[i])</span><br><span class="line">            swap(a[i],a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        fushu Wn=(fushu)&#123;<span class="built_in">cos</span>(M_PI/mid),tp*<span class="built_in">sin</span>(M_PI/mid)&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=R)</span><br><span class="line">        &#123;</span><br><span class="line">            fushu w=(fushu)&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k++,w=w*Wn)</span><br><span class="line">            &#123;</span><br><span class="line">                fushu x=a[j+k],y=w*a[j+mid+k];</span><br><span class="line">                a[j+k]=x+y;</span><br><span class="line">                a[j+mid+k]=x-y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;f[i].x);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;g[i].x);</span><br><span class="line">    <span class="keyword">int</span> lim=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;=n+m)lim&lt;&lt;=<span class="number">1</span>,l++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">        r[i]=(r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>));</span><br><span class="line">    fft(lim,f,<span class="number">1</span>);</span><br><span class="line">    fft(lim,g,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lim;i++)</span><br><span class="line">        f[i]=f[i]*g[i];</span><br><span class="line">    fft(lim,f,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.0lf "</span>,<span class="built_in">floor</span>(f[i].x/lim+<span class="number">0.5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="NTT"><a href="#NTT" class="headerlink" title="NTT"></a>NTT</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> P=<span class="number">998244353</span>,G=<span class="number">3</span>,Gi=<span class="number">332748118</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,l,r[<span class="number">3000005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">3000005</span>],g[<span class="number">3000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>)ans=(ans*a)%P;</span><br><span class="line">        a=(a*a)%P;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> lim,<span class="keyword">long</span> <span class="keyword">long</span> *a,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">        <span class="keyword">if</span>(i&lt;r[i])</span><br><span class="line">            swap(a[i],a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> Wn=<span class="built_in">pow</span>(tp==<span class="number">1</span>?G:Gi,(P<span class="number">-1</span>)/(mid&lt;&lt;<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=R)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> w=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k++,w=(w*Wn)%P)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x=a[j+k],y=w*a[j+mid+k]%P;</span><br><span class="line">                a[j+k]=(x+y)%P;</span><br><span class="line">                a[j+mid+k]=(x-y+P)%P;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;f[i]),f[i]=(f[i]+P)%P;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;g[i]),g[i]=(g[i]+P)%P;</span><br><span class="line">    <span class="keyword">int</span> lim=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim&lt;=n+m)lim&lt;&lt;=<span class="number">1</span>,l++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">        r[i]=(r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>));</span><br><span class="line">    ntt(lim,f,<span class="number">1</span>);</span><br><span class="line">    ntt(lim,g,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lim;i++)</span><br><span class="line">        f[i]=(f[i]*g[i])%P;</span><br><span class="line">    ntt(lim,f,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> inv=<span class="built_in">pow</span>(lim,P<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>,(f[i]*inv)%P);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python入门】03 Python基础2——代码缩进、数据类型和变量</title>
    <url>/blog/Course/Python/Python-03/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在上一期的末尾我们说到一段代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a&gt;=<span class="number">0</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure>

<h1 id="缩进及注释"><a href="#缩进及注释" class="headerlink" title="缩进及注释"></a>缩进及注释</h1><p>我们发现它采用缩进的方式</p>
<p>缩进有利有弊，好处是强迫你格式化写代码，但没有规定缩进是几个空格或Tab。按照我们约定俗成的规定，应始终坚持使用 4个空格 的缩进。</p>
<p>缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆成若干个函数，从而得到缩进较少的代码。</p>
<p>当然，坏处就是“复制”——“粘贴”失效了，当你重构代码时，需要检查缩进是否正确。</p>
<p>务必注意，Python是大小写敏感的，这意味着你不能用错大小写（例如将input()打成Input()或INPUT()）。</p>
<p>如果我们要注释一些给人看的，程序会忽略的语句，可以在该行最开头写上符号#，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印绝对值</span></span><br><span class="line">a=<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a&gt;=<span class="number">0</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure>

<p>这样有‘#’的那一行的代码都不会执行</p>
<h1 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h1><p>计算机最早就是用于数学计算的机器，因此计算机理所当然可以处理各种数值。<br>但是计算机还可以处理文本、图形、音频、视频、网页等数据，这就需要定义不同的数据类型。</p>
<h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>Python可以处理任意大小的整数，这包括负整数，写法与数学上相同，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">-8080</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>等。</p>
<p>由于计算机内部采用二进制存储，所以有时候采用一些特定的进制比较方便。</p>
<p>我们就通常采用十六进制表示一个整数，我们用 0x 前缀表示这个数是一个十六进制数，对于十六进制数的一个位上的数，0-9正常表示，10-15分别对应a-f（或A-F）。例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0xff00</span> <span class="comment"># 十进制下的65280</span></span><br><span class="line"><span class="number">0xa5b4c3d2</span> <span class="comment"># 十进制下的2780087250</span></span><br></pre></td></tr></table></figure>

<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>浮点数就是小数。我们在计算机中采用科学计数法方式表示，小数点位置可变（例如$1.23\times10^9 = 12.3\times10^8$），就像来回浮动一样，故得名 浮点数 。<br>当然也可以采用数学写法，$1.23\times10^9 = 1,230,000,000$，$31.4\times10^{-1} = 3.14\times10^0 = 3.14$<br>对于一个很大或很小的浮点数，我们再采用数学写法未免有些困难，所以我们采用合理的科学计数法表示，我们用$e$来表示$10$，$AeX$就是$A\times10^X$，例如<br>$1,230,000,000 = 1.23\times10^9 = 1.23e9$<br>$0.000,012 = 1.2\times10^{-5} = 1.2e-5$  </p>
<p>注意：整数和浮点数在计算机上存储方式不同，整数运算永远是精确的（包括除法），浮点数存在一定的四舍五入精度误差。</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是以单引号’或者双引号”括起来的文本，单引号和双引号本身不是字符串的内容，它这表示这是个字符串。<br>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">`abc`和<span class="string">"xyz"</span></span><br><span class="line">中第一个字符串中只有`a、b和c`三个字符，第二个字符串中只有`x、y和z`三个字符</span><br></pre></td></tr></table></figure>

<p>事实上，如果你要单独使用<code>&#39;</code>这个符号，可以用双引号</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"I'm Peter_Matthew."</span></span><br></pre></td></tr></table></figure>

<p>但是如果你需要使用”，你需要使用 转义字符<code>\</code>来表示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'I\'m \"Peter_Matthew\".'</span></span><br></pre></td></tr></table></figure>

<p>表示的内容为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">I<span class="string">'m "Peter_Matthew".</span></span><br></pre></td></tr></table></figure>

<p>转义字符<code>\</code>的作用是将这里的内容转换为别的字符而不是保留，它可以转义很多字符，例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\n 表示换行符</span><br><span class="line">\t 表示制表符</span><br><span class="line">\\ 表示\</span><br></pre></td></tr></table></figure>

<p>使用print可以打印字符串而不会显示最外边的<code>&#39;</code>和<code>&quot;</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'I\'m \"Peter_Matthew\".'</span>)</span><br><span class="line"><span class="string">'I\'m \"Peter_Matthew\".'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\\\n\\'</span>)</span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure>

<p>Python在通常情况下默认转义，当你不想它帮你转义时，你可以在前面加上<code>r</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\\\n\\'</span>)</span><br><span class="line">\</span><br><span class="line">\</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'\\\n\\'</span>)</span><br><span class="line">\\\n\\</span><br></pre></td></tr></table></figure>

<p>同时，由于多行用<code>\n</code>写在一行内会十分影响阅读，所以可以采用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>方式表示多行字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3'''</span></span><br></pre></td></tr></table></figure>

<p>输出它</p>
<p>在Python交互模式下，<code>...</code>在提示你可以接着上一行输入，<code>...</code>不是代码的一部分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'''line1</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line2</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line3'''</span>)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure>

<p>在程序中，请这么写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'''line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3'''</span>)</span><br></pre></td></tr></table></figure>

<h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>布尔值只有<code>True</code>和<code>False</code>两个值，Python中采用此方式表示布尔值，可以通过布尔运算计算出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &gt; <span class="number">4</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>

<p>布尔值可以采用<code>and</code>、<code>or</code>和<code>not</code>逻辑运算。</p>
<h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><p>与运算，只有值均为True时才会返回True。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure>

<h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><p>或运算，只要有值为True时就会返回True。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> &gt; <span class="number">3</span> <span class="keyword">or</span> <span class="number">2</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure>

<h3 id="not"><a href="#not" class="headerlink" title="not"></a>not</h3><p>非运算，又称取反运算，会将值的真假反相，也就是值为False时为True，反之亦然。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="number">2</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure>

<h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>Python当中的一个特殊值，用<code>None</code>表示。注意<strong>None不能理解为0</strong>。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Python开还提供了列表、字典等数据类型，支持自定义数据类型，后续会讲到。</p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量概念与初中代数方程变量一致，只是在计算机程序中，变量不仅可以是数字，还可以是任意的数据类型。</p>
<p>变量在程序中用一个变量名表示了，变量名必须是大小写英文字母、数字和_的组合，且不能以数字开头。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">t_007=<span class="string">'T007'</span></span><br><span class="line">Answer=<span class="keyword">True</span></span><br></pre></td></tr></table></figure>

<p>其中，a是整数，t_007是字符串，Answer是布尔值。</p>
<p>并且在其中，这里的<code>=</code>符号是赋值，意思是把等式后面的值给变量，同一个变量可以被反复赋值，而且同一个数据变量每次被赋值时的数据类型可以不同</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">123</span> <span class="comment"># a是整数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">'ABC'</span> <span class="comment"># a变为字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这种变量类型不固定的语言称为 动态语言 ，与之对应的是静态语言，静态语言必须指定变量类型，如赋值时不匹配，就会报错。<br>例如java和C++中</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">123</span>;<span class="comment">//a是整数</span></span><br><span class="line">a=<span class="string">"ABC"</span>;<span class="comment">//赋值错误：变量类型不匹配</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>和静态语言相比，动态语言更灵活。</p>
</blockquote>
<p>请区分Python中，赋值语句的=符号和数学的等号区别，请看下面的例子。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=x+<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>如果从数学上理解x=x+2，那么是不成立的。在赋值语句中，程序先计算右侧的表达式x+2的值，得到12，然后在进行赋值，x的值就变成了12</p>
<blockquote>
<p>变量在计算机内存中的表示：<br>当我们写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">'ABC'</span></span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>Python解释器做了两件事：</p>
<ol>
<li>在内存中创建了一个’ABC’的字符串。</li>
<li>在内存中创建了一个名为a的变量，并把它指向’ABC’。（这与C++的内存表示存在差异）</li>
</ol>
<p>当然你也可以把a的值赋给b，这实际是将b指向a所指的数据。<br>对于下面这个例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">'ABC'</span></span><br><span class="line">b=a</span><br><span class="line">a=<span class="string">'XYZ'</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>最后一行打印出b的内容是<code>&#39;ABC&#39;</code>还是<code>&#39;XYZ&#39;</code>？从数学上会错误地认为a和b相同都是<code>&#39;XYZ&#39;</code>，实际上b的值是<code>&#39;ABC&#39;</code>，程序是一行一行执行的，所以我们也一行一行执行。</p>
<p>第一：a=<code>&#39;ABC&#39;</code>，解释器创建了字符串<code>&#39;ABC&#39;</code>和变量a，并把a指向字符串<code>&#39;ABC&#39;</code><br><img src="/pic/Python03-01.png" alt="a=&#39;ABC&#39;"><br>第二：b=a，解释器创建了变量b，并把它指向a所指向的字符串<code>&#39;ABC&#39;</code><br><img src="/pic/Python03-02.png" alt="b=a"><br>第三：a=<code>&#39;XYZ&#39;</code>，解释器创建了字符串<code>&#39;XYZ&#39;</code>，并把a的指向改为<code>&#39;XYZ&#39;</code>，此时b是没有变的。<br><img src="/pic/Python03-03.png" alt="a=&#39;XYZ&#39;"><br>所以最后b的值就是<code>&#39;ABC&#39;</code>了。</p>
</blockquote>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量就是不能更改的变量，比如π在数学上就是个常量，通常用全部大写的变量名表示常量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI=<span class="number">3.141592653589793</span></span><br></pre></td></tr></table></figure>

<p>但事实上PI仍是变量，Python没有机制阻止变量不更改，所以，这样的写法只是一个习惯用法，没有人拦得住你更改PI的值。</p>
<h2 id="关于整数除法"><a href="#关于整数除法" class="headerlink" title="关于整数除法"></a>关于整数除法</h2><p>Python中有两种除法。<br>第一种是/：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>/<span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span>/<span class="number">3</span></span><br><span class="line"><span class="number">3.0</span></span><br></pre></td></tr></table></figure>

<p><code>/</code>的除法结果是浮点数，即使整除也是浮点数。</p>
<p>还有一种是<code>//</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>//<span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>//<span class="number">-3</span></span><br><span class="line"><span class="number">-4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-10</span>//<span class="number">3</span></span><br><span class="line"><span class="number">-4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-10</span>//<span class="number">-3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>这样的结果永远是整数，永远向下取整。</p>
<p>同时还有一个余数运算<code>%</code>，可以得到相除的余数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>%<span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>%<span class="number">-3</span></span><br><span class="line"><span class="number">-2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-10</span>%<span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-10</span>%<span class="number">-3</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到余数的正负与除数有关</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"># 以下是数学解释</span><br><span class="line"><span class="number">10</span>=<span class="number">3</span>*<span class="number">3</span>+<span class="number">1</span>			<span class="number">10</span>%<span class="number">3</span>=<span class="number">1</span></span><br><span class="line"><span class="number">10</span>=(<span class="number">-4</span>)*(<span class="number">-3</span>)+(<span class="number">-2</span>)	<span class="number">10</span>%(<span class="number">-3</span>)=<span class="number">-2</span></span><br><span class="line"><span class="number">-10</span>=(<span class="number">-4</span>)*<span class="number">3</span>+<span class="number">2</span>		(<span class="number">-10</span>)%<span class="number">3</span>=<span class="number">2</span></span><br><span class="line"><span class="number">-10</span>=<span class="number">3</span>*(<span class="number">-3</span>)+(<span class="number">-1</span>)		(<span class="number">-10</span>)%(<span class="number">-3</span>)=<span class="number">-1</span></span><br></pre></td></tr></table></figure>

<p>由于<code>//</code>除法和<code>%</code>取余的结果总是整数，所以整数的除法是精确的。</p>
<hr>
<h1 id="提前尝试"><a href="#提前尝试" class="headerlink" title="提前尝试"></a>提前尝试</h1><p>复习知识点并尝试打印下列变量的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">n = <span class="number">123</span></span><br><span class="line">f = <span class="number">456.789</span></span><br><span class="line">s1 = <span class="string">'Hello, world'</span></span><br><span class="line">s2 = <span class="string">'Hello, \'Adam\''</span></span><br><span class="line">s3 = <span class="string">r'Hello, "Bart"'</span></span><br><span class="line">s4 = <span class="string">r'''Hello,</span></span><br><span class="line"><span class="string">Lisa!'''</span></span><br></pre></td></tr></table></figure>

<p>请执行此代码</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">a</span>=100</span><br><span class="line"><span class="keyword">if</span> a&gt;=0:</span><br><span class="line">    <span class="builtin-name">print</span>(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="builtin-name">print</span>(-a)</span><br></pre></td></tr></table></figure>

<p>观察显示的的结果并尝试完成以下任务：</p>
<ol>
<li>思考这段代码中每行都表示什么意思</li>
<li>修改a的值或将a的值变为输入时赋值</li>
</ol>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Python入门</tag>
      </tags>
  </entry>
  <entry>
    <title>再见，极域！</title>
    <url>/blog/Goodbye-Top-Domain/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="0x00-引言"><a href="#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h1><p>作为学生党的我们，总想在微机课上跨越老师的控制走向那万千互联网，可这时一款名为极域的软件就阻挡了我们，我们的电脑屏幕竟然在这款软件的监控之下，而且更气的是，当我们打开了任务管理器，试图结束掉它时，它提示我们</p>
<p><img src="/pic/GBTD1.png" alt="拒绝访问"><br>拒绝访问</p>
<p>如果说我能直接结束掉它也行，但是这<strong>拒绝访问</strong>四个字激怒了我，作为官封的学校机房管理员，我简直无法容忍。</p>
<h1 id="0x01-暴力出奇迹"><a href="#0x01-暴力出奇迹" class="headerlink" title="0x01 暴力出奇迹"></a>0x01 暴力出奇迹</h1><p>有一个神奇的程序，它在或不在Windows中，都不影响人们的日常使用。但是，它被称为Windows下的大杀器，那就是 <strong>ntsd</strong> 。  </p>
<p>我们在命令行里输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ntsd -c q -pn StudentMain.exe</span><br></pre></td></tr></table></figure>

<p><img src="/pic/GBTD2.png" alt=""></p>
<p>我嘞个乖乖，这个暴力工具一上，直接秒掉啊有木有</p>
<h1 id="0x02-暴力的优化"><a href="#0x02-暴力的优化" class="headerlink" title="0x02 暴力的优化"></a>0x02 暴力的优化</h1><p>我们按Win+R，输入register，打开注册表编辑器</p>
<p>打开下面两个中你找得到的那一个</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">计算机<span class="symbol">\H</span>KEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\T</span>opDomain<span class="symbol">\e</span>-Learning Class<span class="symbol">\S</span>tudent</span><br><span class="line">计算机<span class="symbol">\H</span>KEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\W</span>OW6432Node<span class="symbol">\T</span>opDomain<span class="symbol">\e</span>-Learning Class<span class="symbol">\S</span>tudent</span><br></pre></td></tr></table></figure>

<p><img src="/pic/GBTD3.png" alt=""></p>
<p>找到 PreventKill ，并双击打开将值从1改为0，然后点选确定保存。<br><img src="/pic/GBTD4.png" alt=""></p>
<p>这时候我们打开任务管理器，尝试结束掉它<br><img src="/pic/GBTD1.png" alt=""><br>不好意思啊，修改了注册表后，我们需要关闭程序再打开来让它重新加载各项数据。。。</p>
<p>等下，我们还是待暴力解决啊。。。</p>
<p>不过这样解决后，我们就可以用任务管理器解决它了！</p>
<h1 id="0x03-简单部分分"><a href="#0x03-简单部分分" class="headerlink" title="0x03 简单部分分"></a>0x03 简单部分分</h1><p>我们还是打开注册表编辑器，打开下面两个中你找得到的那一个</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">计算机<span class="symbol">\H</span>KEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\T</span>opDomain<span class="symbol">\e</span>-Learning Class Standard<span class="symbol">\1</span>.00</span><br><span class="line">计算机<span class="symbol">\H</span>KEY_LOCAL_MACHINE<span class="symbol">\S</span>OFTWARE<span class="symbol">\W</span>OW6432Node<span class="symbol">\T</span>opDomain<span class="symbol">\e</span>-Learning Class Standard<span class="symbol">\1</span>.00</span><br></pre></td></tr></table></figure>

<p><img src="/pic/GBTD5.png" alt=""></p>
<p>找到 UninstallPasswd ，查看它的值，发现为PasswdXXX，这样的文本，其中XXX就为学生端密码，在设置里填上XXX，就可以愉快地修改配置了。</p>
<p><img src="/pic/GBTD6.png" alt=""></p>
<p>（部分学生端的设置没有一些选项，这些只能通过修改注册表并重启学生端解决设置<del>（当然你能碰讲台上那个教师端更方便。。。）</del>）</p>
<h1 id="0x04-文艺的正解"><a href="#0x04-文艺的正解" class="headerlink" title="0x04 文艺的正解"></a>0x04 文艺的正解</h1><ul>
<li>Q：为什么我的注册表长这样，密码输入为 123456 或者 [123456] ，都不对呢？  </li>
<li>A：这个原因很简单，极域的公司又不是一帮傻子，当有学校反映学生可以找到密码的那一刻起，极域公司就加密了密码，然后就只会在注册表留下Passwd[123456]，无论你找格式改成什么都不对。。。</li>
</ul>
<p><img src="/pic/GBTD7.png" alt=""></p>
<p>这是极域2015V5.0及以上版本（也就是2.0以上版本）尤其是豪华版的加密机制，我们怎么解决这个问题呢？ </p>
<blockquote>
<p><strong>Warning!前方高能！</strong>请在有一定计算机方面知识储备后食用以下文本</p>
</blockquote>
<p>我们还是可以通过一款反汇编软件解决掉它—— ollydbg 。</p>
<p><img src="/pic/GBTD8.png" alt=""></p>
<p>我们打开它，点击File-&gt;Attach，找到StudentMain并附加进程。</p>
<p><img src="/pic/GBTD9.png" alt=""></p>
<p>按Ctrl+G跟随表达式00401000。</p>
<p><img src="/pic/GBTD10.png" alt=""></p>
<p><img src="/pic/GBTD11.png" alt=""></p>
<p>然后我们搜索字符串，搜到了两处 mythware_super_password ，分别在表达式00431137和0045240E位置。</p>
<p><img src="/pic/GBTD12.png" alt=""></p>
<p><img src="/pic/GBTD13.png" alt=""></p>
<p>然后我们按F2标记为程序断点。</p>
<p>然后我们在设置里瞎输入一串密码并点确定，发现学生端暂停了。</p>
<p><img src="/pic/GBTD14.png" alt=""></p>
<p>这时我们按F8单步运行学生端程序，当运行到表达式0045242A处时，发现密码就在后方显示 UNICODE “XXX” ，那么这个XXX就是学生端的密码了。</p>
<p><img src="/pic/GBTD15.png" alt=""></p>
<p>此时我们继续运行程序，然后File-&gt;Detach，接着关闭ollydbg，再次输入解锁密码即可进入设置页面，屡试不爽。</p>
<p><img src="/pic/GBTD6.png" alt=""></p>
<h1 id="0x05-一些学生端的梗"><a href="#0x05-一些学生端的梗" class="headerlink" title="0x05 一些学生端的梗"></a>0x05 一些学生端的梗</h1><ul>
<li><strong>重要的一点：</strong>我们修改本机IP地址，就不会受教师控制。缺点是容易导致IP地址冲突，而且新版本教师机搜学生机好像变快了，不过教师还是不知道你的新IP，它会看到有台新电脑而且你的没上线，在有人不在时稳得很。</li>
</ul>
<p>接着我们来看一些高端的操作</p>
<ol>
<li>万能的拔网线法<ul>
<li>实用系数:★★★★★</li>
<li>危险系数:★★★★★</li>
<li>难度系数:☆☆☆☆☆</li>
<li>操作：无需细讲，大家都懂。</li>
<li>评价：<ul>
<li>一言不合把网线，稍等片刻便离线。</li>
<li>甚是危险之行为，老师必然会知道。</li>
</ul>
</li>
</ul>
</li>
<li>获取管理员密码<ul>
<li>实用系数:★★★★☆</li>
<li>危险系数:★★★☆☆</li>
<li>难度系数:★★★★☆</li>
<li>操作：已在上文提到。</li>
<li>评价：<ul>
<li>拿到密码无大用，卸载删除均还原。</li>
<li>看到防删进程卡，一怒之下输密码。</li>
</ul>
</li>
</ul>
</li>
<li>删除进程大法好<ul>
<li>实用系数:★★★☆☆</li>
<li>危险系数:★★☆☆☆</li>
<li>难度系数:★★★☆☆</li>
<li>操作：基于大法2，可以使用ntsd或者具有同样或略低级的杀伤性程序。</li>
<li>评价：<ul>
<li>删除进程真是爽，教师监控看不了。</li>
<li>万一没有大杀器，完蛋，那是真凉。</li>
</ul>
</li>
</ul>
</li>
<li>召唤防火墙大法<ul>
<li>实用系数:★☆☆☆☆</li>
<li>危险系数:★★★★★</li>
<li>难度系数:★★☆☆☆</li>
<li>操作：<ul>
<li>打开控制面板–&gt;Windows防火墙–&gt;例外–&gt;找到“StudentMain.exe”删除</li>
<li>返回常规–&gt;选择“启动防火墙–&gt;勾选”不允许例外”</li>
<li>同理，我们还经验禁用网卡、删网络进程，原理都是一样的</li>
</ul>
</li>
<li>评价：<ul>
<li>禁这不如把线爽，同桌妹子装逼强。</li>
<li>要是老师突然来，形象瞬间跌到爆。</li>
</ul>
</li>
</ul>
</li>
<li>玄学智能ABC法<ul>
<li>实用系数:★★☆☆☆</li>
<li>危险系数:★☆☆☆☆</li>
<li>难度系数:★☆☆☆☆</li>
<li>操作：<ul>
<li>智能ABC是很老很老的输入法<del>，装机的大叔一般都很恋旧，都会装上的</del>。</li>
<li>然而智能ABC有个算不上漏洞的漏洞，依次输入”v”+”↑”+”del”+”enter”可以刷新屏幕。</li>
<li>对于早些版本的极域电子教室，可以直接回到屏幕，且被控端还是开着的，老师一点都不知道。</li>
<li>如果你机子的版本比较老，不妨试试。</li>
</ul>
</li>
<li>评价：<ul>
<li>输入法是真的玄，怀旧装机也很闲。</li>
<li>漏洞出自老人手，极域这下真的愁。</li>
</ul>
</li>
</ul>
</li>
<li>最小化屏幕大法<ul>
<li>实用系数:★★☆☆☆</li>
<li>危险系数:★☆☆☆☆</li>
<li>难度系数:★★☆☆☆</li>
<li>操作：<ul>
<li>和上面的智能ABC法异曲同工。</li>
<li>有些版本的电子教室默认开启可以最小化屏幕的功能。</li>
<li>这时候我们输入”q”+”ctrl”就可以回到桌面，老师当然不知道的。</li>
</ul>
</li>
<li>评价：<ul>
<li>异曲同工真的妙，老师完全不知道。</li>
<li>要说这是因为啥，漏洞太大还要查。</li>
</ul>
</li>
</ul>
</li>
<li>鸟瞰图卡出大法<ul>
<li>实用系数:★☆☆☆☆</li>
<li>危险系数:★☆☆☆☆</li>
<li>难度系数:★★☆☆☆</li>
<li>操作：<ul>
<li>我也不知道问什么会发现这个东西。。。</li>
<li>那时我想起拖动窗口，快速滑动即可最小化所有窗口返回桌面。</li>
<li>毕竟实在闲得慌，手痒痒点开了鸟瞰图模式</li>
<li>来回滑动，没用……</li>
<li>无聊的我点击旋转按钮，左转、右转、越按越快、咔嚓、跳到桌面了，啊哈……</li>
</ul>
</li>
<li>评价：<ul>
<li>跟着我左转右转，形成一个快动作。</li>
<li>优雅地回到桌面，需要一些神操作。</li>
</ul>
</li>
</ul>
</li>
<li>编程法<ul>
<li>实用系数:?????</li>
<li>危险系数:?????</li>
<li>难度系数:?????</li>
<li>操作：<ul>
<li>有一篇文章，有神犇用C语言编了个针对极域电子教室的小程序，甚至可以反控教师端，有兴趣的童鞋可以去找找。。。</li>
</ul>
</li>
<li>评价：<ul>
<li>最强王者写程序，教师都要抖三抖。</li>
<li>万一惹了他生气，直播教师被反击。</li>
</ul>
</li>
</ul>
</li>
<li>总结<ul>
<li>是个程序漏洞多，只是看你怎么说。</li>
<li>物理方式很暴力，鼠标操作更牛气。</li>
<li>程序暴力也神气，只是附加显大气。</li>
<li>防火大法装逼爽，玄学软件治三甲。</li>
<li>鸟瞰操作稳准狠，编程操作也牛逼。</li>
<li>俯仰不愧那天地，褒贬自有千秋种。</li>
</ul>
</li>
</ol>
<h1 id="0x06-后记"><a href="#0x06-后记" class="headerlink" title="0x06 后记"></a>0x06 后记</h1><h2 id="当我们学校仍然采用老版本的极域时，贺帅老师与我有过这样的对话："><a href="#当我们学校仍然采用老版本的极域时，贺帅老师与我有过这样的对话：" class="headerlink" title="当我们学校仍然采用老版本的极域时，贺帅老师与我有过这样的对话："></a>当我们学校仍然采用老版本的极域时，贺帅老师与我有过这样的对话：</h2><ul>
<li>张：我把网线一把，你关了教师机也没用</li>
<li><h2 id="贺：关闭教师机你就给我从教室里出去"><a href="#贺：关闭教师机你就给我从教室里出去" class="headerlink" title="贺：关闭教师机你就给我从教室里出去"></a>贺：关闭教师机你就给我从教室里出去</h2></li>
<li>贺：我改了个密码</li>
<li>张：不就是xxx吗？</li>
<li>贺：那以后密码谁传的我就知道了</li>
<li>张：这么弱的东西是个会看百度经验的人都会吧喂</li>
<li>贺：……，赶紧给我上楼做题</li>
</ul>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>二维树状数组</title>
    <url>/blog/data-2DBinaryIndexTree/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二维树状数组1"><a href="#二维树状数组1" class="headerlink" title="二维树状数组1"></a><a href="https://www.luogu.org/problemnew/show/U44574" target="_blank" rel="noopener">二维树状数组1</a></h1><p>单点修改，矩阵查询。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y&lt;=ny;y+=lowbit(y))</span><br><span class="line">            tree[x][y]+=d;</span><br><span class="line">&#125;</span><br><span class="line">   add(x,y,k);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">    <span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y;y-=lowbit(y))</span><br><span class="line">            s+=tree[x][y];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>;</span><br><span class="line">    s+=ask(xb,yb);</span><br><span class="line">    s-=ask(xb,ya<span class="number">-1</span>);</span><br><span class="line">    s-=ask(xa<span class="number">-1</span>,yb);</span><br><span class="line">    s+=ask(xa<span class="number">-1</span>,ya<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,range_ask(xa,ya,xb,yb));</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tree[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> nx,ny;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y&lt;=ny;y+=lowbit(y))</span><br><span class="line">            tree[x][y]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(xa,ya,d);</span><br><span class="line">    add(xa,yb+<span class="number">1</span>,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,ya,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,yb+<span class="number">1</span>,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">    <span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y;y-=lowbit(y))</span><br><span class="line">            s+=tree[x][y];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>;</span><br><span class="line">    s+=ask(xb,yb);</span><br><span class="line">    s-=ask(xb,ya<span class="number">-1</span>);</span><br><span class="line">    s-=ask(xa<span class="number">-1</span>,yb);</span><br><span class="line">    s+=ask(xa<span class="number">-1</span>,ya<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;nx,&amp;ny,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,y,xa,xb,ya,yb;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k; </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">            add(x,y,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;xa,&amp;ya,&amp;xb,&amp;yb);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,range_ask(xa,ya,xb,yb));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="二维树状数组2"><a href="#二维树状数组2" class="headerlink" title="二维树状数组2"></a><a href="https://www.luogu.org/problemnew/show/U44587" target="_blank" rel="noopener">二维树状数组2</a></h1><p>矩阵修改，单点查询。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y&lt;=ny;y+=lowbit(y))</span><br><span class="line">            tree[x][y]+=d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(xa,ya,d);</span><br><span class="line">    add(xa,yb+<span class="number">1</span>,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,ya,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,yb+<span class="number">1</span>,d);</span><br><span class="line">&#125;</span><br><span class="line">    range_add(xa,ya,xb,yb,k);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">    <span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y;y-=lowbit(y))</span><br><span class="line">            s+=tree[x][y];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ask(x,y));</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tree[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> nx,ny;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y&lt;=ny;y+=lowbit(y))</span><br><span class="line">            tree[x][y]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(xa,ya,d);</span><br><span class="line">    add(xa,yb+<span class="number">1</span>,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,ya,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,yb+<span class="number">1</span>,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">    <span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y;y-=lowbit(y))</span><br><span class="line">            s+=tree[x][y];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>;</span><br><span class="line">    s+=ask(xb,yb);</span><br><span class="line">    s-=ask(xb,ya<span class="number">-1</span>);</span><br><span class="line">    s-=ask(xa<span class="number">-1</span>,yb);</span><br><span class="line">    s+=ask(xa<span class="number">-1</span>,ya<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;nx,&amp;ny,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,y,xa,xb,ya,yb;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%lld"</span>,&amp;xa,&amp;ya,&amp;xb,&amp;yb,&amp;k);</span><br><span class="line">            range_add(xa,ya,xb,yb,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ask(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀自动机</title>
    <url>/blog/string-SAM/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>普通的后缀自动机</p>
<p>代码如下：<br>洛谷P3975 [TJOI2015]弦论</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2010000</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> fail[N],son[N][<span class="number">26</span>],len[N],siz[N],sum[N];</span><br><span class="line"><span class="keyword">int</span> rt=<span class="number">1</span>,lst=rt,tot=<span class="number">1</span>,n,t[N],A[N],tp,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=lst,now=++tot;</span><br><span class="line">    lst=now;</span><br><span class="line">    len[now]=len[fa]+<span class="number">1</span>;</span><br><span class="line">    siz[now]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(fa&amp;&amp;!son[fa][c])</span><br><span class="line">        son[fa][c]=now,fa=fail[fa];</span><br><span class="line">    <span class="keyword">if</span>(!fa)</span><br><span class="line">    &#123;</span><br><span class="line">        fail[now]=rt;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x=son[fa][c],y=++tot;</span><br><span class="line">    <span class="keyword">if</span>(len[fa]+<span class="number">1</span>==len[x])</span><br><span class="line">    &#123;</span><br><span class="line">        fail[now]=x;</span><br><span class="line">        tot--;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len[y]=len[fa]+<span class="number">1</span>;</span><br><span class="line">    fail[y]=fail[x];</span><br><span class="line">    fail[x]=fail[now]=y;</span><br><span class="line">    <span class="built_in">memcpy</span>(son[y],son[x],<span class="keyword">sizeof</span>(son[y]));</span><br><span class="line">    <span class="keyword">while</span>(fa&amp;&amp;son[fa][c]==x)</span><br><span class="line">        son[fa][c]=y,fa=fail[fa];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        t[len[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        t[i]+=t[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">        A[t[len[i]]--]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now=A[i];</span><br><span class="line">        <span class="keyword">if</span>(tp)siz[fail[now]]+=siz[now];</span><br><span class="line">        <span class="keyword">else</span> siz[now]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    siz[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[A[i]]=siz[A[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(son[A[i]][j])</span><br><span class="line">                sum[A[i]]+=sum[son[A[i]][j]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,s+<span class="number">1</span>,&amp;tp,&amp;k);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        insert(s[i]-<span class="string">'a'</span>);</span><br><span class="line">    work();</span><br><span class="line">    <span class="keyword">if</span>(k&gt;sum[rt])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now=rt;</span><br><span class="line">    <span class="keyword">while</span>((k-=siz[now])&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(k&gt;sum[son[now][p]])k-=sum[son[now][p++]];</span><br><span class="line">        now=son[now][p];</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'a'</span>+p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>广义后缀自动机</p>
<p>代码如下：<br>洛谷P2336 [SCOI2012]喵星球上的点名</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">600005</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> fail[N],len[N],siz[N],sum[N];</span><br><span class="line"><span class="keyword">int</span> rt=<span class="number">1</span>,lst,tot=<span class="number">1</span>,n,m,t[N],A[N],len1[N],len2[N],las[N];</span><br><span class="line"><span class="keyword">int</span> str[N],marked[N],ans[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;son[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=lst,now=++tot;</span><br><span class="line">    lst=now;</span><br><span class="line">    len[now]=len[fa]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(fa&amp;&amp;!son[fa][c])</span><br><span class="line">        son[fa][c]=now,fa=fail[fa];</span><br><span class="line">    <span class="keyword">if</span>(!fa)</span><br><span class="line">    &#123;</span><br><span class="line">        fail[now]=rt;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x=son[fa][c],y=++tot;</span><br><span class="line">    <span class="keyword">if</span>(len[fa]+<span class="number">1</span>==len[x])</span><br><span class="line">    &#123;</span><br><span class="line">        fail[now]=x;</span><br><span class="line">        tot--;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len[y]=len[fa]+<span class="number">1</span>;</span><br><span class="line">    fail[y]=fail[x];</span><br><span class="line">    fail[x]=fail[now]=y;</span><br><span class="line">    son[y]=son[x];</span><br><span class="line">    <span class="keyword">while</span>(fa&amp;&amp;son[fa][c]==x)</span><br><span class="line">        son[fa][c]=y,fa=fail[fa];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&amp;&amp;las[x]!=y;x=fail[x])</span><br><span class="line">    &#123;</span><br><span class="line">        siz[x]++;</span><br><span class="line">        las[x]=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&amp;&amp;las[x]!=y;x=fail[x])</span><br><span class="line">    &#123;</span><br><span class="line">        ans[y]+=marked[x];</span><br><span class="line">        las[x]=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len1[i]);</span><br><span class="line">        lst=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len1[i];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;str[++tmp]);</span><br><span class="line">            insert(str[tmp]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len2[i]);</span><br><span class="line">        lst=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len2[i];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;str[++tmp]);</span><br><span class="line">            insert(str[tmp]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(las,<span class="number">0</span>,<span class="keyword">sizeof</span>(las));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x=rt;j&lt;=len1[i];j++)updata1(x=son[x][str[++tmp]],i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x=rt;j&lt;=len2[i];j++)updata1(x=son[x][str[++tmp]],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,le,x;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;le);</span><br><span class="line">        <span class="keyword">bool</span> tag=<span class="number">0</span>;x=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,d;j&lt;=le;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d);</span><br><span class="line">            <span class="keyword">if</span>(!tag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(son[x][d])</span><br><span class="line">                    x=son[x][d];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    tag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!tag)</span><br><span class="line">        &#123;</span><br><span class="line">            marked[x]++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,siz[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(las,<span class="number">0</span>,<span class="keyword">sizeof</span>(las));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x=rt;j&lt;=len1[i];j++)updata2(x=son[x][str[++tmp]],i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x=rt;j&lt;=len2[i];j++)updata2(x=son[x][str[++tmp]],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀数组</title>
    <url>/blog/string-SA/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h1><h2 id="后缀"><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h2><p>对于一个串来说，第i个字符开始的串就是后缀。。。<br>举个栗子：对于串ababa来说，ababa、baba、aba、ba、a都是它的后缀</p>
<h2 id="后缀数组-1"><a href="#后缀数组-1" class="headerlink" title="后缀数组"></a>后缀数组</h2><p>我们将后缀编号（其实就是开始的那个字符在原串中位置）然后按照字典序排序这些后缀，得到了以下顺序</p>
<ol>
<li>a</li>
<li>aba</li>
<li>ababa</li>
<li>ba</li>
<li>baba</li>
</ol>
<p>可以看到后缀按字典序排名后的顺序是 5 3 1 4 2 ，我们开一个sa数组（即后缀数组），用sa[i]表示排名为i的后缀的编号（开始字符在原串中的位置）。</p>
<p>同时我们可以开一个rk数组，用rk[i]表示编号为i的后缀的排名。</p>
<h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>我们可以考虑$O(n\log{n})$排序后缀，但考虑单次任意比较的复杂度是$O(n)$的，所以总复杂度趋近$O(n^2\log{n})$，肯定会被大数据卡掉。</p>
<h3 id="优化1：倍增"><a href="#优化1：倍增" class="headerlink" title="优化1：倍增"></a>优化1：倍增</h3><p>我们还是用这个例子开始排序</p>
<ol>
<li>ababa</li>
<li>baba</li>
<li>aba</li>
<li>ba</li>
<li>a</li>
</ol>
<p>我们先比较这些后缀数组的第一位</p>
<ol>
<li>ababa</li>
<li>aba</li>
<li>a</li>
<li>baba</li>
<li>ba</li>
</ol>
<p>然后比较它们的前两位（因为第一位已经排好，其实这里就是比较第二位）</p>
<ol>
<li>a</li>
<li>ababa</li>
<li>aba</li>
<li>baba</li>
<li>ba</li>
</ol>
<p>然后比较他们的前四位（因为前两位已经排好，其实这里就是比较三、四两位）</p>
<ol>
<li>a</li>
<li>aba</li>
<li>ababa</li>
<li>ba</li>
<li>baba</li>
</ol>
<p>然后发现对于这个例子已经排序完成，额，如果没有排序完成，我们需要一直这么下去。假设现在还没有完成，我们需要比较前五位（其实就是比较最大的小于n的2的次方位到第n位之间的位）</p>
<p>额，不好意思，这样好像没有什么用啊。。。</p>
<p>额。。。</p>
<p>我们这么处理，就会有用了。在读入字符串后，我们根据单个字符排序<br>（以每个后缀的第一个字符排序）</p>
<table>
<thead>
<tr>
<th align="center">a</th>
<th align="center">b</th>
<th align="center">a</th>
<th align="center">b</th>
<th align="center">a</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>接着向后合并相邻字符，再次排名，我们发现a原来排名是1，b原来是2，a向b合并后是1 2，b向a合并是2 1，我们把合并后的名次排名，便成了2和3（还有一个单字符的a，其实是补零排序）<br>对，我们这样每次排序两个排名组成的数即可。</p>
<table>
<thead>
<tr>
<th align="center">ab</th>
<th align="center">ba</th>
<th align="center">ab</th>
<th align="center">ba</th>
<th align="center">a</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a b</td>
<td align="center">b a</td>
<td align="center">a b</td>
<td align="center">b a</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">1 2</td>
<td align="center">2 1</td>
<td align="center">1 2</td>
<td align="center">2 1</td>
<td align="center">1 0</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>我们接着向后合并成4个字符</p>
<table>
<thead>
<tr>
<th align="center">abab</th>
<th align="center">baba</th>
<th align="center">aba</th>
<th align="center">ba</th>
<th align="center">a</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ab ab</td>
<td align="center">ba ba</td>
<td align="center">ab a</td>
<td align="center">ba</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">2 2</td>
<td align="center">3 3</td>
<td align="center">2 1</td>
<td align="center">3 0</td>
<td align="center">1 0</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">5</td>
<td align="center">2</td>
<td align="center">4</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>接着合并知道合并到最大的小于n的2的次方个字符，然后最后合并到n个</p>
<table>
<thead>
<tr>
<th align="center">ababa</th>
<th align="center">baba</th>
<th align="center">aba</th>
<th align="center">ba</th>
<th align="center">a</th>
</tr>
</thead>
<tbody><tr>
<td align="center">abab a</td>
<td align="center">baba</td>
<td align="center">aba</td>
<td align="center">ba</td>
<td align="center">a</td>
</tr>
<tr>
<td align="center">3 1</td>
<td align="center">5 0</td>
<td align="center">2 0</td>
<td align="center">4 0</td>
<td align="center">1 0</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">5</td>
<td align="center">2</td>
<td align="center">4</td>
<td align="center">1</td>
</tr>
</tbody></table>
<p>好了，我们排序完了。</p>
<p>可以发现我们一共整体排序了$\log{n}$次，一次排序的复杂度是$O(n\log{n})$。我们发现，这样我们就把整体的复杂度降到了$O(n\log^2{n})$</p>
<p>最后再举一个常见的例子，希望大家看完这个后能彻底明白这个排序的过程</p>
<p>Example: aabaaaab</p>
<p>第一次</p>
<table>
<thead>
<tr>
<th align="center">a</th>
<th align="center">a</th>
<th align="center">b</th>
<th align="center">a</th>
<th align="center">a</th>
<th align="center">a</th>
<th align="center">a</th>
<th align="center">b</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
</tbody></table>
<p>第二次</p>
<table>
<thead>
<tr>
<th align="center">aa</th>
<th align="center">ab</th>
<th align="center">ba</th>
<th align="center">aa</th>
<th align="center">aa</th>
<th align="center">aa</th>
<th align="center">ab</th>
<th align="center">b</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a a</td>
<td align="center">a b</td>
<td align="center">b a</td>
<td align="center">a a</td>
<td align="center">a a</td>
<td align="center">a a</td>
<td align="center">a b</td>
<td align="center">b</td>
</tr>
<tr>
<td align="center">1 1</td>
<td align="center">1 2</td>
<td align="center">2 1</td>
<td align="center">1 1</td>
<td align="center">1 1</td>
<td align="center">1 1</td>
<td align="center">1 1</td>
<td align="center">2 0</td>
</tr>
<tr>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">4</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
</tr>
</tbody></table>
<p>第三次</p>
<table>
<thead>
<tr>
<th align="center">aaba</th>
<th align="center">abaa</th>
<th align="center">baaa</th>
<th align="center">aaaa</th>
<th align="center">aaab</th>
<th align="center">aab</th>
<th align="center">ab</th>
<th align="center">b</th>
</tr>
</thead>
<tbody><tr>
<td align="center">aa ba</td>
<td align="center">ab aa</td>
<td align="center">ba aa</td>
<td align="center">aa aa</td>
<td align="center">aa ab</td>
<td align="center">aa b</td>
<td align="center">ab</td>
<td align="center">b</td>
</tr>
<tr>
<td align="center">1 4</td>
<td align="center">2 1</td>
<td align="center">4 1</td>
<td align="center">1 1</td>
<td align="center">1 2</td>
<td align="center">1 3</td>
<td align="center">2 0</td>
<td align="center">3 0</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">6</td>
<td align="center">8</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">5</td>
<td align="center">7</td>
</tr>
</tbody></table>
<p>第四次</p>
<table>
<thead>
<tr>
<th align="center">aabaaaab</th>
<th align="center">abaaaab</th>
<th align="center">baaaab</th>
<th align="center">aaaab</th>
<th align="center">aaab</th>
<th align="center">aab</th>
<th align="center">ab</th>
<th align="center">b</th>
</tr>
</thead>
<tbody><tr>
<td align="center">aaba aaab</td>
<td align="center">abaa aab</td>
<td align="center">baaa ab</td>
<td align="center">aaaa b</td>
<td align="center">aaab</td>
<td align="center">aab</td>
<td align="center">ab</td>
<td align="center">b</td>
</tr>
<tr>
<td align="center">4 2</td>
<td align="center">6 3</td>
<td align="center">8 5</td>
<td align="center">1 7</td>
<td align="center">2 0</td>
<td align="center">3 0</td>
<td align="center">5 0</td>
<td align="center">7 0</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">6</td>
<td align="center">8</td>
<td align="center">1</td>
<td align="center">2</td>
<td align="center">3</td>
<td align="center">5</td>
<td align="center">7</td>
</tr>
</tbody></table>
<p>排序完成</p>
<p>上面的过程用图表示为<br><img src="/pic/c2cec3fdfc03924586f1a8948694a4c27c1e25e0.jpg" alt=""></p>
<h3 id="优化2：基数排序"><a href="#优化2：基数排序" class="headerlink" title="优化2：基数排序"></a>优化2：基数排序</h3><p>如果我们用快排的话还是太慢，考虑到每一次排序我们都是在排两位数，所以我们用基数排序优化一下可以将排序优化到$O(n)$，这样总复杂度就降到了$O(n\log{n})$</p>
<p>怎么基数排序？</p>
<p>建两个桶，一个用来装个位排序，一个用来装十位排序，我们每次先把数加到个位桶里排序，再加到十位桶排序，这样就可以保证对于每一个十位桶里的数肯定是个位升序的。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们用s读入字符串，保存从s[1]到r[n]，长度为n，且最大值小于m。<br>为了函数操作的方便，约定除s[n]外所有的s[i]都大于0,s[n]=0。<br>函数结束后，结果放在sa数组中，从sa[1]到sa[n]。</p>
<p>函数的第一步，要对长度为1的字符串进行排序。<br>一般来说，在字符串的 题目中，s的最大值不会很大，所以这里使用了计数排序。<br>如果s的最大值很大，那么把这段代码改成快速排序。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    ++tong[x[i]=s[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    sa[tong[x[i]]--]=i;</span><br></pre></td></tr></table></figure>

<p>这里x数组保存的值相当于是rk值。下面的操作只是用x数组来比较字符的大小，所以没有必要求出当前真实的rk值。</p>
<p>接下来进行若干次基数排序，在实现的时候，这里有一个小优化。<br>基数排序要分两次，第一次是对个位桶排序，第二次是对十位桶排序。对十位桶排序的结果实际上可以利用上一次求得的sa直接算出，没有必要再算一次。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n-j+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    y[++p]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">if</span>(sa[i]&gt;j)</span><br><span class="line">        y[++p]=sa[i]-j;</span><br></pre></td></tr></table></figure>

<p>其中变量j是当前字符串的长度，数组y保存的是对个位桶排序的结果。然后要对十位桶进行排序</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">    tong[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    ++tong[x[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    sa[tong[x[y[i]]]--]=y[i],y[i]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>这样便求出了新的sa值。在求出sa后，下一步是计算rk值。这里要注意的是，可能有多个字符串的rk值是相同的，所以必须比较两个字符串是否完全相同，y数组的值已经没有必要保存，为了节省空间，这里用y数组保存rk。这里又有一个小优化，将x和y定义为指针类型，复制整个数组的操作可 以用交换指针的值代替，不必将数组中值一个一个的复制。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">swap(x,y);</span><br><span class="line">x[sa[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p:++p;</span><br></pre></td></tr></table></figure>

<p>其中cmp函数的代码是：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *s,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s[a]==s[b]&amp;&amp;s[a+l]==s[b+l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里可以看到规定 r[n]=0 的好处，如果 r[a]==r[b] ，说明以 r[a] 或 r[b]开头的长度为 l 的字符串肯定不包括字符 r[n] ，所以调用变量 r[a+l] 和 r[b+l]不会导致数组下标越界，这样就不需要做特殊判断。执行完上面的代码后， rk值保存在 x 数组中，而变量 p 的结果实际上就是不同的字符串的个数。这里可以加一个小优化，如果 p 等于 n ，那么函数可以结束。因为在当前长度的字符串 中 ，已经没有相同的字符串，接下来的排序不会改变 rk 值。例如说明中的第五次排序和另一个例子的第四次排序，实际上是没有必要的。</p>
<p>对上面的两段代码，循环的初始赋值和终止条件 可以这样写：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span>(p==n)<span class="keyword">break</span>;</span><br><span class="line">    m=p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在第一次的排序以后， rk 数组中的最大值小于 p ，所以让 m=p 。</p>
<p>下面是洛谷模板题的代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,sa[<span class="number">1000005</span>],rk[<span class="number">1000005</span>],tong[<span class="number">1000005</span>],x[<span class="number">1000005</span>],y[<span class="number">1000005</span>],wv[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *s,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s[a]==s[b]&amp;&amp;s[a+l]==s[b+l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ++tong[x[i]=s[i]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        sa[tong[x[i]]--]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-j+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            y[++p]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(sa[i]&gt;j)</span><br><span class="line">                y[++p]=sa[i]-j;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">            tong[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            ++tong[x[i]];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">            sa[tong[x[y[i]]]--]=y[i],y[i]=<span class="number">0</span>;</span><br><span class="line">        swap(x,y);</span><br><span class="line">        x[sa[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">        p=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">            x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p:++p;</span><br><span class="line">        <span class="keyword">if</span>(p==n)<span class="keyword">break</span>;</span><br><span class="line">        m=p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    da(<span class="number">257</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,sa[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><p>又叫LCP问题，lcp(i,j)为suffix(sa[i])与suffix(sa[j])的最长公共前缀</p>
<h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>显而易见的，我们可以得到</p>
<ul>
<li>lcp(i,j)=lcp(j,i)</li>
<li>lcp(i,i)=len(sa[i])=n-sa[i]+1</li>
</ul>
<p>这两条性质可以将lcp(i,j)的三种情况变简单</p>
<ul>
<li>i&lt;j 计算</li>
<li>i&gt;j 转化为lcp(j,i)即转化为i&lt;j</li>
<li>i=j 直接计算</li>
</ul>
<h3 id="LCP-Lemma"><a href="#LCP-Lemma" class="headerlink" title="LCP Lemma"></a>LCP Lemma</h3><ul>
<li>lcp(i,j)=min(lcp(i,k),lcp(k,j)) (对于任意1&lt;=i&lt;=k&lt;=j&lt;=n)</li>
</ul>
<p>证明：<br>设p=min(lcp(i,k),lcp(k,j))则lcp(i,k)&gt;=p,lcp(k,j)&gt;=p<br>设suffix(sa[i])=u,suffix(sa[k])=v,suffix(sa[j])=w</p>
<p>则u和v前p个字符相等，v和w前p个字符相等<br>所以u和w前p个字符相等，则lcp(i,j)&gt;=p</p>
<p>设lcp(i,j)=q&gt;p则q&gt;=p+1<br>p=min(lcp(i,k),lcp(k,j))，所以u[p+1]!=v[p+1]或v[p+1]!=w[p+1]<br>但是v[p+1]=w[p+1]，自相矛盾</p>
<p>所以lcp(i,j)&lt;=p</p>
<p>综上所述lcp(i,j)=p=min(lcp(i,k),lcp(k,j))</p>
<h3 id="LCP-Theorem"><a href="#LCP-Theorem" class="headerlink" title="LCP Theorem"></a>LCP Theorem</h3><ul>
<li>lcp(i,j)=min(lcp(k,k-1)) (对于任意1&lt;=i&lt;=k&lt;=j&lt;=n)</li>
</ul>
<p>结合LCP Lemma，lcp(i,j)=min(lcp(i,i+1),lcp(i+1,j))  </p>
<p>而lcp(i,i+1)=lcp(i+1,i)=lcp(i+1,(i+1)-1)</p>
<p>lcp(i+1,j)=min(lcp(i+1,i+2),min(lcp(i+2,i+3),…))</p>
<p>最终可以得到用k替换i+1、i+2、…最终得到lcp(i,j)=min(lcp(k,k-1))</p>
<h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><p>我们设height[i]=lcp(i,i-1),1&lt;i&lt;=n，显然height[1]=0</p>
<p>由LCP Theorem得lcp(i,j)=min(height[k]) i&lt;k&lt;=j即i+1&lt;=k&lt;=j</p>
<p>那怎么求height[i]？<br>设h[i]=height[rk[i]],同样的height[i]=h[sa[i]]</p>
<p>一条很重要的定理：<br>h[i]&gt;=h[i-1]-1</p>
<p>我们假设i-1的字符串排名前一位的字符串就为第j个（j=sa[rk[i-1]-1]），注意j不是第i-2个字符串。</p>
<p>第j个字符串和第i-1个字符串公共前缀为height[rk[i-1]]<br>第j+1个字符串和第i个的关系</p>
<ol>
<li>第j个和第i-1个首字母不同<br>那么j+1极可能在i前头，也可能在i后面，没有关系，因为height[rk[i-1]]=0，无论height[rk[i]]是多少都有height[rk[i]]&gt;=height[rk[i-1]]-1，也就是h[i]&gt;=h[i-1]-1</li>
<li>第j个和第i-1个首字母相同<br>那么由于j+1是j去除首字母得到的，i也是i-1去除首字母的到的那么显然j+1排在i前，同时，第j个字符串和第i-1个字符串的最长公共前缀为height[rk[i-1]]，那么显然k+1和i的最长公共前缀是height[rk[i-1]]-1<br>我们试想一下，对于比第i个字符串排名更靠前的那些字符串，与i最长公共前缀长度最长的肯定是与i紧邻的那个字符串，即sa[rk[i]-1]。但是我们前面求得，有一个排在i前面的字符串j+1，lcp(rk[i],rk[j+1])=height[rk[i-1]]-1<br>又因为height[rk[i]]=lcp(i,i-1)&gt;=lcp(i,j+1)<br>所以height[rk[i]]&gt;=height[rk[i-1]]-1，即h[i]&gt;=h[i-1]-1</li>
</ol>
<p>代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        rk[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(rk[i]==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            height[rk[i]]=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k)--k;</span><br><span class="line">        <span class="keyword">int</span> j=sa[rk[i]<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(j+k&lt;=n&amp;&amp;i+k&lt;=n&amp;&amp;s[i+k]==s[j+k])++k;</span><br><span class="line">        height[rk[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==j)<span class="keyword">return</span> n-sa[i]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;j)swap(i,j);</span><br><span class="line">    <span class="keyword">int</span> ans=INT_MAX;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;=j;k++)</span><br><span class="line">        ans=min(ans,height[k]);</span><br><span class="line">    <span class="keyword">return</span> ans;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Manacher</title>
    <url>/blog/string-manacher/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,p[<span class="number">51000100</span>],ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">51000100</span>],s[<span class="number">102000200</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxright=<span class="number">0</span>,mid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;maxright)</span><br><span class="line">            p[i]=min(p[<span class="number">2</span>*mid-i],maxright-i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i-p[i]&gt;=<span class="number">0</span>&amp;&amp;s[i+p[i]]==s[i-p[i]];p[i]++);</span><br><span class="line">        <span class="keyword">if</span>(p[i]+i&gt;maxright)</span><br><span class="line">            maxright=p[i]+i,mid=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>]=s[<span class="number">1</span>]=<span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i*<span class="number">2</span>+<span class="number">2</span>]=a[i];</span><br><span class="line">        s[i*<span class="number">2</span>+<span class="number">3</span>]=<span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n=n*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">    s[n]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">    n=<span class="built_in">strlen</span>(a);</span><br><span class="line">    change();</span><br><span class="line">    manacher();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=max(ans,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>AC自动机</title>
    <url>/blog/string-ACAutomation/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哇！AC自动机，莫非可以自动AC题目？不，这不可以，<del>不过可以参考我的一篇自动AC机的文章尝试自动AC题目，</del>叫AC自动机的原因是因为它的发明者名为Aho-Corasick，缩写为AC。。。</p>
<h1 id="AC自动机简单版"><a href="#AC自动机简单版" class="headerlink" title="AC自动机简单版"></a>AC自动机简单版</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">1000005</span>],ch[<span class="number">1000005</span>][<span class="number">26</span>],end[<span class="number">1000005</span>],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!ch[now][s[i]-<span class="string">'a'</span>])</span><br><span class="line">            ch[now][s[i]-<span class="string">'a'</span>]=++cnt;</span><br><span class="line">        now=ch[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    end[now]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>][i])</span><br><span class="line">        &#123;</span><br><span class="line">            fail[ch[<span class="number">0</span>][i]]=<span class="number">0</span>;</span><br><span class="line">            q.push(ch[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[x][i])</span><br><span class="line">            &#123;</span><br><span class="line">                fail[ch[x][i]]=ch[fail[x]][i];</span><br><span class="line">                q.push(ch[x][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ch[x][i]=ch[fail[x]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">acquery</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now=ch[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=now;t&amp;&amp;(~end[t]);t=fail[t])</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=end[t];</span><br><span class="line">            end[t]=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        build(s);</span><br><span class="line">    &#125;</span><br><span class="line">    fail[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    getfail();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,acquery(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="AC自动机加强版"><a href="#AC自动机加强版" class="headerlink" title="AC自动机加强版"></a>AC自动机加强版</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">155</span>][<span class="number">75</span>],t[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">1000005</span>],ch[<span class="number">1000005</span>][<span class="number">26</span>],end[<span class="number">1000005</span>],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">answer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num,pos;</span><br><span class="line">&#125;a[<span class="number">155</span>];</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(answer a,answer b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a.num==b.num?a.pos&lt;b.pos:a.num&gt;b.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(ch[x],<span class="number">0</span>,<span class="keyword">sizeof</span>(ch[x]));</span><br><span class="line">    fail[x]=<span class="number">0</span>;</span><br><span class="line">    end[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!ch[now][s[i]-<span class="string">'a'</span>])</span><br><span class="line">            ch[now][s[i]-<span class="string">'a'</span>]=++cnt,clean(cnt);</span><br><span class="line">        now=ch[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    end[now]=num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[<span class="number">0</span>][i])</span><br><span class="line">        &#123;</span><br><span class="line">            fail[ch[<span class="number">0</span>][i]]=<span class="number">0</span>;</span><br><span class="line">            q.push(ch[<span class="number">0</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch[x][i])</span><br><span class="line">            &#123;</span><br><span class="line">                fail[ch[x][i]]=ch[fail[x]][i];</span><br><span class="line">                q.push(ch[x][i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                ch[x][i]=ch[fail[x]][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">acquery</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now=ch[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=now;t;t=fail[t])</span><br><span class="line">            a[end[t]].num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt=<span class="number">0</span>,clean(cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">            a[i].num=<span class="number">0</span>;</span><br><span class="line">            a[i].pos=i;</span><br><span class="line">            build(s[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        fail[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        getfail();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>);</span><br><span class="line">        acquery(t);</span><br><span class="line">        sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n%s\n"</span>,a[<span class="number">1</span>].num,s[a[<span class="number">1</span>].pos]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i].num==a[i<span class="number">-1</span>].num)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s[a[i].pos]+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串哈希</title>
    <url>/blog/string-hash/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>字符串万能解法</p>
<p>模板题P3370</p>
<h1 id="单哈"><a href="#单哈" class="headerlink" title="单哈"></a>单哈</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> base=<span class="number">63l</span>l;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1505</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">0l</span>l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp=(tmp*base+s[i])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        v[i]=hash(s);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v+<span class="number">1</span>,v+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(v[i]!=v[i<span class="number">-1</span>])</span><br><span class="line">            ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="双哈"><a href="#双哈" class="headerlink" title="双哈"></a>双哈</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> base=<span class="number">63l</span>l;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod1=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod2=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1505</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hashta</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v1,v2;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(hashta a,hashta b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.v1==b.v1?a.v2&lt;b.v2:a.v1&lt;b.v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(hashta a,hashta b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> a.v1!=b.v1||a.v2!=b.v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;v[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash1</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">0l</span>l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp=(tmp*base+s[i])%mod1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash2</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">0l</span>l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp=(tmp*base+s[i])%mod2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        v[i]=(hashta)&#123;hash1(s),hash2(s)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(v+<span class="number">1</span>,v+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(v[i]!=v[i<span class="number">-1</span>])</span><br><span class="line">            ans++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="O-n-处理一维串，-O-1-提取子串哈希"><a href="#O-n-处理一维串，-O-1-提取子串哈希" class="headerlink" title="$O(n)$处理一维串，$O(1)$提取子串哈希"></a>$O(n)$处理一维串，$O(1)$提取子串哈希</h1><h2 id="单哈-1"><a href="#单哈-1" class="headerlink" title="单哈"></a>单哈</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e7</span>+<span class="number">7</span>,base=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> qb[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sa[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ht[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> h[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ht[i]=((ht[i<span class="number">-1</span>]*base)%mod+sa[i])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=((ht[i]-(ht[i-m]*qb[m])%mod)%mod+mod)%mod;</span><br><span class="line">        h[tmp]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        ht[i]=((ht[i<span class="number">-1</span>]*base)%mod+sa[i])%mod;</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;ht[m]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> h[ht[m]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qb[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">        qb[i]=(qb[i<span class="number">-1</span>]*base)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        sa[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">    hashta();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=q;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            sa[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hashon());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双哈-1"><a href="#双哈-1" class="headerlink" title="双哈"></a>双哈</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> moda=<span class="number">1e7</span>+<span class="number">7</span>,basea=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> modb=<span class="number">1e7</span>+<span class="number">9</span>,baseb=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> qba[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> qbb[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sa[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ht[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> hasha[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">bool</span> hashb[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ht[i]=((ht[i<span class="number">-1</span>]*basea)%moda+sa[i])%moda;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=((ht[i]-(ht[i-m]*qba[m])%moda)%moda+moda)%moda;</span><br><span class="line">        hasha[tmp]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashtb</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        ht[i]=((ht[i<span class="number">-1</span>]*baseb)%modb+sa[i])%modb;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=((ht[i]-(ht[i-m]*qbb[m])%modb)%modb+modb)%modb;</span><br><span class="line">        hashb[tmp]=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        ht[i]=((ht[i<span class="number">-1</span>]*basea)%moda+sa[i])%moda;</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;ht[m]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">bool</span> ta=hasha[ht[m]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        ht[i]=((ht[i<span class="number">-1</span>]*baseb)%modb+sa[i])%modb;</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;ht[m]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">bool</span> tb=hashb[ht[m]];</span><br><span class="line">    <span class="keyword">return</span> ta&amp;&amp;tb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qba[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">        qba[i]=(qba[i<span class="number">-1</span>]*basea)%moda;</span><br><span class="line">    qbb[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">        qbb[i]=(qbb[i<span class="number">-1</span>]*baseb)%modb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        sa[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">    hashta();</span><br><span class="line">    hashtb();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=q;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            sa[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hashon());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="O-n-2-处理二维串，-O-1-提取子矩阵哈希"><a href="#O-n-2-处理二维串，-O-1-提取子矩阵哈希" class="headerlink" title="$O(n^2)$处理二维串，$O(1)$提取子矩阵哈希"></a>$O(n^2)$处理二维串，$O(1)$提取子矩阵哈希</h1><p><a href="http://contest-hunter.org:83/contest/0x18%E3%80%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8D%E7%BB%83%E4%B9%A0/1806%20Matrix" target="_blank" rel="noopener">Contest Hunter 1806</a></p>
<h2 id="单哈-2"><a href="#单哈-2" class="headerlink" title="单哈"></a>单哈</h2><p>pts:90（其实模数好的话可以AC）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e7</span>+<span class="number">7</span>,base1=<span class="number">2</span>,base2=<span class="number">9191891</span>;</span><br><span class="line"><span class="keyword">int</span> qb1[<span class="number">1005</span>],qb2[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sa[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ht[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> h[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            ht[i][j]=((ht[i][j<span class="number">-1</span>]*base1)%mod+sa[i][j])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            ht[i][j]=((ht[i<span class="number">-1</span>][j]*base2)%mod+ht[i][j])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=b;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=((ht[i][j]-(ht[i][j-b]*qb1[b])%mod-(ht[i-a][j]*qb2[a])%mod+((ht[i-a][j-b]*qb1[b])%mod*qb2[a])%mod)%mod+mod)%mod;</span><br><span class="line">            h[tmp]=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">            ht[i][j]=((ht[i][j<span class="number">-1</span>]*base1)%mod+sa[i][j])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">            ht[i][j]=((ht[i<span class="number">-1</span>][j]*base2)%mod+ht[i][j])%mod;</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;ht[a][b]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> h[ht[a][b]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qb1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    qb2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">        qb1[i]=(qb1[i<span class="number">-1</span>]*base1)%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">        qb2[i]=(qb2[i<span class="number">-1</span>]*base2)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;a,&amp;b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            sa[i][j]=s[i][j]-<span class="string">'0'</span>;</span><br><span class="line">    hashta();</span><br><span class="line">    <span class="built_in">memset</span>(ht,<span class="number">0</span>,<span class="keyword">sizeof</span>(ht));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=q;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">                sa[i][j]=s[i][j]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hashon());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="双哈-2"><a href="#双哈-2" class="headerlink" title="双哈"></a>双哈</h2><p>pts:100</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> moda=<span class="number">1e7</span>+<span class="number">7</span>,basea1=<span class="number">2</span>,basea2=<span class="number">9191891</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> modb=<span class="number">1e7</span>+<span class="number">9</span>,baseb1=<span class="number">7</span>,baseb2=<span class="number">6498497</span>;</span><br><span class="line"><span class="keyword">int</span> qba1[<span class="number">1005</span>],qba2[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> qbb1[<span class="number">1005</span>],qbb2[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sa[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ht[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> hasha[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">bool</span> hashb[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            ht[i][j]=((ht[i][j<span class="number">-1</span>]*basea1)%moda+sa[i][j])%moda;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            ht[i][j]=((ht[i<span class="number">-1</span>][j]*basea2)%moda+ht[i][j])%moda;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=b;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=((ht[i][j]-(ht[i][j-b]*qba1[b])%moda-(ht[i-a][j]*qba2[a])%moda+((ht[i-a][j-b]*qba1[b])%moda*qba2[a])%moda)%moda+moda)%moda;</span><br><span class="line">            hasha[tmp]=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashtb</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            ht[i][j]=((ht[i][j<span class="number">-1</span>]*baseb1)%modb+sa[i][j])%modb;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            ht[i][j]=((ht[i<span class="number">-1</span>][j]*baseb2)%modb+ht[i][j])%modb;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=b;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=((ht[i][j]-(ht[i][j-b]*qbb1[b])%modb-(ht[i-a][j]*qbb2[a])%modb+((ht[i-a][j-b]*qbb1[b])%modb*qbb2[a])%modb)%modb+modb)%modb;</span><br><span class="line">            hashb[tmp]=<span class="number">1</span>;</span><br><span class="line">            <span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">            ht[i][j]=((ht[i][j<span class="number">-1</span>]*basea1)%moda+sa[i][j])%moda;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">            ht[i][j]=((ht[i<span class="number">-1</span>][j]*basea2)%moda+ht[i][j])%moda;</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;ht[a][b]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">bool</span> ta=hasha[ht[a][b]];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">            ht[i][j]=((ht[i][j<span class="number">-1</span>]*baseb1)%modb+sa[i][j])%modb;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">            ht[i][j]=((ht[i<span class="number">-1</span>][j]*baseb2)%modb+ht[i][j])%modb;</span><br><span class="line">    <span class="comment">// cerr&lt;&lt;ht[a][b]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">bool</span> tb=hashb[ht[a][b]];</span><br><span class="line">    <span class="keyword">return</span> ta&amp;&amp;tb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    qba1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    qba2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">        qba1[i]=(qba1[i<span class="number">-1</span>]*basea1)%moda;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">        qba2[i]=(qba2[i<span class="number">-1</span>]*basea2)%moda;</span><br><span class="line">    qbb1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    qbb2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">        qbb1[i]=(qbb1[i<span class="number">-1</span>]*baseb1)%modb;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">        qbb2[i]=(qbb2[i<span class="number">-1</span>]*baseb2)%modb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pre();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;a,&amp;b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            sa[i][j]=s[i][j]-<span class="string">'0'</span>;</span><br><span class="line">    hashta();</span><br><span class="line">    hashtb();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=q;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">                sa[i][j]=s[i][j]-<span class="string">'0'</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hashon());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie树，字典树</title>
    <url>/blog/string-trie/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>代码如下：<br>（Luogu P2580 于是他错误的点名开始了）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> son[N][<span class="number">26</span>],n,m,len,tot;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">bool</span> tag[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!son[now][s[i]-<span class="string">'a'</span>])</span><br><span class="line">            son[now][s[i]-<span class="string">'a'</span>]=++tot;</span><br><span class="line">        now=son[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    tag[now]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!son[now][s[i]-<span class="string">'a'</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        now=son[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!tag[now])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(vis[now])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    vis[now]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>【C++入门】01 环境设置</title>
    <url>/blog/Course/Cpp/Cpp-01/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>C++入门主要方便的是OI选手，OI选手一般的系统环境为Windows而竞赛环境为Linux。所以我们对环境的介绍会以Windows为主，Linux为辅。</p>
<h1 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h1><p>我们要将一份代码转化为计算机能读懂能运行的程序，必不可少的就是编译器。C++的编译器名字叫做g++，请注意gcc是C语言的编译器而不是C++语言的。</p>
<p>在Windows上，默认是没有安装g++的，所以我们需要手动安装g++。请通过下载安装<a href="http://www.mingw.org/" target="_blank" rel="noopener">MinGW</a>来安装g++。安装后，然后打开系统属性，选择“高级系统设置”（“高级”选项卡），找到“环境变量”并点击。<br><img src="/pic/Cpp01-01.png" alt=""><br>然后找到<strong>系统变量</strong>中的<code>Path</code>并编辑<br><img src="/pic/Cpp01-02.png" alt=""><br>在末尾以”;”分割地址，并输入g++的目录。<br><img src="/pic/Cpp01-03.png" alt=""><br>点击确定。在命令提示符输入g++并敲回车，如果提示</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">g</span>++: fatal <span class="keyword">error</span>: <span class="keyword">no</span> <span class="keyword">input</span> files</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure>

<p>则证明设置正确，如果提示</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">'g++' 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br></pre></td></tr></table></figure>

<p>则说明设置存在问题。</p>
<p>在Linux上，如果OI选手采用的是NOI Linux，那么是已经安装g++的。<br>如何查看其它版本Linux是否安装了g++？<br>打开终端，输入g++，如果提示</p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">g</span>++: fatal <span class="keyword">error</span>: <span class="keyword">no</span> <span class="keyword">input</span> files</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure>

<p>说明已经安装，若没有，可以在软件中心搜索g++安装，或者打开终端，输入</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install g++</span><br></pre></td></tr></table></figure>

<p>即可安装。</p>
<h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p>在Windows上，作为工程党的肯定要使用<a href="https://visualstudio.microsoft.com/zh-hans/" target="_blank" rel="noopener">Visual Studio</a>，但是作为OIer，入门级的装备肯定是Dev C++。<br>首先我们下载<code>Dev C++ 5.7.1</code>。为什么选择5.7.1版本？因为这个版本是支持MinGW的最稳定版本，而Dev C++最新的5.11版本是支持TDM-GCC的版本，由于存在bug导致调试不了，所以不推荐大家使用。<br>下载完以后我们安装，打开Dev C++便可以编写一份愉悦的代码。</p>
<p>同时，在Windows上，我也推荐使用Notepad++作为编辑器，Notepad++作为一款轻量化的编辑器但是支持许多插件，可以做到十分优秀的编辑效果。</p>
<p>在Linux上，大部分选手都推荐大家使用vim作为编辑器，这是因为vim有着极多的快捷键可以帮助你快速编辑甚至不需要用到鼠标。但是作为从Windows上Dev C++过渡到Linux的OIer，我的首选是系统自带的编辑器——gedit，它具有强大的插件后台，使得体验效果与Dev C++类似（除了不能使用方便的调试）。</p>
<p>同时，在Linux上，我也推荐使用Notepad++作为编辑器，但是Linux上没有Notepad++，我们只能采用一个替代版——Notepadqq。在终端执行以下命令，即可安装Notepadqq。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> snapd</span><br><span class="line">sudo snap <span class="keyword">install</span> <span class="comment">--classic notepadqq</span></span><br></pre></td></tr></table></figure>

<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>请在编辑器里编辑一份代码（可从提前尝试部分复制），然后保存成<code>.cpp</code>文件（例如a.cpp）。</p>
<p>请将命令行/终端路径调整到保存文件的目录然后执行以下命令进行编译</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">g++ <span class="selector-tag">a</span><span class="selector-class">.cpp</span> -o a</span><br></pre></td></tr></table></figure>

<p>其中a.cpp你是保存的文件名，-o表示不开启任何优化开关（以后会讲），a即你想要的可执行文件名字（在Windows的可执行文件扩展名必须为.exe而Linux则不是，所以执行此命令后Windows生成的程序会在末尾增加.exe而Linux不会）。</p>
<p>在Windows下，在命令行输入</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>.exe</span><br></pre></td></tr></table></figure>

<p>执行程序。</p>
<p>在Linux下，在终端输入</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="string">.</span><span class="comment">/a</span></span><br></pre></td></tr></table></figure>

<p>执行程序，其中的.表示当前目录./a即为当前目录下的a程序。</p>
<p>如果是复制提前尝试部分的代码，应该可以在命令行或终端看到</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> world!</span><br></pre></td></tr></table></figure>

<p>表示运行了该程序。</p>
<hr>
<h1 id="提前尝试"><a href="#提前尝试" class="headerlink" title="提前尝试"></a>提前尝试</h1><p>请在编辑器中输入以下代码并编译执行</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello, world!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>观察显示的的结果并尝试完成以下任务：</p>
<ol>
<li>思考这段代码中每行都表示什么意思</li>
<li>删除某些行测试出一个程序最短长度</li>
<li>试着修改显示内容甚至输出多行内容</li>
</ol>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>C++入门</tag>
      </tags>
  </entry>
  <entry>
    <title>二分</title>
    <url>/blog/Bisection/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="何为二分？"><a href="#何为二分？" class="headerlink" title="何为二分？"></a>何为二分？</h1><p>举个例子，你和你的<del>智障</del>好友两人在一起玩猜数字游戏，你的<del>智障</del>好友想一个$[1,100]$的数让你猜。</p>
<p>线性扫显然是从1猜到100，当然为了防止你的好友故意卡你想了个98之类的数，你也可以从100猜到1。这样一定能得到正确答案因为你一个也不漏地猜完了。</p>
<p>但是如果给你说个条件，比如他每次都会告诉你你的猜想比他的数大还是小，那么这时候你就可以二分了。</p>
<p>怎么二分呢？（假设他想的数是98）  </p>
<ol>
<li>你猜50，他告诉你猜小了</li>
<li>你猜75，他告诉你猜小了</li>
<li>你猜87，他告诉你猜小了</li>
<li>你猜93，他告诉你猜小了</li>
<li>你猜96，他告诉你猜小了</li>
<li>你猜98，他告诉你猜对了</li>
</ol>
<p>仔细分析对比两种方法，发现线性扫的每一步只会将答案存在区间缩小1（$[1,100]-&gt;[2,100]-&gt;[3,100]-&gt;[4,100]-&gt;…[97,100]-&gt; 98$然后找到答案，如果运继续搜是$[98,98]$），而二分的每一步都将答案区间缩小一半（$[1,100]-&gt;(50,100]-&gt;(75,100]-&gt;(87,100]-&gt;(93,100]-&gt;(96,100]-&gt; 98$，如果继续搜是$[98,100]-&gt;[98,99)-&gt;[98,98]$）</p>
<p>当然从时间复杂度角度来说，二分是$O(\log{n})$而线性扫是$O(n)$的，在n增大过程中显然也是二分快</p>
<h1 id="二分条件"><a href="#二分条件" class="headerlink" title="二分条件"></a>二分条件</h1><h1 id="关于写法"><a href="#关于写法" class="headerlink" title="关于写法"></a>关于写法</h1><p>额，我一般总是<del>写死循环然后改，所以我</del>先写成这样</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> l=minn,r=maxx;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(mid))</span><br><span class="line">    	l=mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    	r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="comment">//得到成立的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=minn,r=maxx;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(mid))</span><br><span class="line">    	r=mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    	l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//得到成立的最小值</span></span><br></pre></td></tr></table></figure>

<p>但是这样容易得到死循环程序，所以我们在mid条件里写+1即可。。。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> l=minn,r=maxx;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(mid))</span><br><span class="line">    	l=mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    	r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;<span class="comment">//得到成立的最大值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> l=minn,r=maxx;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(check(mid))</span><br><span class="line">    	r=mid;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    	l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//得到成立的最小值</span></span><br></pre></td></tr></table></figure>

<p>嗯，还是死循环怎么办？<br>额，<del>改成-1，</del>再调调吧，说不定check写错了呢？说不定是这题不满足连续性呢？</p>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>可持久化数据结构</title>
    <url>/blog/data-Persistent/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="主席树（可持久化线段树）"><a href="#主席树（可持久化线段树）" class="headerlink" title="主席树（可持久化线段树）"></a>主席树（可持久化线段树）</h1><h2 id="权值线段树"><a href="#权值线段树" class="headerlink" title="权值线段树"></a>权值线段树</h2><p>普通的线段树维护的是单点的值，比方说一个数组是{1,1,2,4,2,4,3,4}，开成普通线段树长这样</p>
<p><img src="/pic/2019-01-09_07-51-59-621000.png" alt=""></p>
<p>而权值线段树维护的是这个数出现了几次，就比方说上面的数组维护成了这样</p>
<p><img src="/pic/2019-01-09_07-55-44-679000.png" alt=""></p>
<h2 id="主席树"><a href="#主席树" class="headerlink" title="主席树"></a>主席树</h2><p>现在我们在树中插入一个数2</p>
<p><img src="/pic/2019-01-09_08-10-02-152000.png" alt=""></p>
<p>观察修改过后的权值线段树，发现只有红色的链有更改，所以我们有一个大胆的想法：可不可以每次只建一个链，由于根节点肯定不一样所以我们保存根节点的信息的数组就是保存版本信息的数组，这样就可以回到之前的版本，就十分的方便了。</p>
<p><img src="/pic/2019-01-09_08-12-58-370000.png" alt=""></p>
<p>这就是所谓的主席树即可持久化线段树。</p>
<p>板子如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tpos f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=getchar();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=getchar();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos,<span class="keyword">typename</span>... Tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x,Tpos &amp;...X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(x),scan(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop,<span class="keyword">typename</span>... Tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x,Tpop ...X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(x),<span class="built_in">putchar</span>(<span class="string">' '</span>),print(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,q,m,tot=<span class="number">0</span>,rt[<span class="number">200005</span>],a[<span class="number">200005</span>],p[<span class="number">200005</span>];</span><br><span class="line"><span class="comment">//n是原数个数，q是询问数，m是去重个数（即权值线段树叶子节点数），tot是节点总个数，rt是根版本号，a是原数组，p是去重数组 </span></span><br><span class="line"><span class="keyword">int</span> son[<span class="number">200000</span>&lt;&lt;<span class="number">6</span>][<span class="number">2</span>],size[<span class="number">200000</span>&lt;&lt;<span class="number">6</span>];</span><br><span class="line"><span class="comment">//son和size是线段树动态开点保存的信息，左右儿子和子树大小 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt=++tot;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    build(son[rt][<span class="number">0</span>],l,mid);</span><br><span class="line">    build(son[rt][<span class="number">1</span>],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;<span class="comment">//建立原树 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">newpoint</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> old,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt=++tot;</span><br><span class="line">    son[rt][<span class="number">0</span>]=son[old][<span class="number">0</span>];</span><br><span class="line">    son[rt][<span class="number">1</span>]=son[old][<span class="number">1</span>];</span><br><span class="line">    size[rt]=size[old]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(val&lt;=mid)newpoint(son[rt][<span class="number">0</span>],son[old][<span class="number">0</span>],l,mid,val);</span><br><span class="line">    <span class="keyword">else</span> newpoint(son[rt][<span class="number">1</span>],son[old][<span class="number">1</span>],mid+<span class="number">1</span>,r,val);</span><br><span class="line">&#125;<span class="comment">//建立新版本 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt1,<span class="keyword">int</span> rt2,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">if</span>(size[son[rt2][<span class="number">0</span>]]-size[son[rt1][<span class="number">0</span>]]&gt;=k)<span class="keyword">return</span> query(son[rt1][<span class="number">0</span>],son[rt2][<span class="number">0</span>],l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(son[rt1][<span class="number">1</span>],son[rt2][<span class="number">1</span>],mid+<span class="number">1</span>,r,k-size[son[rt2][<span class="number">0</span>]]+size[son[rt1][<span class="number">0</span>]]);</span><br><span class="line">&#125;<span class="comment">//询问</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(n,q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        scan(a[i]),p[i]=a[i];</span><br><span class="line">    sort(p+<span class="number">1</span>,p+n+<span class="number">1</span>);</span><br><span class="line">    m=unique(p+<span class="number">1</span>,p+n+<span class="number">1</span>)-p<span class="number">-1</span>;</span><br><span class="line">    build(rt[<span class="number">0</span>],<span class="number">1</span>,m);</span><br><span class="line">    <span class="comment">//去重建权值线段树 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,pos;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos=lower_bound(p+<span class="number">1</span>,p+m+<span class="number">1</span>,a[i])-p;</span><br><span class="line">        newpoint(rt[i],rt[i<span class="number">-1</span>],<span class="number">1</span>,m,pos);</span><br><span class="line">    &#125;<span class="comment">//主席树的每一个版本都是一个权值线段树 </span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,k;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	scan(x,y,k);</span><br><span class="line">        print(p[query(rt[x<span class="number">-1</span>],rt[y],<span class="number">1</span>,m,k)]),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;<span class="comment">//类似前缀和思想，求y-(x-1)==k排名的数即在[x,y]上排名第k的数 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="可持久化数组"><a href="#可持久化数组" class="headerlink" title="可持久化数组"></a>可持久化数组</h1><p>可持久化数组其实就是记录数组的历史版本，随时调用，随时修改。<br>所以我们可以利用主席树来维护，只不过主席树这次维护的不是第k名而是单点的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tpos f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=getchar();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=getchar();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos,<span class="keyword">typename</span>... Tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x,Tpos &amp;...X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(x),scan(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop,<span class="keyword">typename</span>... Tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x,Tpop ...X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(x),<span class="built_in">putchar</span>(<span class="string">' '</span>),print(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,q,tot=<span class="number">0</span>,rt[<span class="number">1000005</span>],a[<span class="number">1000005</span>];</span><br><span class="line"><span class="comment">//n是原数个数，q是操作数，tot是节点总个数，rt是根版本号，a是原数组</span></span><br><span class="line"><span class="keyword">int</span> son[<span class="number">1000005</span>*<span class="number">20</span>][<span class="number">2</span>],val[<span class="number">1000005</span>*<span class="number">20</span>];</span><br><span class="line"><span class="comment">//son和val是线段树动态开点保存的信息，左右儿子和单点的值 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt=++tot;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        val[rt]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    build(son[rt][<span class="number">0</span>],l,mid);</span><br><span class="line">    build(son[rt][<span class="number">1</span>],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;<span class="comment">//建立原树 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">newpoint</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> old,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt=++tot;</span><br><span class="line">    son[rt][<span class="number">0</span>]=son[old][<span class="number">0</span>];</span><br><span class="line">    son[rt][<span class="number">1</span>]=son[old][<span class="number">1</span>];</span><br><span class="line">    val[rt]=val[old];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        val[rt]=w;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)newpoint(son[rt][<span class="number">0</span>],son[old][<span class="number">0</span>],l,mid,x,w);</span><br><span class="line">    <span class="keyword">else</span> newpoint(son[rt][<span class="number">1</span>],son[old][<span class="number">1</span>],mid+<span class="number">1</span>,r,x,w);</span><br><span class="line">&#125;<span class="comment">//建立新版本 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> val[rt];</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)<span class="keyword">return</span> query(son[rt][<span class="number">0</span>],l,mid,x);</span><br><span class="line"> 	<span class="keyword">else</span> <span class="keyword">return</span> query(son[rt][<span class="number">1</span>],mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;<span class="comment">//询问</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(n,q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        scan(a[i]);</span><br><span class="line">    build(rt[<span class="number">0</span>],<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,v,op,x,w;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scan(v,op,x);</span><br><span class="line">  		<span class="keyword">if</span>(op==<span class="number">1</span>)scan(w),newpoint(rt[i],rt[v],<span class="number">1</span>,n,x,w);</span><br><span class="line">  		<span class="keyword">if</span>(op==<span class="number">2</span>)print(query(rt[i]=rt[v],<span class="number">1</span>,n,x)),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="可持久化并查集"><a href="#可持久化并查集" class="headerlink" title="可持久化并查集"></a>可持久化并查集</h1><p>可持久化并查集建立与可持久化数组的基础上，但是由于我们要建立可持久化，所以不能路径压缩。</p>
<p>所以我们考虑基本不常用的按秩合并，我们利用可持久化数组（基于主席树），维护并查集信息</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tpos f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=getchar();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=getchar();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos,<span class="keyword">typename</span>... Tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x,Tpos &amp;...X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(x),scan(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop,<span class="keyword">typename</span>... Tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x,Tpop ...X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(x),<span class="built_in">putchar</span>(<span class="string">' '</span>),print(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,q,tot=<span class="number">0</span>,rt[<span class="number">200005</span>],a[<span class="number">200005</span>];</span><br><span class="line"><span class="comment">//n是原数个数，q是操作数，tot是节点总个数，rt是根版本号，a是原数组</span></span><br><span class="line"><span class="keyword">int</span> son[<span class="number">200000</span>*<span class="number">20</span>][<span class="number">2</span>],fa[<span class="number">200000</span>*<span class="number">20</span>],level[<span class="number">200000</span>*<span class="number">20</span>];</span><br><span class="line"><span class="comment">//son、fa、level是按秩合并的 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt=++tot;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[rt]=l;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    build(son[rt][<span class="number">0</span>],l,mid);</span><br><span class="line">    build(son[rt][<span class="number">1</span>],mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;<span class="comment">//建立原树 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">newpoint</span><span class="params">(<span class="keyword">int</span> &amp;rt,<span class="keyword">int</span> old,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    rt=++tot;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[rt]=father;</span><br><span class="line">        level[rt]=level[old];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    son[rt][<span class="number">0</span>]=son[old][<span class="number">0</span>];</span><br><span class="line">    son[rt][<span class="number">1</span>]=son[old][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)newpoint(son[rt][<span class="number">0</span>],son[old][<span class="number">0</span>],l,mid,x,father);</span><br><span class="line">    <span class="keyword">else</span> newpoint(son[rt][<span class="number">1</span>],son[old][<span class="number">1</span>],mid+<span class="number">1</span>,r,x,father);</span><br><span class="line">&#125;<span class="comment">//建立新版本 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addlevel</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ++level[rt];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)addlevel(son[rt][<span class="number">0</span>],l,mid,x);</span><br><span class="line">    <span class="keyword">else</span> addlevel(son[rt][<span class="number">1</span>],mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;<span class="comment">//增加优先级 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> rt;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid)<span class="keyword">return</span> query(son[rt][<span class="number">0</span>],l,mid,x);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(son[rt][<span class="number">1</span>],mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;<span class="comment">//询问节点在版本上的位置 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfa</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> father=query(rt,<span class="number">1</span>,n,x);</span><br><span class="line">    <span class="keyword">return</span> fa[father]==x?father:getfa(rt,fa[father]);</span><br><span class="line">&#125;<span class="comment">//询问节点在版本上的祖先 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=getfa(rt[v],x),fy=getfa(rt[v],y);</span><br><span class="line">    <span class="keyword">if</span>(fx==fy)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(level[fx]&lt;level[fy])swap(fx,fy);</span><br><span class="line">    newpoint(rt[v],rt[v<span class="number">-1</span>],<span class="number">1</span>,n,fa[fy],fa[fx]);</span><br><span class="line">    <span class="keyword">if</span>(level[fx]==level[fy])</span><br><span class="line">        addlevel(rt[v],<span class="number">1</span>,n,fa[fx]);</span><br><span class="line">&#125;<span class="comment">//在版本上连接连个集合 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(n,q);</span><br><span class="line">    build(rt[<span class="number">0</span>],<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,op,x,y;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	scan(op);</span><br><span class="line">    	<span class="keyword">switch</span>(op)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">1</span>:scan(x,y);rt[i]=rt[i<span class="number">-1</span>];connect(i,x,y);<span class="keyword">break</span>;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">2</span>:scan(x);rt[i]=rt[x];<span class="keyword">break</span>;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">3</span>:scan(x,y);rt[i]=rt[i<span class="number">-1</span>];print(getfa(rt[i],x)==getfa(rt[i],y)),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="可持久化Trie树"><a href="#可持久化Trie树" class="headerlink" title="可持久化Trie树"></a>可持久化Trie树</h1><h1 id="可持久化平衡树"><a href="#可持久化平衡树" class="headerlink" title="可持久化平衡树"></a>可持久化平衡树</h1><h2 id="可持久化平衡树-1"><a href="#可持久化平衡树-1" class="headerlink" title="可持久化平衡树"></a>可持久化平衡树</h2><h2 id="可持久化文艺平衡树"><a href="#可持久化文艺平衡树" class="headerlink" title="可持久化文艺平衡树"></a>可持久化文艺平衡树</h2><h1 id="可持久化状链表"><a href="#可持久化状链表" class="headerlink" title="可持久化状链表"></a>可持久化状链表</h1><hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu使用心得</title>
    <url>/blog/About-Ubuntu/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>由于NOI官网给出的NOI Linux 1.4.1是基于Ubuntu 14.04.5的，因此我特意使用Ubuntu 14.04.5</p>
<p>$\huge\color{red}{Warning}$ 请不要尝试在上个世纪的电脑上执行以下操作，这可能会导致严重的“Kernel panic - not syncing: Attempted to kill init!”错误<br>$\huge\color{blue}{Attention}$ 请在执行下述操作时确认自己为根目录管理员（root）或拥有根目录管理权限</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装比较类似NOI Linux的安装过程，不再过多阐述。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>个人喜欢一些小设置。。。</p>
<h2 id="VMware-Tools"><a href="#VMware-Tools" class="headerlink" title="VMware Tools"></a>VMware Tools</h2><p>这个工具是方便虚拟机与Ubuntu之间交互的一个软件，NOI Linux自带了这个工具，但是我们的纯净版不带，所以我们来安装它。</p>
<p>首先点击VMware的菜单栏里的 虚拟机 ，点击 安装VMware Tools，然后下方会出来一个提示，让我们用文档管理打开VMwareTools-9.6.1-1378637.tar.gz，并执行vmware-install.pl。具体做法是先将那个包复制到桌面，然后双击打开，将文件夹拖到桌面，然后召唤终端，到文件夹下执行</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">./vmware-<span class="keyword">install</span>.pl</span><br></pre></td></tr></table></figure>

<p>然后出来提示就敲回车（无脑安装），最后出现VMware团队的祝福后重启Ubuntu再查看菜单栏，显示出 重新安装VMware Tools 就证明安装成功了。</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul>
<li>点开 全部设置 ，找 语言支持 ，更新</li>
<li>点 软件和更新 ，除了 提前释放出的更新 都勾上</li>
<li>点 详细信息 更新</li>
</ul>
<p>最后，我不更新到Ubuntu 16.04.1<del>（绝对不是因为更新不到）</del>。</p>
<h2 id="其他系统"><a href="#其他系统" class="headerlink" title="其他系统"></a>其他系统</h2><p>我之前安装的其他系统去哪儿了？<br>明明已经安装但是仍显示只有Ubuntu，这时候不要急，打开终端，输入</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">update</span>-grub2</span><br></pre></td></tr></table></figure>

<p>当屏幕出现 done 即表示完成，重启后就能看到其他系统了。</p>
<h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><p>Ubuntu的密码要求要有一定的强度，所以我们打开终端，输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -s</span></span><br></pre></td></tr></table></figure>

<p>得到了root权限。<br>然后输入原密码。<br>现在我们输入</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">passwd</span> XXX（你的用户名）</span><br></pre></td></tr></table></figure>

<p>输入新密码就好了，就比如我的密码就是六位纯数字，</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">*****</span>*（我又不傻）</span><br></pre></td></tr></table></figure>

<p>若修改成功，则会返回</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">password updated successfully</span></span><br></pre></td></tr></table></figure>

<p>如果忘记密码怎么办？<br>额，开机按Shift键，出现如下界面。（手速要快，Shift键要按时间久一点）<br>在开机菜单里选择Ubuntu高级选项（第二项）<br><img src="/pic/20161213175823266.jpg" alt=""><br>按回车键进入如下界面，然后选中有recovery mode的选项（第三项）<br><img src="/pic/20161213175947735.jpg" alt=""><br>按e进入如下界面，并找到图中红色框的</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">recovery nomodeset</span></span><br></pre></td></tr></table></figure>

<p><img src="/pic/20161213180034937.jpg" alt=""><br>删除，并在这一行的后面输入</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">quiet splash rw <span class="attribute">init</span>=/bin/bash</span><br></pre></td></tr></table></figure>

<p>后，按F10<br><img src="/pic/20161213180105876.jpg" alt=""><br>如果忘记用户名，可以键入</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">mount -o rw,remount /</span><br><span class="line"><span class="keyword">ls</span> <span class="string">/home</span></span><br></pre></td></tr></table></figure>

<p>查询用户名。</p>
<p>然后，在命令行输入</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">passwd</span> XXX（XXX是你的用户名）</span><br></pre></td></tr></table></figure>

<p>此时注意小键盘的指示灯是否亮起。。。<br>然后输入两遍123456（即新密码）来修改密码，若修改成功，则会返回</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">password updated successfully</span></span><br></pre></td></tr></table></figure>

<p>然后关机后正常启动，输入123456（即新密码）就能访问了</p>
<p><strong>切记不可使用此手段进行违法的密码破解行为</strong></p>
<h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><p>桌面主题选的是Radiance，壁纸选的是Foggy Forest (2560 x 1709)<br>应用程序-&gt;系统工具-&gt;首选项-&gt;主菜单，把所有勾点上<br>开启工作区，添加“显示桌面”图标到启动器<br>显示窗口菜单在窗口的标题栏</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>我主要安装的字体是 YaHei Consolas Hybrid</p>
<p>如何安装字体？<br>请在执行以下操作时确定自己为根目录管理员（root），也可以通过终端完成操作。</p>
<ol>
<li>在/usr/share/fonts/内创建一个文件夹</li>
<li>在文件夹内放入字体文件（最好是.ttf格式的文件，其他格式的我还没测试）</li>
<li>在终端执行下面两行命令<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mkfontscale</span></span><br><span class="line"><span class="attribute">mkfontdir</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>如何检验字体是否安装？  </p>
<p>请在终端执行：  </p>
<p>查看系统中的字体  </p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">fc-<span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<p>查看系统中的中文字体  </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">fc-list <span class="symbol">:lang=zh</span></span><br></pre></td></tr></table></figure>

<h2 id="Gedit"><a href="#Gedit" class="headerlink" title="Gedit"></a>Gedit</h2><p>作为一名OIer，我按NOI Linux使用心得介绍的方法配置完Gedit后，兴高采烈地敲好了hello world，正要编译，突然提示我g++没有安装。。。</p>
<p>我们点开Ubuntu软件中心，搜索<del>gcc然后发现已经安装，于是重新搜索</del>g++，安装它。重启打开Gedit后就能用了(＾－＾)V。</p>
<h2 id="FireFox"><a href="#FireFox" class="headerlink" title="FireFox"></a>FireFox</h2><p>正常设置字体，可以正常登陆洛谷<del>3.5</del>。</p>
<h2 id="LibreOffice"><a href="#LibreOffice" class="headerlink" title="LibreOffice"></a>LibreOffice</h2><p>其实这是一款非常好用的Office软件，因为它免费而且开源，相比WPS的来说快，相比MS的来说……</p>
<h2 id="Notepadqq"><a href="#Notepadqq" class="headerlink" title="Notepadqq"></a>Notepadqq</h2><p>其实这是Notepad++的非官方Linux版，然后是Notepadqq的官方版。。。<br>我们在终端执行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">update</span></span><br><span class="line">sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> snapd</span><br><span class="line">sudo snap <span class="keyword">install</span> <span class="comment">--classic notepadqq</span></span><br></pre></td></tr></table></figure>

<p>即可安装，可惜的是笔者暂未研究出如何使其具有编译能力，所以暂时无法分享OI用的技巧不过这仍是一款优秀的文本编辑器。</p>
<h2 id="Ubuntu的其他应用"><a href="#Ubuntu的其他应用" class="headerlink" title="Ubuntu的其他应用"></a>Ubuntu的其他应用</h2><p>按Super键（即键盘上的Win键）打开搜索，搜索</p>
<ul>
<li>AisleRiot接龙游戏：即Windows自带的纸牌</li>
<li>Mahjongg对对碰：即Windows自带的麻将消除游戏</li>
<li>Mines扫雷：即Windows自带的扫雷</li>
<li>Sudoku数独：即Windows10可以安装的数独</li>
</ul>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】运行linux的第四种方式：双系统</title>
    <url>/blog/lgrb-multi-os-install-ubuntu/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="运行linux的第四种方式：双系统"><a href="#运行linux的第四种方式：双系统" class="headerlink" title="运行linux的第四种方式：双系统"></a>运行linux的第四种方式：双系统</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://92602.blog.luogu.org/multi-os-install-ubuntu" target="_blank" rel="noopener">洛谷日报#109</a>，原作者为WarrenWN。</p>
</blockquote>
<hr>
<h1 id="双系统"><a href="#双系统" class="headerlink" title="双系统"></a>双系统</h1><p>前面日报里已经介绍了3种运行linux的工具，我来介绍第四种，这种方法能让你用上<strong>真正</strong>的linux。</p>
<h1 id="color-red-Warning"><a href="#color-red-Warning" class="headerlink" title="$\color{red}{Warning}$"></a>$\color{red}{Warning}$</h1><h1 id="text-color-red-这种方法可能会损坏您的电脑，请谨慎尝试"><a href="#text-color-red-这种方法可能会损坏您的电脑，请谨慎尝试" class="headerlink" title="$\text{\color{red}这种方法可能会损坏您的电脑，请谨慎尝试}$"></a>$\text{\color{red}这种方法可能会损坏您的电脑，请谨慎尝试}$</h1><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1544189391808&di=25bff4b12d82f13c607a5ff423787aba&imgtype=0&src=http%3A%2F%2Fb-ssl.duitang.com%2Fuploads%2Fitem%2F201408%2F11%2F20140811140831_ABX4v.thumb.700_0.jpeg" alt="不作死就不会死"></p>
<p>下面进入正题：</p>
<h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1. 准备"></a>1. 准备</h1><p>一个<strong>被格式化</strong>的USB（容量 &gt; 2GB 且已经插入电脑），提前备份好数据<br>良好的网络环境</p>
<h1 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a>2. 下载</h1><p>点击 <a href="https://www.ubuntu.com/download/desktop/thank-you?country=CN&version=18.04.1&architecture=amd64" target="_blank" rel="noopener">$\text{ Ubuntu 18.04.1 LTS 下载链接 }$</a></p>
<p>默默地等待下载完…</p>
<p>这么一个文件</p>
<p><img src="https://s1.ax1x.com/2018/12/07/F3Q4HS.png" alt="ubuntu-18.04.1-desktop-amd64.iso"></p>
<p>下载<a href="https://cn.ultraiso.net/uiso9_cn.exe" target="_blank" rel="noopener">UltralISO</a>并且无脑安装；</p>
<p>将之前的文件用UltralISO打开(如果提示尚未注册或尚未购买什么的点继续试用): </p>
<p><img src="https://s1.ax1x.com/2018/12/07/F3lig1.png" alt=""></p>
<p>点击 启动 ，再点击 制作硬盘映像;<br><img src="https://s1.ax1x.com/2018/12/07/F3l8Df.png" alt=""></p>
<p>给予管理员权限，然后在弹出窗口里点“写入”: </p>
<p><img src="https://s1.ax1x.com/2018/12/07/F310Fe.png" alt=""></p>
<h1 id="一定要确保U盘被格式化且里面的数据都已保存"><a href="#一定要确保U盘被格式化且里面的数据都已保存" class="headerlink" title="一定要确保U盘被格式化且里面的数据都已保存!!!"></a>一定要确保U盘被格式化且里面的数据都已保存!!!</h1><p>弹出窗口点“是”</p>
<p>等一段时间</p>
<p><img src="https://s1.ax1x.com/2018/12/07/F33IAO.png" alt=""></p>
<h1 id="完成后点终止，然后您的U盘就是一个标准的Ubuntu-18-04-1-LTS-安装U盘了！"><a href="#完成后点终止，然后您的U盘就是一个标准的Ubuntu-18-04-1-LTS-安装U盘了！" class="headerlink" title="完成后点终止，然后您的U盘就是一个标准的Ubuntu 18.04.1 LTS 安装U盘了！"></a>完成后点终止，然后您的U盘就是一个<del>标准的</del>Ubuntu 18.04.1 LTS 安装U盘了！</h1><h1 id="3-硬盘分区"><a href="#3-硬盘分区" class="headerlink" title="3. 硬盘分区"></a>3. 硬盘分区</h1><p>分出<strong>连续的</strong>至少50GB的磁盘空间，具体方法请自行百度（一般从C盘分出，Win+R 运行 “diskmgmt.msc” 之后对C盘单击压缩卷，压缩空间量填51200 (MB为单位)，然后确定，如果分不了的可以用其它工具如DiskGenius等,在此不一一解释）</p>
<p>我分了75GB</p>
<p><img src="https://s1.ax1x.com/2018/12/08/F3Dzy8.png" alt=""></p>
<h1 id="4-BIOS设置"><a href="#4-BIOS设置" class="headerlink" title="4. BIOS设置"></a>4. BIOS设置</h1><p>关掉电脑。重启，进入BIOS界面（各个电脑进入bios的方式不同，我的是惠普笔记本，就狂按f10）</p>
<p>Hp的BIOS长这个样子 </p>
<p><img src="https://s1.ax1x.com/2018/12/08/F3DoLD.jpg" alt=""></p>
<p>$\text{\color{blue}以下步骤各个电脑大致相同但是会有一些出入，在此仅演示Hp笔记本}$</p>
<p>右箭头切换菜单到System Configuration,选中Boot option（上箭头下箭头切换） </p>
<p><img src="https://s1.ax1x.com/2018/12/08/F3DfRx.jpg" alt=""></p>
<p>按回车后找到USB Boot选项（USB启动），打开它(选中按回车后进行选择，点Enabled)</p>
<p><img src="https://s1.ax1x.com/2018/12/08/F3Dhz6.jpg" alt=""></p>
<h1 id="找到”Secure-boot”-安全启动，关掉它"><a href="#找到”Secure-boot”-安全启动，关掉它" class="headerlink" title="找到”Secure boot”(安全启动，关掉它)"></a>找到”Secure boot”(安全启动，关掉它)</h1><p><img src="https://s1.ax1x.com/2018/12/08/F3D5QK.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2018/12/08/F3DWJ1.jpg" alt=""></p>
<h1 id="把USB-Diskette-on-Key-USB-Hard-Disk-挪到最上面（uefi启动挪UEFI-Boot-Order下的，Legacy启动把UEFI和Legacy的都挪一下，用f5-f6挪动）"><a href="#把USB-Diskette-on-Key-USB-Hard-Disk-挪到最上面（uefi启动挪UEFI-Boot-Order下的，Legacy启动把UEFI和Legacy的都挪一下，用f5-f6挪动）" class="headerlink" title="把USB Diskette on Key/USB Hard Disk 挪到最上面（uefi启动挪UEFI Boot Order下的，Legacy启动把UEFI和Legacy的都挪一下，用f5,f6挪动）"></a>把USB Diskette on Key/USB Hard Disk 挪到最上面（uefi启动挪UEFI Boot Order下的，Legacy启动把UEFI和Legacy的都挪一下，用f5,f6挪动）</h1><p>$\text{\color{green}提示：其它电脑这一步与HP具体操作不同。一句话概括:把可移动设备/USB挪到启动顺序的第一个}$</p>
<p><img src="https://s1.ax1x.com/2018/12/08/F3DIsO.jpg" alt=""></p>
<p>选中后f5</p>
<p><img src="https://s1.ax1x.com/2018/12/08/F3D7ee.jpg" alt=""></p>
<p>f10退出，Save changes选Yes</p>
<p><img src="https://s1.ax1x.com/2018/12/08/F3DHdH.jpg" alt=""></p>
<p>然后关机</p>
<h1 id="5-安装"><a href="#5-安装" class="headerlink" title="5. 安装"></a>5. 安装</h1><p>之前制作的USB插入电脑（不要开机！！！）</p>
<p>然后按开机</p>
<p><strong>如果一切正常</strong>，会出现</p>
<p><img src="https://s1.ax1x.com/2018/12/26/F2Pfeg.jpg" alt=""></p>
<p>如果没有，说明前面的步骤有问题,回到BIOS设置</p>
<p>选中Try Ubuntu,回车</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![Try Ubuntu](https://s1.ax1x.com/2018/12/08/F34Ye1.png)</span><br><span class="line"></span><br><span class="line">一个纯Ubuntu！</span><br><span class="line">等等，这个Ubuntu只是试用的...</span><br><span class="line"></span><br><span class="line">点击**Install Ubuntu 18.04.1 LTS**</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34Ci8.png)</span><br><span class="line"></span><br><span class="line">选语言。简体中文在倒数第3个</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34iRg.png)</span><br><span class="line"></span><br><span class="line">继续</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34AMj.png)</span><br><span class="line"></span><br><span class="line">这玩意也用不着改，继续(改成英语，美国也可以)</span><br><span class="line"></span><br><span class="line"># 下一步它会让你选择要不要连wifi，选择不要连，继续（图略）</span><br><span class="line">更新和其他软件:选择最小安装，其它默认</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34FzQ.png)</span><br><span class="line"></span><br><span class="line">然后坐等几分钟:</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34No6.png)</span><br><span class="line"></span><br><span class="line">这一步卡住一段时间是正常的，数分钟后下一步:</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34PJS.png)</span><br><span class="line"></span><br><span class="line"># 如果它说电脑上没有安装操作系统，就退出安装，回到“BIOS 设置”一步</span><br><span class="line">否则就选“其它选项”</span><br><span class="line"></span><br><span class="line">于是又过了一段时间</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34aFK.png)</span><br><span class="line"></span><br><span class="line">窗口左下角有一个**加号**，用于创建分区，选中在Windows里边分出的那一大块磁盘空间（至少50GB的，我分了75GB），点 +</span><br><span class="line"></span><br><span class="line">跳出来一个对话框</span><br><span class="line"></span><br><span class="line">## 分swap</span><br><span class="line">跳出对话框里，“用于”那栏的下拉菜单里选择“交换空间”，“大小”那一栏写自己物理内存的2倍（我4G的内存就写8192 **MB**，注意单位）,分区类型选主分区，空间起始位置 </span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34md0.png)</span><br><span class="line"></span><br><span class="line">点OK，等一会</span><br><span class="line"></span><br><span class="line">## 分EFI（貌似Legacy启动可以跳过这一步）</span><br><span class="line">选择那大块空间，再点“+” (为了让我少打些字，以后这两步不再详述)</span><br><span class="line"></span><br><span class="line">分区类型 逻辑分区，空间起始位置，用于EFI系统分区，大小500MB</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34eZq.png)</span><br><span class="line"></span><br><span class="line">## 分Boot</span><br><span class="line">创建分区方法如上，逻辑分区，空间起始位置，EXT4日志文件系统，挂载点 ```/boot```，(下拉菜单里选) 大小500MB</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34Ess.png)</span><br><span class="line"></span><br><span class="line">## 分rootfs</span><br><span class="line">创建分区方法如上，逻辑分区，空间起始位置，EXT4日志文件系统，挂载点 ```/```，(下拉菜单里选) 大小10G~16G，我填了12G（12248MB）</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34GLR.png)</span><br><span class="line"></span><br><span class="line">## 分home</span><br><span class="line">创建分区方法如上，逻辑分区，空间起始位置，EXT4日志文件系统，挂载点 ```/home```，(下拉菜单里选) 大小...自定（至少20480MB，我的空间多就分了30720MB，这个目录的作用类似于&apos;C:\Users&apos;） </span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F348y9.png)</span><br><span class="line"></span><br><span class="line">## 分usr</span><br><span class="line">创建分区方法如上，逻辑分区，空间起始位置，EXT4日志文件系统，挂载点 ```/usr```，(下拉菜单里选) 大小 剩下的都给它了（一般默认是占用全部空间的）</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34tdx.png)</span><br><span class="line"></span><br><span class="line">## 设置引导（Legacy跳过）</span><br><span class="line">下面安装启动引导器的设备:下拉选择刚刚分出来的EFI分区 (下拉菜单里显示设备名，你要让设备名和efi分区的设备名相同，如图，刚刚分出来EFI分区是/dev/sda10,下拉菜单里选择/dev/sda10)</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34noV.png)</span><br><span class="line"></span><br><span class="line">## 确定</span><br><span class="line">第几分区可能不一样，只要看看是不是格式化了6个分区且6个分区的类型对得上就行了（注意 继续是右边的按钮）</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34MJU.png)</span><br><span class="line"></span><br><span class="line">如果有警报什么的产生，退出安装，Windows里删除刚刚分出来的分区，重来一遍</span><br><span class="line"></span><br><span class="line">一切正常就会进入选择地区，就选择上海，不用更改</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34QWF.png)</span><br><span class="line"></span><br><span class="line">再点继续，最后一步，填写用户名</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34KiT.png)</span><br><span class="line"></span><br><span class="line">我的写完了是这样</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34lz4.png)</span><br><span class="line"></span><br><span class="line">继续，开始安装</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F34VLn.png)</span><br><span class="line"></span><br><span class="line">坐等,最后</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/08/F343QJ.png)</span><br><span class="line"></span><br><span class="line"># Finish!（先点继续试用，然后关机（关机键在右上角））</span><br><span class="line">**关机后拔掉USB**</span><br><span class="line"></span><br><span class="line"># 补充</span><br><span class="line">HP电脑还要在BIOS里改一下</span><br><span class="line"></span><br><span class="line">老样子进入BIOS的这个界面</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/09/F8yNNQ.jpg)</span><br><span class="line"></span><br><span class="line">选中OS Boot Manager 回车</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/09/F8ytAg.jpg)</span><br><span class="line"></span><br><span class="line">选中ubuntu，f5挪到Windows Boot Manager上面</span><br><span class="line"></span><br><span class="line">![](https://s1.ax1x.com/2018/12/09/F8yJHS.jpg)</span><br><span class="line"></span><br><span class="line">按f10退出这个界面，再按一次f10保存</span><br><span class="line"></span><br><span class="line"># OK!</span><br><span class="line"># $\text&#123;\color&#123;red&#125;补充&#125;$</span><br><span class="line"># 删除双系统（以删除Ubuntu为例）：</span><br><span class="line">参考 [这个链接](https://www.cnblogs.com/pualus/p/7835422.html)</span><br><span class="line"></span><br><span class="line">（虽然在我的电脑上直接KO掉Ubuntu的磁盘也不会出事（BIOS比较智能？））</span><br><span class="line"></span><br><span class="line">保险起见，还是先把启动项删了:</span><br><span class="line"></span><br><span class="line">管理员身份启动cmd，输入</span><br></pre></td></tr></table></figure>

<p>bcdedit /enum ALL</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">del_os1</span>](<span class="link">https://s1.ax1x.com/2018/12/08/F3DxQf.png</span>)</span><br><span class="line"></span><br><span class="line">（device和path被我涂掉了，标识符也被涂掉了一部分）</span><br><span class="line"></span><br><span class="line">有一个 description 类似或接近ubuntu的（高亮）</span><br><span class="line"></span><br><span class="line">把它的标识符一栏(那个&#123;0e ...... 963&#125;的东西)连着括号一起复制下来</span><br><span class="line"></span><br><span class="line">在cmd中输入（不要按回车）</span><br></pre></td></tr></table></figure>

<p>bcdedit /delete</p>
<p>```<br>敲一个空格，然后粘贴你刚刚复制的标识符，按回车</p>
<p><img src="https://s1.ax1x.com/2018/12/08/F3DvSP.png" alt="del_os2"></p>
<p>操作成功完成后，（我的电脑）就可以删除Ubuntu的磁盘空间啦！</p>
<p>（别的电脑我不知道行不行，最好还是用上面那个链接的方法）</p>
<h1 id="祝大家成功地装上一个真正的Ubuntu"><a href="#祝大家成功地装上一个真正的Ubuntu" class="headerlink" title="祝大家成功地装上一个真正的Ubuntu"></a>祝大家成功地装上一个真正的Ubuntu</h1>]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】Typora ---一款简洁的Markdown编辑器</title>
    <url>/blog/lgrb-typora-yi-kuan-jian-jie-di-markdown-bian-ji-qi/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="Typora-—一款简洁的Markdown编辑器"><a href="#Typora-—一款简洁的Markdown编辑器" class="headerlink" title="Typora —一款简洁的Markdown编辑器"></a>Typora —一款简洁的Markdown编辑器</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://rpdreamer.blog.luogu.org/typora-yi-kuan-jian-jie-di-markdown-bian-ji-qi" target="_blank" rel="noopener">洛谷日报#96</a>，原作者为顾z。</p>
</blockquote>
<hr>
<h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><h2 id="BB-in-front"><a href="#BB-in-front" class="headerlink" title="BB in front"></a>BB in front</h2><p>如果你是一个佛(lan)系(duo),内心文艺的程序员,并且你对其他Markdown编辑器的使用效果感觉不是很好的话,可以来了解一下该软件Typora.</p>
<h2 id="What‘s-this"><a href="#What‘s-this" class="headerlink" title="What‘s this?"></a>What‘s this?</h2><p>Typora是一款轻便简洁的Markdown编辑器,支持即时渲染技术,这也是与其他Markdown编辑器最显著的区别.<del>重点是免费!</del></p>
<p>什么是<strong>及时渲染技术</strong>？</p>
<p>即时渲染技术使得你写Markdown就像是写Word文档一样流畅,不像其他编辑器的有工具栏.</p>
<p><del>其实也是最近刚刚入手,也不太了解这个东西.</del></p>
<p>可能本人对该软件不算很熟悉,推荐这个软件的同时,也顺便深入了解一下这个编辑器,qwq</p>
<p>下载地址–&gt;<a href="https://www.typora.io/" target="_blank" rel="noopener">这里a</a></p>
<p>里面的下载位置可供选择有 Download Beta(OS X) <del>这个我不知道是啥啊</del> Windows 与 Linux</p>
<p>下载方式的话,下面有介绍的 qwq.</p>
<p>别心急嘛,先来看看这个宝贝。</p>
<h1 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h1><p>图标样式–&gt;</p>
<p>看样子就很简洁是不是qwq ?</p>
<p><img src="https://i.loli.net/2018/09/19/5ba188ab97113.png" alt=""></p>
<p>其实还有更简洁的↓</p>
<p>首先看这款软件与其他Markdown编辑器的不同.</p>
<p>其他编辑器一般上面都会有一些工具栏,类似这样(不是我说洛谷的Markdown不好啊,qwq-↓</p>
<p><img src="https://i.loli.net/2018/09/19/5ba188d433b6b.png" alt=""></p>
<p>而你在Typora上想找工具栏？不存在!</p>
<p>它的窗口样式是这样的(<strong>系统原生</strong></p>
<p><img src="https://i.loli.net/2018/09/19/5ba188e608109.png" alt=""></p>
<p>还有这样的(个人比较喜欢这样啦 qwq <strong>一体化</strong></p>
<p><img src="https://i.loli.net/2018/09/29/5baf671b01e0c.png" alt=""></p>
<p>刚刚打开Typora的话,界面会是系统原生的,如果你想换的话,打开左上角文件中的偏好设置修改就好啦~</p>
<p>如果你是一个熟悉Markdown的程序猿,那你一定知道这些简单的快捷键就能转变文本内容.</p>
<p>但是Typora的快捷键可能会略有不同(可能是,毕竟我没有使用过其他Markdown编辑器.</p>
<p>这里是Typora的部分快捷键(目前本人只用到这么多,不代表它没有其他快捷键.)↓</p>
<p>(具体去找Typora的快捷键的话可以进入每个工具栏中查看.)</p>
<p><img src="https://i.loli.net/2018/09/19/5ba1892637037.png" alt=""></p>
<p>这些操作大部分效果与其他Markdown编辑器的效果是一样的,这里只给出我认为不同的地方.</p>
<h1 id="1-表格"><a href="#1-表格" class="headerlink" title="1.表格"></a>1.表格</h1><p>我们可以在工具栏中的<strong>段落——表格</strong>中选择表格一栏,然后它会出现这样的窗口,在这里我们</p>
<p><strong>选择表格的行列数</strong></p>
<p><img src="https://i.loli.net/2018/09/19/5ba1895acf3f5.png" alt=""></p>
<p>得到 $4\times4$ 的表格是这样的.↓</p>
<p><img src="https://i.loli.net/2018/09/19/5ba189a03cc43.png" alt=""></p>
<p>即使<strong>输入之后我们也可以在文本内容中修改表格大小,选择左对齐,居中,右对齐操作.</strong></p>
<p>(就是左上角的调整表格</p>
<h1 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h1><p>Typora中插入代码的语法和其他Markdown没有区别.</p>
<p>例如我们插入一段c++代码</p>
<p>首先键入</p>
<p>｀｀｀c++ (这里是全角,真正实现的话是半角.</p>
<p>然后键入我们的内容即可.Typora会自动识别语言,并且带有代码高亮.</p>
<p><img src="https://i.loli.net/2018/09/19/5ba1913b13485.png" alt=""></p>
<p>界面上也有插入代码这一按钮咯 在界面的左下角</p>
<p>这个标志与其他Markdown编辑器是一样的.(应该不是很难认出)</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18a289ed7f.png" alt=""></p>
<h1 id="3-数学公式"><a href="#3-数学公式" class="headerlink" title="3.数学公式"></a>3.数学公式</h1><p>刚刚使用Markdown时并不知道如何插入数学公式.</p>
<p>因此写出来的数学公式会特别丑.</p>
<p>Typora依旧支持数学公式的插入.</p>
<h2 id="一-行内式"><a href="#一-行内式" class="headerlink" title="一. 行内式"></a>一. 行内式</h2><p><strong>如果你不知道如何插入数学公式, 我们只需要在数学公式前后加上＄ ＄即可</strong></p>
<p><strong>写法    效果</strong><br><strong>$公式$    a+b=ca+b=c</strong><br>但是当你安装好Typora之后,输入你想要的数学公式的时候,你会发现,</p>
<p>“哎?我数学公式呢?” “难道这玩意不支持?” “卸载吧.”</p>
<p>喂喂喂,别卸载啊,这不我来告诉你了.</p>
<p>顺着路径—&gt; <strong>文件——偏好设置——Markdown</strong>将其中的这些打上√就可以了.</p>
<p><img src="https://i.loli.net/2018/09/29/5baf65ccd71f5.png" alt=""></p>
<p>是不是挺神奇隐蔽的。(｡･ω･｡)</p>
<h2 id="二-行外式"><a href="#二-行外式" class="headerlink" title="二.行外式"></a>二.行外式</h2><p>这种公式显得比较大气,所以来放一下.</p>
<p>我们有<strong>快捷键</strong> $Ctrl+shift+m$</p>
<p>(但是貌似会打开输入法的设置面板？ QAQ</p>
<p>这里给一下示例 qwq</p>
<p><img src="https://i.loli.net/2018/09/26/5bab66fd211b3.png" alt=""></p>
<p>是不是感觉超级大气的说 ~</p>
<h1 id="4-主题"><a href="#4-主题" class="headerlink" title="4.主题"></a>4.主题</h1><p>这个时候,不出所料的话,你应该发现了这个东西.<code>主题</code><del>完了被发现了qwq</del></p>
<p>其实这个东西在<strong>系统原生</strong>窗口样式下就被摆在了倒数第二个位置的 qwq.</p>
<p>这是什么呢?,那我们就来看看里面的主题有什么样的.</p>
<p>打开发现,什么嘛,一堆文件夹. 那我们切换到<strong>系统原生窗口样式</strong>下打开主题,选择一下.</p>
<p>发现其中的主题有 $Github$， $Newsprint$， $Night$， $Pixyll$， $Whitey$</p>
<p>突然想试试各个主题的心有没有qwq.</p>
<p>这里给出四个主题的图qwq (图片来自Typora官网)</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18af717baa.png" alt=""></p>
<p>从左到右依次是  $Github$， $Newsprint$， $Night$， $Pixyll$， $Whitey$(应该是)</p>
<p>视觉效果来看的话, $Github$ 版本的应该是最好用的.(个人认为qwq)</p>
<p>$Night$ 的话背景是黑色的.</p>
<p>$Newsprin$ 背景略微泛黄.(是为了护眼?)</p>
<p>后两个主题的话,我也并没有感到有什么不同.</p>
<p><strong>然而你以为主题只有这五个?</strong></p>
<p>实际上我们可以<strong>自定义主题!</strong> (前提是你有网页设计的基础咯)</p>
<p>Typora支持CSS样式自定义主题设置.(所以说你要有一些网页设置的基础了 emmm)</p>
<p>这里因为本人不才,并不会写CSS代码,所以不打算深入研究.</p>
<p>刚刚在我们勾选数学公式的时候会出现这个东西↓</p>
<p>//如果你会CSS代码,那这应该不叫事.qwq</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18b470867e.png" alt=""></p>
<p><strong>下面这些话皆为引用</strong></p>
<p>这个时候只要点击进去,将内置的任意一个CSS文件复制并重命名自己需要的名字,然后在里面修改不同格式即可.</p>
<p><strong>PS:</strong>不要修改内置的几个CSS文件,因为Typora每次在升级的时候都会覆盖缺省的CSS,导致修改失败.</p>
<h1 id="5-文本导出"><a href="#5-文本导出" class="headerlink" title="5.文本导出"></a>5.文本导出</h1><p>文章用Typora写出之后,我们需要导出文章.</p>
<p>Typora支持十多种文本格式的导出.(HTML,PDF,Word文档 \cdots⋯ )</p>
<p>同时他还能将文本导出为图片(tql!!!)</p>
<p>根据路径<strong>文件——导出</strong>里面可供选择有很多.</p>
<p>注意当我们将文章导出为 wordword 时,我们是需要安装 pandocpandoc 的,这个时候就根据 TyporaTypora 的提示去做即可咯。</p>
<p>(感谢@Skqliao指出)</p>
<h1 id="6-文字高亮"><a href="#6-文字高亮" class="headerlink" title="6.文字高亮."></a>6.文字高亮.</h1><p>这个才是最骚好玩的好不好 qwq</p>
<p>你看 当我们在设置中打开了文字高亮.</p>
<p>效果就是这样</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18c118e2c9.png" alt=""></p>
<p>//话说为啥是黄色 emmm</p>
<h1 id="7-专注模式-and-打字机模式"><a href="#7-专注模式-and-打字机模式" class="headerlink" title="7.专注模式 and 打字机模式."></a>7.专注模式 and 打字机模式.</h1><p><strong>专注模式(Focus Mode)</strong></p>
<p>在这个模式下,当你在编辑某一行文字的时候其他行会变成灰色.</p>
<p>(简单来说:让你知道你现在在哪一行打字 .) 快捷键为 $Ctrl + shift +8$</p>
<p>效果是这样的 ↓</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18c3b8d2dc.png" alt=""></p>
<p><strong>与专注模式搭配的话，当然还是全屏模式</strong>最好啦　qwq</p>
<p>如果你是一个文艺的程序猿,喜欢在无聊的时候敲敲文章,那打开专注模式,切换到全屏模式 (F11)(F11)</p>
<p>在一个连工具栏都没有的Typora中,你当然会敲的超舒服的!</p>
<p><strong>打字机模式(Typewriter Mode )</strong></p>
<p>这是一个很良心的模式啦,能有效保护颈椎.<del>(保健</del></p>
<p>打开这个功能的话,你的光标会始终处于屏幕中间,我们的眼光就能正对屏幕中央.</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18c83d0635.png" alt=""></p>
<p>这里可能没办法表示出光标位置,但这个功能下的Typora,会一直将我们的光标放在屏幕中央(或者说是界面中央?)</p>
<p>这样就很是保持健康<del>保健</del> qwq.</p>
<h1 id="8-实时的字数统计"><a href="#8-实时的字数统计" class="headerlink" title="8.实时的字数统计"></a>8.实时的字数统计</h1><p>同Word一样,Typora也支持实时字数统计. 但是Word的字数统计是放在左下角的,而Typora的放在右下角. 它的样子是这样的.↓</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18cad41954.png" alt=""></p>
<p>是不是也感觉很简洁(好像Word的也很简洁)</p>
<h1 id="9-大纲视图"><a href="#9-大纲视图" class="headerlink" title="9.大纲视图"></a>9.大纲视图</h1><p>Word支持的大纲预览,Typora也有!</p>
<p>顺着路径视图——大纲视图打开即可 ,当然左下角的按钮也可以打开</p>
<p>当然也有快捷键 $Ctrl+shift+1$</p>
<p>打开之后是这样子的↓</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18ccfd894c.png" alt=""></p>
<p>如果你希望导出文档的时候就带目录结构,插入TOC插件即可啦!</p>
<h1 id="下载方式"><a href="#下载方式" class="headerlink" title="下载方式"></a>下载方式</h1><p>再放一下Typora<a href="https://www.typora.io/" target="_blank" rel="noopener">下载地址</a></p>
<p>(听我bb这么多是不是已经想下载Typora了!)</p>
<p>进入Typora官网之后,我们下滑,直到这里↓</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18dc345d63.png" alt=""></p>
<p>选中你的下载方式,这里以 $Windows$ 为例</p>
<p>进入,选择 $X64$ 　or $X32$</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18e4ec7e90.png" alt=""></p>
<p>下载时间可能有些长(可能是我网速慢?6min。</p>
<p>然后会出现这样的页面↓</p>
<p><img src="https://i.loli.net/2018/09/19/5ba18f0ade5a7.png" alt=""></p>
<p>打上√的话,是<strong>创造桌面快捷方式</strong></p>
<p>然后 $next$ ,下面这个页面本人就看不懂了.</p>
<p>所以直接 $Install$ 然后就开始安装了!</p>
<p>安装完毕之后,我们就能使用了!</p>
<h2 id="BB-in-last"><a href="#BB-in-last" class="headerlink" title="BB in last"></a>BB in last</h2><p>作为一款Markdown文本编辑器,如果你熟练掌握Markdown的语法,那使用起来一定是得心应手。</p>
<p>但是Typora相较于其他Markdown编辑器还是有一些缺点的</p>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>比如说,Typora不支持裁剪图片,不能设置图片格式等等等一系列问题.</p>
<p>此时Word大喊一声辣鸡,加油.</p>
<h2 id="换个角度来讲"><a href="#换个角度来讲" class="headerlink" title="换个角度来讲"></a>换个角度来讲</h2><p>Typora与其他Markdown编辑器的追求应该是不同的.</p>
<p>因此一些功能,现在Typora不支持的话也无可厚非(这里应该是用这个词吧 qwq</p>
<p>而根据每个人对编辑器的使用效果的追求不同.</p>
<h2 id="适应人群"><a href="#适应人群" class="headerlink" title="适应人群"></a>适应人群</h2><p>Typora的适合人群应该是那些文(lan)艺(duo)程序猿们啦</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Typora还有其他许多功能,本人并没有发现qwq.</p>
<p>有些没有介绍的功能,Typora中与其他的Markdown编辑器是一样的.</p>
<p>上面只是介绍了一部分哦 (￣▽￣)／</p>
<p>该软件还是比较好用的,如果我发现新的功能还回来UPD的 qwq</p>
<hr>
<p>本文参考了不少网络上的文章,就不一一放出了.(其实我也忘了 qwq)</p>
<p>感谢Typora开发者,即网络上一些博客的作者,还要感谢<a href="https://www.luogu.org/space/show?uid=13091" target="_blank" rel="noopener">ghj1222</a> and <a href="https://www.luogu.org/space/show?uid=88127" target="_blank" rel="noopener">enceladus</a>的帮助.</p>
<p><del>要不然我这么弱肯定写不出来这篇文章</del> qwq</p>
]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】在你的Android手机上运行Linux</title>
    <url>/blog/lgrb-play-linux-on-your-android-phone/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="在你的Android手机上运行Linux"><a href="#在你的Android手机上运行Linux" class="headerlink" title="在你的Android手机上运行Linux"></a>在你的Android手机上运行Linux</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://www.luogu.org/blog/wendster/play-linux-on-your-android-phone" target="_blank" rel="noopener">洛谷日报#94</a>，原作者为wendster。</p>
</blockquote>
<hr>
<p>既然日报里已经有两种“非正常”跑Linux的方法了，我再放一个貌似也不要紧……（吐槽一波为何日报上的VMware还是10的版本，太旧了吧）</p>
<p>之前试过许多方法（也就几种），像什么Complete Linux Installer，Debian noroot，利用已有的Linux构造Bootstrap之类，要么就是复杂得要命（比如Debian上的Bootstrap，调了半天没有调出来），要么就是鸡肋，直到发现了一款叫做Linux Deploy的软件。</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2973309071.jpg" alt="1.jpg"></p>
<p>这款软件是需要root才能运行的（作者的劝告：没有root的童鞋虽然可以使用Termux，但是Termux没有Linux Deploy好。Termux不同于Linux Deploy。Termux采用proot，无需root便可运行，但相比使用chroot的Linux Deploy，Termux运行速度慢，功能少，可定制度低，只有一种系统，所以还是root一下，使用Linux Deploy吧。），而且你需要安装好busybox。（官方是这么说的，不过没安装好像也没事，不过还是建议安装一下，反正容易得很）</p>
<p>看来这款软件的先置需求还是<del>不多的</del>，随随便便就能处理好是不是？</p>
<p>好吧，现在步入正题，开始安装Linux Deploy（欢迎花样作死）。</p>
<hr>
<h2 id="1-安装Linux-Deploy"><a href="#1-安装Linux-Deploy" class="headerlink" title="1.安装Linux Deploy"></a>1.安装Linux Deploy</h2><p>虽然有些应用商店里有Linux Deploy，网上也可以下得到，但是版本估计都很旧，所以推荐到Google Play商店里下载。 为了顾及那些没有梯子的童鞋，作者<strong>贴心</strong>地提供了目前最新的Linux Deploy：<a href="https://wendster.win/pan/index.php?share/file&amp;user=1&amp;sid=Cd3ThYKg" target="_blank" rel="noopener">https://wendster.win/pan/index.php?share/file&amp;user=1&amp;sid=Cd3ThYKg</a></p>
<p>就像安装微信一样安装好它就行了。</p>
<p>然后打开……是这个样子的：</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/899796367.jpg" alt="28.jpg"></p>
<p>你看，上面都教你怎么安装了！（笑）</p>
<h2 id="2-配置Linux-Deploy"><a href="#2-配置Linux-Deploy" class="headerlink" title="2.配置Linux Deploy"></a>2.配置Linux Deploy</h2><p>如果你想要安装多个系统，建议更改一下配置文件的名称。（哎呀，强迫症又犯了，你们忽略我吧）</p>
<p>先点击左上的“恒等于号”</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3853134255.jpg" alt="29.jpg"></p>
<p>点击配置文件</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1755335854.jpg" alt="30.jpg"></p>
<p>点一下那支笔</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/462216913.jpg" alt="31.jpg"></p>
<p>既然这次我们要安装的是Ubuntu，那就写上Ubuntu好了……</p>
<p>更改好后点击确定</p>
<p>如果不想你的Linux运行时CPU休眠导致卡成龟，最好让其保持唤醒</p>
<p>先返回到这儿</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3853134255.jpg" alt="29.jpg"></p>
<p>点击设置</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3173883859.jpg" alt="32.jpg"></p>
<p>勾选“保持CPU唤醒”，顺便把“锁定Wi-Fi”也勾上吧，嘿嘿！</p>
<h2 id="3-设置安装选项"><a href="#3-设置安装选项" class="headerlink" title="3.设置安装选项"></a>3.设置安装选项</h2><p>在设置安装选项之前，需要看看手机的CPU架构和/data分区剩余空间</p>
<p>回到主页面，点击右上方的三个点</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/508697094.jpg" alt="58.jpg"></p>
<p>点击状态</p>
<p>然后就会滚出来很多行字</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2964048571.jpg" alt="37.jpg"></p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2780299096.jpg" alt="38.jpg"></p>
<p>比如，我的手机CPU是armv8l的，/data分区还剩15.9GB，这些信息都要记住，后面要用到</p>
<p>现在可以正式开始设置安装选项了，点击右下方的一个鬼畜的按钮</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1946116582.jpg" alt="33.jpg"></p>
<p>容器类型不用管，直接从发行版开始</p>
<p>由于这回我们要安装Ubuntu，那就选Ubuntu好了<del>（废话）</del></p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2132807448.jpg" alt="34.jpg"></p>
<p>接下来就是架构了，根据我们之前在状态里看到的CPU架构选择合适的架构</p>
<blockquote>
<p>一般有armv8字样的CPU是64位的，选择arm64或aarch64（看哪个有选哪个，这里是arm64,那就选arm64），其他的选armhf即可（除非你的手机老到炸裂，不过太老的手机是装不上Linux Deploy的），如果有些神机是i386或者x86_64（amd64）的，直接照着选就可以了（表示膜拜）</p>
</blockquote>
<p>比如我的手机是armv8l，就选arm64好了</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3557802290.jpg" alt="35.jpg"></p>
<p>至于发行版版本嘛，你自己选好了。由于我是更新狂，所以我选了最新的bionic（Ubuntu 18.04）（唉，强迫症又犯了，你们无视我吧 ^_^）</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2584764460.jpg" alt="39.jpg"></p>
<p>这四个版本代号分别对应着Ubuntu12.04，Ubuntu14.04，Ubuntu16.04和Ubuntu18.04（应该没人会去用Ubuntu12.04了吧）</p>
<p>现在到了设置源地址的时候了。由于官方的源在国外，所以你若不想调两天还调不好的话，还是不要用官方源吧。这里提供一个基本上是国内最快最全的源（中科大镜像站）：<a href="http://mirrors.ustc.edu.cn/ubuntu-ports" target="_blank" rel="noopener">http://mirrors.ustc.edu.cn/ubuntu-ports</a></p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/843037677.jpg" alt="40.jpg"></p>
<p>嗯，现在可以选择安装类型了。如果你之前看到的/data分区大于等于4G，建议选择目录，这样大概是选择镜像文件的运行速度的两至六倍。假如你的手机/data分区真的没空间了，但是你有一张存储卡，可以选择镜像文件，或者分区。</p>
<p>不过需要注意的是，由于你的存储卡一般是fat32格式的，所以<strong>无法存储大于4G</strong>的文件，所以镜像文件的大小<strong>不能超过4G</strong>。若选择分区的话，就不会出现这种问题，但是选择分区的最大问题就是你的卡里的文件会<strong>被清空</strong>，且<strong>无法在Windows上访问你的卡</strong>，因为它需要被格式化成ext3或ext4格式（具体选ext3还是ext4，取决于你的手机是否支持ext4，可以通过状态查看，看那个Supported FS有没有ext4即可，若连ext3都没有，那就只能选ext2了，不过这种手机实在太古老了，我保证连Linux Deploy都装不上……）。</p>
<p>还有，如果你选择了分区，一定要弄清你要安装到哪个分区，在状态最底部有一个Available partitions，会显示你的存储卡的位置，一般是/dev/block/mmcblkXpY（X和Y根据情况填写），<strong>注意核对分区大小和你的存储卡大小是否匹配</strong>，若你选错了分区，你就杯具了……</p>
<p>至于RAM选项，这是安装到内存里，虽然速度快，但是没有3到6个G内存不要选，而且一重启就没了（所以别选RAM了吧），还有，请忽视Custom那个选项，因为那个一点用都没有๑乛◡乛๑</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1327497990.jpg" alt="41.jpg"></p>
<p>由于我们选的发行版是Ubuntu，所以强迫症再次发作，手动分类改名设置安装路径QwQ</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1500434476.jpg" alt="42.jpg"></p>
<p>为了不出现因忘记其默认生成的超难记密码而连不上ssh的尴尬局面，强烈建议修改用户密码（用户名改不改随意）</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3568052358.jpg" alt="43.jpg"></p>
<p>你看，这个密码多好记？！</p>
<p>特权用户和DNS一般不用改，不过本地化是要改的（除非你喜欢全英文）</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/402408999.jpg" alt="47.jpg"></p>
<p>改成zh_CN.UTF-8即可</p>
<p>初始化和挂载都跳过，把SSH启用打上勾，否则连不上这个Ubuntu就尬了！</p>
<p>下面那个VNC先不要管（虽然我知道你很可能需要它），直接点左上角那个小箭头回到主页面</p>
<p>这个设置安装选项貌似很复杂，但是实际上还是很简单的，大约半分钟就可以配置好</p>
<h2 id="4-开始安装系统"><a href="#4-开始安装系统" class="headerlink" title="4.开始安装系统"></a>4.开始安装系统</h2><p>还是点击右上方的三个小点点</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/508697094.jpg" alt="58.jpg"></p>
<p>点击安装（废话）</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/446052666.jpg" alt="59.jpg"></p>
<p>肯定选择确定啦</p>
<p>然后就开始安装了……</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3090501869.jpg" alt="61.jpg"></p>
<p>根据手机性能的高低和网速的大小，安装时间4至30分钟不等</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2481069389.jpg" alt="62.jpg"></p>
<p>嘿嘿，我六分半就装完了(<del>˘▾˘)</del></p>
<p>哦，对了，出现下面这种情况（就是那个W：Couldn‘t什么的）赶紧按停止键重新安装，以免浪费时间（反正过了一段时间后快要安装完时它会报错让你重装）</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2481069389.jpg" alt="60.jpg"></p>
<p>建议安装完后重启一波再食用</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/601565979.jpg" alt="65.jpg"></p>
<p>请忽视时间的问题（逃）</p>
<h2 id="5-使用SSH连接容器"><a href="#5-使用SSH连接容器" class="headerlink" title="5.使用SSH连接容器"></a>5.使用SSH连接容器</h2><p>在Android上使用人数最多的SSH软件恐怕就是JuiceSSH了……</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3496878951.jpg" alt="2.jpg"></p>
<p><del>我在想这个软件的图标为什么那么像Lemon</del></p>
<p>像Linux Deploy一样，作者依然“贴心”地把下载链接给贴了出来：<a href="https://wendster.win/pan/index.php?share/file&amp;user=1&amp;sid=AsZ2y4uU" target="_blank" rel="noopener">https://wendster.win/pan/index.php?share/file&amp;user=1&amp;sid=AsZ2y4uU</a></p>
<p>这个软件打开之后是这个样子的：（请忽视一切诡异的东西吧）</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3470278250.jpg" alt="4.jpg"></p>
<p>先点击“连接”（保持忽视状态）</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/4204916576.jpg" alt="5.jpg"></p>
<p>点击那个有趣的加号（因为你点开JuiceSSH时是什么连接记录都没有滴，需要手动添加）</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/671712810.jpg" alt="6.jpg"></p>
<p>昵称随便填，比如我填了个Linux<del>（为什么不填个NOILinux呢）</del></p>
<p>地址填127.0.0.1或localhost（反正都是代表本机）</p>
<p>然后点击认证那个倒三角——新建认证</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/217025013.jpg" alt="7.jpg"></p>
<p>昵称随便填，比如我填了个Linux……</p>
<p>用户名是之前配置时那个用户名，我没有改，所以是android</p>
<p>密码就是那个好记的xxxxxx</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/456290526.jpg" alt="8.jpg"></p>
<p>填好之后是这个样子</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1739419340.jpg" alt="9.jpg"></p>
<p>私钥不用管，千万别点左上那个返回键，而是应该点右上的那个勾（否则就重来一遍吧）</p>
<p>然后就会返回到填写“新建连接”的页面，再点一下右上那个勾，回到主页面，在连接那儿点击刚刚保存的连接</p>
<p>然后是类似这个样子</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/668516204.jpg" alt="11.jpg"></p>
<p>不要管，点确定，然后是这个样子</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2010271511.jpg" alt="12.jpg"></p>
<p>点接受即可</p>
<p>接着就连接上啦，可以愉快地打命令啦啦啦</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2113815591.jpg" alt="13.jpg"></p>
<p>按音量-可以缩小字体</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/195869916.jpg" alt="14.jpg"></p>
<p>按音量+可以放大字体</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3765989965.jpg" alt="15.jpg"></p>
<p>皮皮真开心！</p>
<p>来，打个gcc</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2651165218.jpg" alt="18.jpg"></p>
<p>什么？居然没有gcc？</p>
<p>那就安装一个吧！</p>
<p>先sudo su一波</p>
<p>然后apt install gcc g++</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3361570747.jpg" alt="19.jpg"></p>
<p>点个y然后回车</p>
<p>然后就刷刷刷得跑起来了！</p>
<p>安装好了……</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3462739844.jpg" alt="20.jpg"></p>
<p>输入一个gcc -v，哈，gcc已经有了！</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3174968019.jpg" alt="21.jpg"></p>
<p>输入一个g++ -v，哈，g++也已经有了！</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3393068978.jpg" alt="22.jpg"></p>
<p>这下就可以编译了！</p>
<p>不过只能编译，不能编辑文件是什么鬼？那就安装一个vim吧！</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2998923706.jpg" alt="23.jpg"></p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2948046666.jpg" alt="24.jpg"></p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/851523187.jpg" alt="25.jpg"></p>
<p>哈，现在vim也可以用了！</p>
<h2 id="6-为容器启用图形化界面"><a href="#6-为容器启用图形化界面" class="headerlink" title="6.为容器启用图形化界面"></a>6.为容器启用图形化界面</h2><p>有的童鞋并不满足于终端，还希望像普通的Ubuntu一样有图形化界面。这很简单，只需要将我们之前忽略的VNC打开就可以了！</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1041918722.jpg" alt="50.jpg"></p>
<p>桌面选择轻量的LXDE，一是安装快，二是运行快，三是丑陋</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3688759713.jpg" alt="51.jpg"></p>
<p>现在返回到主页面，点击右上方的三个小点点。因为已经安装过基础系统了，所以不用重新安装系统，只需要安装要增加的软件包即可。说了这么多，其实就一句话：点击“配置”……</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/508697094.jpg" alt="58.jpg"></p>
<p>然后是等待～～～～～</p>
<p>好了，安装好了！</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/327581814.jpg" alt="63.jpg"></p>
<p>仍然建议重启一波哦QvQ</p>
<h2 id="7-配置并使用图形化界面"><a href="#7-配置并使用图形化界面" class="headerlink" title="7.配置并使用图形化界面"></a>7.配置并使用图形化界面</h2><p>要用VNC连接这个毒瘤Ubuntu，需要一款名曰VNCViewer的软件，作者已经贴心地帮忙准备好了QvQ：<a href="https://wendster.win/pan/index.php?share/file&amp;user=1&amp;sid=5BzEJ8FY" target="_blank" rel="noopener">https://wendster.win/pan/index.php?share/file&amp;user=1&amp;sid=5BzEJ8FY</a></p>
<p>打开之后是这个燕子的……</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/983765399.jpg" alt="69.jpg"></p>
<p>然后点击右下角那个加号</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3784610216.jpg" alt="70.jpg"></p>
<p>地址填127.0.0.1或localhost，Name就随便啦</p>
<p>然后点击CREATE，然后在主页面点击你创建的连接</p>
<p>会出现下面这个东西</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/4155667844.jpg" alt="72.jpg"></p>
<p>记得把它的勾去掉，否则每次都会弹出这个拥有着令人做噩梦的颜色的邪恶的提示</p>
<p>然后就要输密码，可以把Remember passwd勾上，下次就不用输入密码了</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1465911680.jpg" alt="73.jpg"></p>
<p>emmmm，密码就是那个好记的xxxxxx</p>
<p>然后，就进去了，这个软件会弹出一个使用教程，可以看也可以跳过，反正是全英文的教程</p>
<p>真正连上后的样子：</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1866064065.jpg" alt="74.jpg"></p>
<p>哎呀，下面的任务栏太小了！原来是VNC的分辨率调的太高了，调低一点就好了</p>
<p>先返回到配置系统界面</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1041918722.jpg" alt="50.jpg"></p>
<p>点击图形界面设置</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3792390454.jpg" alt="53.jpg"></p>
<p>哎呀，颜色深度怎么只有16位呢？还是换成24位全彩色以获得更好的视觉体验吧</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2242116312.jpg" alt="54.jpg"></p>
<p>好啦，回到正题。可以看到，分辨率调的非常高，高达1920x1080，要那么高分辨率干嘛？调低一点多好？就像这个样子，对于我的手机来说调到960x540比较好，那就调这么多呗</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/634576101.jpg" alt="68.jpg"></p>
<p>现在再次重启容器，连上VNC。嗯，现在好多了！</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3122975015.jpg" alt="75.jpg"></p>
<p>点一下启动器</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/385674386.jpg" alt="76.jpg"></p>
<p>谒！怎么中文都乱码了？原来是忘记安装中文字体了……</p>
<p>赶紧用SSH连上终端，敲上这么一打命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">update</span></span><br><span class="line">apt <span class="keyword">install</span> fonts-wqy-microhei -y</span><br></pre></td></tr></table></figure>

<p>这样中文乱码这种奇异的事件就不会再有了</p>
<p>为了让界面稍微好看一点，并且修复一下图标的问题，再打一波命令</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install</span> lubuntu-<span class="keyword">default</span>-<span class="keyword">session</span> lubuntu-<span class="keyword">default</span>-<span class="keyword">settings</span> lubuntu-extra-sessions lubuntu-icon-theme -y</span><br></pre></td></tr></table></figure>

<p>然后再次重启容器……</p>
<p>然后再次连上VNC……</p>
<p>好了，现在没有乱码了（咦，我的图怎么找不着了）</p>
<p>滑动屏幕操控鼠标点击左下角的飞鸟图案，然后点击首选项——自定义外观和体验</p>
<p>然后就会出现下面的界面</p>
<p>左边菜单选择Lubuntu-default，然后点击Apply</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/804647080.jpg" alt="77.jpg"></p>
<p>点击上方的图标主题，选择Lubuntu，然后点击Apply</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1513580375.jpg" alt="78.jpg"></p>
<p>点击上方的窗口边框，选择Lubuntu-default，然后点击Apply</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/4117659811.jpg" alt="79.jpg"></p>
<p>现在回到窗体，点击右下方的字体，左边往下翻，翻到文泉驿微米黑，点击OK</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/164613413.jpg" alt="80.jpg"></p>
<p>关掉自定义外观和体验，打开终端，顺便把字体也配置一下</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/3388132186.jpg" alt="81.jpg"></p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/1541211119.jpg" alt="82.jpg"></p>
<p>先sudo su一下来安装一个小软件……</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/2811926769.jpg" alt="83.jpg"></p>
<p>安装一个Vim用于编辑文件……</p>
<p><img src="https://wendster.win/blog/usr/uploads/2018/10/421068643.jpg" alt="84.jpg"></p>
<p>哦，忘了已经安装过Vim了！</p>
<p>现在就可以愉快地编程啦！如果有蓝牙键盘，码起代码来会更爽呢！</p>
<hr>
<p><strong>教程到这里就结束啦！更多高级玩法还期待你们去挖掘（坑）呢！（欢迎花样作死）</strong></p>
]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】轻量级编辑器透彻指南--Notepad++</title>
    <url>/blog/lgrb-ghj1222-likes-npp/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="轻量级编辑器透彻指南–Notepad"><a href="#轻量级编辑器透彻指南–Notepad" class="headerlink" title="轻量级编辑器透彻指南–Notepad++"></a>轻量级编辑器透彻指南–Notepad++</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://www.luogu.org/blog/user13091/ghj1222-likes-npp" target="_blank" rel="noopener">洛谷日报#81</a>，原作者为ghj1222。</p>
</blockquote>
<hr>
<p>Notepad++是Windows环境下的一款编辑器。比起VSCode等现代编辑器，Notepad++同样具备很多功能。Notepad++一个特点就是轻巧，方便在Windows环境中使用，且编辑功能强大。本文主要介绍Notepad++的配置过 程和一些使用技巧。</p>
<p>Notepad++的开发者是Don Hu(侯今吾)中国台湾人（反正是个巨佬就对了嘛）</p>
<p><del>切入正题前先扯淡</del></p>
<blockquote>
<p>我使用Noteapd++的理由：</p>
<p>为什么不用Dev-C++，大家不知道Dev-C++打中文注释时候，他自动给你往后面塞了一个空格吗，不知道Dev-C++经常会崩溃吗，不知道Dev-C++在不断撤销时候经常出锅吗，相比之下Notepad++更稳定</p>
<p>为什么不用VSCode，<del>我感觉VSCode太高大上了，本蒟蒻用不起</del>懒得配置那么多</p>
<p>在Windows下，我感觉Notepad++是一个很棒的软件</p>
<p>所以我选择了Notepad++</p>
</blockquote>
<p>下面是正题</p>
<h4 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h4><p>安装：打开<a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++官网</a>。进入<a href="https://notepad-plus-plus.org/download/v7.5.8.html" target="_blank" rel="noopener">下载页面</a>。如果官网上不去，大家可以使用搜索引擎的快照功能。</p>
<p>为了方便这里直接给出官方下载地址<a href="https://notepad-plus-plus.org/repository/7.x/7.5.8/npp.7.5.8.Installer.exe" target="_blank" rel="noopener">32位下载地址</a>。<a href="https://notepad-plus-plus.org/repository/7.x/7.5.8/npp.7.5.8.Installer.x64.exe" target="_blank" rel="noopener">64位下载地址</a>。（Notepad++ 7.5.8的安装包，如有更新请在下载页面查看）</p>
<p>Notepad++已经在10.15更新7.5.9版本，（笔者所在学校机房网太卡上不去Notepad++官网了，有需要可以自行下载）<del>我会告诉你Notepad++的各个版本区别不大吗</del></p>
<p>由于本文初稿写于九月，以下均为7.5.8版本（和最新版没啥区别）</p>
<p>下载下来安装包之后就是安装啦，相信大家都会的</p>
<p>下载后的安装包只有不到5MiB，比起VSCode精简多了(安装后也只有10MiB多一点)</p>
<p>打开安装包</p>
<p><img src="https://i.loli.net/2018/09/24/5ba89328eb574.png" alt=""></p>
<p>然后OK，下一步，注意这里有一个Localization没有选择，这个Localization指的是多国语言，选不选随便。</p>
<p><img src="https://i.loli.net/2018/09/24/5ba8932932144.png" alt=""></p>
<p>如果你要把Notepad++安装到可移动存储设备（说白了就是U盘，移动），要选上<code>Don&#39; t use %APPDATA%</code>。选择这个选项框后，Notepad++会把所有配置文件都和主程序放在一起。</p>
<p>第二个不用管。第三个是桌面图标大家都懂的</p>
<p><img src="https://i.loli.net/2018/09/24/5ba893294ae36.png" alt=""></p>
<p>完结撒花！</p>
<p><img src="https://i.loli.net/2018/09/24/5ba8932986c90.png" alt=""></p>
<h4 id="二、C-开发环境配置"><a href="#二、C-开发环境配置" class="headerlink" title="二、C++ 开发环境配置"></a>二、C++ 开发环境配置</h4><p>和别的多功能编辑器一样，Notepad++也可以编辑多种文件，支持多种语言的代码高亮。然鹅我们是要用Notepad++写程序，所以要配置一下开发环境，比如编译器<del>(透彻器)</del>什么的</p>
<h4 id="1-配置Notepad"><a href="#1-配置Notepad" class="headerlink" title="1.配置Notepad++"></a>1.配置Notepad++</h4><p>打开Notepad++，会发现默认是Courier New字体，而Windows较高版本代码字体选择Consolas字体会更漂亮<del>(透彻)</del>。选择菜单 \rightarrow→ 设置 \rightarrow→ 语言格式设置，把字体名称改为Consolas（如图），再把下面的“使用全局字体”选择上即可把字体设置为Consolas。相似地，在这里可以调整任意语言的代码高亮格式。在这里可以调整各种字体设置。</p>
<p><img src="https://i.loli.net/2018/09/24/5ba89329627aa.png" alt=""></p>
<p>我们再打开设置 \rightarrow→ 首选项，里面有一些常用选项。其中建议把“新建”中默认语言改为C++。“新建”中编码可以改为GB2312，这样我们新建的文件的文字编码就是GB2312了。（由于Dev-C++坑爹，只识别GB2312编码，如果编码设为UTF-8，中文在Dev-C++上无法正常显示，而且程序编译时候需要开启某开关否则无法正常显示）</p>
<h4 id="2-安装编译器"><a href="#2-安装编译器" class="headerlink" title="2.安装编译器"></a>2.安装编译器</h4><p>(已安装MinGW并配置path的同学可以跳过本步骤)</p>
<p>首先是下载编译器。如果我们已经安装了Dev-C++这类自带编译器的IDE，下载编译器这一步可以跳过。作为OIer，在Windows平台上我们一般使用MinGW编译器，可以在<a href="http://www.mingw.org/" target="_blank" rel="noopener">这里</a>获得，64位平台建议使用MinGW-w64，官网在<a href="http://www.mingw-w64.org/doku.php" target="_blank" rel="noopener">这里</a>。下载后选择gcc系列安装就行了。</p>
<p>然后需要配置下path，这样就可以直接在command prompt中输入g++运行了。Windows 7的环境变量配置很坑爹，相比之下Windows 10的环境变量配置比较便捷，但是大体步骤还是一样的，这里分别介绍一下。(Windows XP可以自己百度一下)</p>
<p>我们先找到g++的路径(一般是在编译器安装路径\bin里，如果是Dev-C++，就在Dev-C++安装路径内的MinGW\bin里)，把绝对路径复制到剪贴板。</p>
<blockquote>
<p>Windows 7:</p>
<p>桌面/开始菜单 $\rightarrow$ 计算机上右键 $\rightarrow$ 属性 $\rightarrow$ 高级系统设置 $\rightarrow$ 环境变量 $\rightarrow$ 系统变量里的变量Path，编辑系统变量，在后面追加一个刚才复制的绝对路径。注意要加上分号分割。这里面变量值可能有点多，可以先复制到Notepad++里再编辑以防止编辑错误(如果编辑错误就GG了，这里要谨慎小心)</p>
<p>Windows 10:</p>
<p>Windows 10的配置方式其实和Windows 7差不太多，只是更方便了。打开桌面/开始菜单 $\rightarrow$ 计算机上右键 $\rightarrow$ 属性 $\rightarrow$ 高级系统设置 $\rightarrow$ 环境变量 $\rightarrow$ 系统变量里的变量PATH，这里的配置是按照一个路径一个路径地列出来了，而不是全挤到一起了，更直观，也就更不容易出错</p>
</blockquote>
<p>这里给出一张Windows7和一张Windows10的图。注意是编辑变量<code>Path</code>，而不是新建一个变量</p>
<p><img src="https://i.loli.net/2018/09/24/5ba893297fbc3.png" alt=""></p>
<p><img src="https://i.loli.net/2018/09/24/5ba8932960510.png" alt=""></p>
<p>这样我们的g++的环境变量就配置好了。按<code>Win+R</code>输入<code>cmd</code>调出命令提示符，输入g++，如果提示<code>g++: fatal error: no input files compilation terminated.</code>，那么我们的安装g++并配置path就成功了。如果你看到<code>g++ 不是内部或外部.....</code>的东西那么g++就没有成功安装或配置环境变量。</p>
<h4 id="3-安装NppExec"><a href="#3-安装NppExec" class="headerlink" title="3.安装NppExec"></a>3.安装NppExec</h4><p>NppExec是可以直接在Notepad++编辑器里运行命令和程序的插件。我们可以利用Nppexec可以调用g++编译程序，执行程序。在<a href="https://sourceforge.net/projects/npp-plugins/files/NppExec/NppExec%20Plugin%20v0.6%20RC2/" target="_blank" rel="noopener">SOURCEFORGE</a>可以下载到NppExec的最新版(注意要对应 <strong>Notepad++</strong> 的位数下载，如果你的电脑是64位的但是安装了32位的Notepad++，应该下载32位的Nppexec)</p>
<p>下载之后解压。在Notepad++里选择设置 $\rightarrow$ 导入 $\rightarrow$ 导入插件，并选择解压后出来的DLL文件，这样NppEcec就成功地安装了。</p>
<p>注意要开启管理员模式安装插件，否则安装会失败。如果你的标题栏上有[Administrator]，那么说明你已经开启了管理员模式。</p>
<p>安装NppExec后，Notepad++的界面应该有一个控制台，但是它的默认字体十分难看，我们可以在插件 $\rightarrow$ NppExec $\rightarrow$ Change Console Font中调整字体。</p>
<h4 id="4-配置命令"><a href="#4-配置命令" class="headerlink" title="4.配置命令"></a>4.配置命令</h4><p>安装完NppExec后即可配置命令。选择插件-&gt;NppExec-&gt;Excute，在里面新增加一条命令并命名为<code>C++ Compile</code>：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npp_save</span><br><span class="line">g++ <span class="string">"<span class="variable">$(FULL_CURRENT_PATH)</span>"</span> -g -Wall <span class="attribute">-std</span>=c++98 <span class="attribute">-fexec-charset</span>=GB2312 -o <span class="string">"<span class="variable">$(CURRENT_DIRECTORY)</span>\$(NAME_PART).exe"</span></span><br></pre></td></tr></table></figure>

<p>这里解释一下这两条命令是什么意思。<figure class="highlight plain"><figcaption><span>```$(FULL_CURRENT_PATH)``` 是当前打开文件的完整绝对路径， ```$ (CURRENT_DIRECTORY)``` 是当前打开文件所在文件夹的绝对路径，```$(NAME_PART)```是当前文件的名称部分(去掉后缀名)。```-g```是生成调试信息(如果不需要使用gdb调试可以关闭这个开关)，```-Wall```是产生全部警告信息，```-std</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">然后再新建一条命令命名为`C++ Run`：</span><br></pre></td></tr></table></figure></p>
<p>cmd /c (cd /d “$(CURRENT_DIRECTORY)” &amp; start ConsolePauser “$(CURRENT_DIRECTORY)$(NAME_PART).exe”)</p>
<p>```<br>注意这里本来是可以使用下面的Console的，但是我在下面的Console调试程序的时候经常出锅，并且为了达到和Dev-C++类似的效果，这里借用了Dev-C++的ConsolePauser。Dev-C++的ConsolePauser就附在Dev-C++的安装目录下，为了使用我们把它复制到g++所在的目录中方便调用。如果你不想复制，你可以把上面的ConsolePauser改为绝对路径。</p>
<p>如果你喜欢用gdb调试，你也可以加一条<code>C++ Debug</code>，调用gdb，这里就省略了</p>
<p><img src="https://i.loli.net/2018/09/24/5ba8932977b4b.png" alt=""></p>
<h4 id="5-配置热键"><a href="#5-配置热键" class="headerlink" title="5.配置热键"></a>5.配置热键</h4><p>首先我们需要把刚才配置的命令放到热键区域：菜单栏 $\rightarrow$ 插件 $\rightarrow$ NppExec $\rightarrow$ Advanced Options…。在弹出窗口左下角的Associated script，选择我们刚才配置的C++ Compile，点下面的Add/Modify即可。由于某些奇怪的原因，你需要重新打开这个窗口来添加下一个命令。这样我们就可以在快捷键菜单中找到我们刚才配置的命令了。</p>
<p>打开菜单栏 $\rightarrow$ 宏 $\rightarrow$ 管理快捷键菜单，选择插件命令，找到你刚才配置的两个命令—<code>C++ Compile</code>和<code>C++ Run</code>，点快捷键一栏即可为他们配置快捷键。此处可以随意配置，个人建议将<code>C++ Compile</code>配置为<code>F9</code>，<code>C++ Run</code>配置为<code>F10</code>，这符合Dev-C++的习惯(一些省份NOIP可以使用Windows，Windows上有Dev-C++)，还有是这两个按键不会引起热键冲突。如果你还想配置”编译运行”、”调试”等命令，配制方法和上面差不了多少，这里不再阐述。</p>
<p><img src="https://i.loli.net/2018/09/24/5ba8948257c21.png" alt=""></p>
<h4 id="6-编写代码"><a href="#6-编写代码" class="headerlink" title="6.编写代码"></a>6.编写代码</h4><p>此时<code>trl+N</code>新建一个文档，敲一发Hello World(for dalao:动态树)，保存(注意这里一定要写全<code>.cpp</code>，因为Notepad++一个坑爹的设置，如果不写文件名，它默认是<code>.h</code>，g++可编译，但是生成的不是exe格式)，编译运行。如果你的代码成功运行了，那么就配置成功了！以后就可以嗨皮地使用Notepad++写代码了！</p>
<p><img src="https://i.loli.net/2018/09/24/5ba8932985a37.png" alt=""></p>
<h4 id="三、玩转Notepad"><a href="#三、玩转Notepad" class="headerlink" title="三、玩转Notepad++"></a>三、玩转Notepad++</h4><p>作为一款轻量级编辑器，Notepad++还是有很多方便之处的。这里就xjb简单地介绍几个，大家有兴趣可以自己玩玩。<del>(反正我知道你看到这里还是没有兴趣用的Emm)</del></p>
<h4 id="1-文字编码"><a href="#1-文字编码" class="headerlink" title="1.文字编码"></a>1.文字编码</h4><p>你还在为”锟斤拷”之类的乱码发愁吗？有了Notepad++，你再也看不到这种乱码了。Notepad++会在右下角现实当前文本编码。Notepad++的默认打开为UTF-8(你可以在首选项里更改默认编码)，在菜单栏的”编码“中，你可以更改打开编码(为了看到奇怪的乱码？)，或者是重新编码。如果你选择了UTF-8，而UTF-8无法识别，Notepad++会以16进制的字符保留在原文中，而不会替换为<code>EFBFBD</code>，也就是我们熟知的锟斤拷乱码。</p>
<blockquote>
<p>怕有些同学不了解，这里xjb补充一点文字编码的知识(你就当做扯淡就行了)。在中国有两种通用的汉字编码：GB2312和UTF-8，前者是中国的国标，一个中文字符占2字节，后者是国际上的标准，大部分中文字符占3字节。如果直接用一种编码打开另一种文件，会造成乱码的问题。用GB2312编码打开UTF-8文件，会导致出现“文言文”现象；用UTF-8打开GB2312文件，会出现一堆”问号”。此时如果你保存文件，再用原来的GB2312编码打开文件，这时候不会出现原来的正常文字，而是锟斤拷锟斤拷，因为UTF-8识别文字时候，要识别连续1的数量，如果文字编码不符合UTF-8的规定，UTF-8会统一替换成<code>EFBFBD</code>，2个<code>EFBFBD</code>合并在一起，用GB2312编码打开，即为锟–<code>EFBF</code>；斤–<code>BDEF</code>；拷–<code>BFBD</code>。</p>
</blockquote>
<h4 id="2-行尾序列"><a href="#2-行尾序列" class="headerlink" title="2.行尾序列"></a>2.行尾序列</h4><p>当你从某谷下载测试数据后，你想知道哪里出了锅，但是总是“本机AC，提交??E”，这时候如果你用了字符读入处理方式，你要检查是否是数据的行尾序列出了问题。Notepad++会在右下角显示行尾序列，双击就可以更改行尾序列。麻麻再也不用担心Windows和Linux下的换行问题啦。</p>
<h4 id="3-显示所有字符"><a href="#3-显示所有字符" class="headerlink" title="3.显示所有字符"></a>3.显示所有字符</h4><p>在普通模式下，我们眼看肯定是看不见缩进使用了Tab还是空格，行尾序列是CR LF还是LF。Notepad++提供了显示所有字符的选项，他就位于工具栏的”¶”符号。点一下它，文本编辑区域瞬间杂乱无章就显示出了所有的空字符，回车，空格，制表符都尽收眼底。众所周知的是某谷的代码中所有的制表符都会被替换为空格。如果我们想把所有4个空格再换成制表符，(这里其实可以用AStyle)只需要Ctrl+F，找到替换，在上面输入4个空格，在下面打一个制表符，点确定，所有四个空格就被统一格式化为制表符了。</p>
<p><img src="https://i.loli.net/2018/09/24/5ba893297f697.png" alt=""></p>
<h4 id="4-测试数据文件"><a href="#4-测试数据文件" class="headerlink" title="4.测试数据文件"></a>4.测试数据文件</h4><p>我们在调试代码时候，有时候会从某谷上下载测试数据文件，但是有时候一下载就是几十M的样例输入。如果用Windows的自带的记事本打开，记事本肯定会崩掉，而我们可以用Notepad++打开，Notepad++用了一些玄学的处理方法，即使打开几十M，甚至几百M的文本文件都能快速，安全地打开。我们只需要右击文件，选择<code>Edit with Notepad++</code>。同时，我们可以在设置 $\rightarrow$ 首选项 $\rightarrow$ 文件关联中关联<code>.in</code>和<code>.out</code>文件，选择<code>customize</code>，将<code>.in</code>和<code>.out</code>加入注册的扩展名，这样测试数据直接双击就可以打开。</p>
<h4 id="5-宏"><a href="#5-宏" class="headerlink" title="5.宏"></a>5.宏</h4><p>在Notepad++中，如果你需要对一段文本/多个文件进行同样的操作(而且还是跨行的，还要删除)，你不用每次都Ctrl+C，Ctrl+V，delete，你只需要做一次这个事情，并录制一个宏，在其它文件里播放宏，这些操作即可自动完成。我们也可以把宏设置为缺省源，并设置快捷键，每次就不用再打代码框架了。</p>
<h4 id="6-插件"><a href="#6-插件" class="headerlink" title="6.插件"></a>6.插件</h4><p>除了NppExec外，还有很多优秀的插件可以使用，比如现在最新版的Notepad++配置的插件<code>Converter</code>，可以将ASCII和16进制互转，在Conversion Panel内可以显示ASCII代表的字符和对应的10/16/2/8进制。另外在菜单栏编辑 $\rightarrow$ 字符面板里也可以查看ASCII对应的字符。更多的插件，例如NppAstyle大家可以自己搜一搜。如果你有兴趣，你也可以自己开发插件，这里不在阐述</p>
<h4 id="7-自定义语言"><a href="#7-自定义语言" class="headerlink" title="7.自定义语言"></a>7.自定义语言</h4><p>在Notepad++里，你可以自定义你的代码高亮风格，你甚至可以自定义语言。例如Notepad++内没有内置markdown的高亮，我们可以自己定义一个markdown语言。在菜单栏的语言 $\rightarrow$ 自定义语言格式中，可以自定义语言。自定义markdown的步骤留给大家自己透彻，这里不在阐述</p>
<h4 id="8-其它编辑操作"><a href="#8-其它编辑操作" class="headerlink" title="8.其它编辑操作"></a>8.其它编辑操作</h4><p>在菜单 $\rightarrow$ 编辑里隐藏着我们不知道的一些编辑操作，这里有各种超神级编辑操作，你甚至可以对整数进行排序！</p>
<h4 id="9-彩蛋！"><a href="#9-彩蛋！" class="headerlink" title="9.彩蛋！"></a>9.彩蛋！</h4><p>上面八个不看，这个也要看看吧。Notepad++里有一个小彩蛋。在编辑区输入文本<code>random</code>并选中，按F1，会出现新窗口随机的一段文字。这些文字可以在github的源码中找到。另外，点菜单栏问号下的命令行参数，其中有一个ghost typing，也就是自动打字，也有这个效果，大家可以在命令行测试一下。具体大家可以看命令行帮助。</p>
<h4 id="10-更改主题-自己编写主题"><a href="#10-更改主题-自己编写主题" class="headerlink" title="10.更改主题/自己编写主题"></a>10.更改主题/自己编写主题</h4><p>在Notepad++中可以更改主题文件或自己编写主题文件。Notepad++自带了多种主题（可以在设置-&gt;语言格式设置中找到），在这里也可以更改主题，我们在这里还可以自定义主题。</p>
<p>如何导入定义的主题呢？</p>
<p>例如@<a href="https://www.luogu.org/space/show?uid=30214" target="_blank" rel="noopener">szy1234</a>自制的高仿dev的主题： <a href="https://pan.baidu.com/s/1oN04lCB1ziboWiZUjsL40Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1oN04lCB1ziboWiZUjsL40Q</a></p>
<p>下载后把它放到Notepad++的安装目录下即可，一般应该是<code>C:\Program Files\Notepad++</code>，然后重启notepad++，在设置-&gt;语言格式设置里选择stylers主题就行了。</p>
<p>如果我们要自定义主题，我们可以直接打开xml文件，修改里面的颜色信息就行了<del>我会告诉你我把背景调成了#66CCFF了吗</del></p>
<p>以上是Notepad++的基本配置方法和一些乱搞方法，感谢阅读</p>
<p>Notepad++作为一款轻量级编辑器，虽然功能上没有VSCode、Sublime等现代编辑器强大，但是它的优点我觉得就是轻巧、方便使用。<del>(总结全文)</del></p>
<p>附：<a href="https://github.com/notepad-plus-plus/notepad-plus-plus" target="_blank" rel="noopener">Notepad++源码仓库地址</a>；大家可以浏览一下<code>CONTRIBUTING.md</code>，文件里面的一些代码习惯值得参考借鉴</p>
<p>鸣谢：Notepad++的开发者; <a href="https://sm.ms/" target="_blank" rel="noopener">sm.ms</a>的图床; 机房的Windows7和宿舍的Windows10系统上的截图 @<a href="https://www.luogu.org/space/show?uid=87960" target="_blank" rel="noopener">顾z</a>审稿</p>
]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>NOI Linux使用心得</title>
    <url>/blog/About-NOI-Linux/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>我使用的版本是NOI Linux 1.4.1</p>
<p>$\huge\color{red}{Warning}$ 请不要尝试在上个世纪的电脑上执行以下操作，这可能会导致严重的“Kernel panic - not syncing: Attempted to kill init!”错误<br>$\huge\color{blue}{Attention}$ 请在执行下述操作时确认自己为根目录管理员（root）或拥有根目录管理权限</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装过程比较苟，给出<a href="https://sys-code.oss-cn-beijing.aliyuncs.com/NOI/noilinux%E5%AE%89%E8%A3%85%E8%AF%B4%E6%98%8E%E6%96%87%E6%A1%A3.docx" target="_blank" rel="noopener">官方说明文档</a>和几个可参考的博客地址：</p>
<ul>
<li><a href="https://www.luogu.org/blog/Peter-Matthew/Run-Ubuntu-On-Windows10" target="_blank" rel="noopener">【转载】练习Linux？其实你的Win10自带一个Ubuntu</a></li>
<li><a href="https://www.luogu.org/blog/Peter-Matthew/zhen-zheng-di-quan-zhen-xu-ni-ji-vmware-workstation" target="_blank" rel="noopener">【转载】真正的全真虚拟机：VmWare Workstation</a></li>
<li><a href="https://www.luogu.org/blog/Peter-Matthew/play-linux-on-your-android-phone" target="_blank" rel="noopener">【转载】在你的Android手机上运行Linux</a></li>
<li><a href="https://www.luogu.org/blog/Peter-Matthew/multi-os-install-ubuntu" target="_blank" rel="noopener">【转载】运行linux的第四种方式：双系统</a></li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>个人比较喜欢一些小配置，为了方便我很快地完成所有设置，在这里罗列。。。</p>
<h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><p>NOI Linux的默认密码是123456，我们修改密码却要求要有一定的强度，所以我们打开终端，输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo -s</span></span><br></pre></td></tr></table></figure>

<p>得到了root权限。<br>然后输入123456（即原密码）。<br>现在我们输入</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">passwd noilinux</span></span><br></pre></td></tr></table></figure>

<p>输入新密码就好了，就比如我的密码就是六位纯数字，</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">*****</span>*（我又不傻）</span><br></pre></td></tr></table></figure>

<p>若修改成功，则会返回</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">password updated successfully</span></span><br></pre></td></tr></table></figure>

<h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><p>桌面主题选的是Radiance，壁纸选的是Foggy Forest (2560 x 1709)<br>应用程序-&gt;系统工具-&gt;首选项-&gt;主菜单，把所有勾点上</p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>我主要安装的字体是 YaHei Consolas Hybrid</p>
<p>如何安装字体？<br>请在执行以下操作时确定自己为根目录管理员（root），也可以通过终端完成操作。</p>
<ol>
<li>在/usr/share/fonts/内创建一个文件夹</li>
<li>在文件夹内放入字体文件（最好是.ttf格式的文件，其他格式的我还没测试）</li>
<li>在终端执行下面两行命令<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mkfontscale</span></span><br><span class="line"><span class="attribute">mkfontdir</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>如何检验字体是否安装？  </p>
<p>请在终端执行：  </p>
<p>查看系统中的字体  </p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">fc-<span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<p>查看系统中的中文字体  </p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">fc-list <span class="symbol">:lang=zh</span></span><br></pre></td></tr></table></figure>

<h2 id="FireFox"><a href="#FireFox" class="headerlink" title="FireFox"></a>FireFox</h2><p>事实上NOI Linux 1.4.1自带的FireFox已经登不上现在的洛谷<del>3.5</del>了，所以我们需要手动更新它。<br>请在终端执行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> update</span><br><span class="line">sudo apt-<span class="builtin-name">get</span> install firefox</span><br></pre></td></tr></table></figure>

<p>然后我们就可以愉快地上洛谷<del>3.5</del>了<br>还有字体也可以在浏览器的首选项里更改了。</p>
<h2 id="Gedit"><a href="#Gedit" class="headerlink" title="Gedit"></a>Gedit</h2><p>Gedit又称文本编辑器<del>，类似于Windows的记事本</del>。<br>这是我认为比较好用的编辑器，其主要原因是配置好后与Dev C++比较相似。<del>根本原因是Vim上手太难。</del><br>让我们开始配置ing  </p>
<p>编辑-&gt;首选项  </p>
<ul>
<li>查看：行号和高亮的两个打开</li>
<li>编辑器：制表符宽度4、启动自动缩进</li>
<li>字体和颜色：配色方案选择Oblivion，取消使用系统等宽字体而使用YCH的Bold 21号</li>
<li>插件：重点，点开外部工具和片段两个插件</li>
</ul>
<p>在外部工具点开后，在 工具-&gt;Manage External Tools里，新建几个工具，命名和右侧选择的快捷键和代码内容如下：<br>Compile(Alt+F9)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">fullname=<span class="variable">$GEDIT_CURRENT_DOCUMENT_NAME</span></span><br><span class="line">name=`<span class="built_in">echo</span> <span class="variable">$fullname</span> | cut -d. -f1`</span><br><span class="line">    g++ <span class="variable">$fullname</span> -o <span class="variable">$name</span> -g</span><br></pre></td></tr></table></figure>

<p>Run(Alt+F10)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">fullname=<span class="variable">$GEDIT_CURRENT_DOCUMENT_NAME</span></span><br><span class="line">dir=<span class="variable">$GEDIT_CURRENT_DOCUMENT_DIR</span></span><br><span class="line">name=`<span class="built_in">echo</span> <span class="variable">$fullname</span> | cut -d. -f1`</span><br><span class="line">    gnome-terminal -x bash -c <span class="string">"time '<span class="variable">$dir</span>/<span class="variable">$name</span>';echo;echo 'Press ENTER to continue';read"</span></span><br></pre></td></tr></table></figure>

<p>Compile And Run(Alt+F11)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">fullname=<span class="variable">$GEDIT_CURRENT_DOCUMENT_NAME</span></span><br><span class="line">dir=<span class="variable">$GEDIT_CURRENT_DOCUMENT_DIR</span></span><br><span class="line">name=`<span class="built_in">echo</span> <span class="variable">$fullname</span> | cut -d. -f1`</span><br><span class="line">    g++ <span class="variable">$fullname</span> -o <span class="variable">$name</span> -g</span><br><span class="line">    gnome-terminal -x bash -c <span class="string">"time '<span class="variable">$dir</span>/<span class="variable">$name</span>';echo;echo 'Press ENTER to continue';read"</span></span><br></pre></td></tr></table></figure>

<p>Debug(Alt+F5)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">fullname=<span class="variable">$GEDIT_CURRENT_DOCUMENT_NAME</span></span><br><span class="line">dir=<span class="variable">$GEDIT_CURRENT_DOCUMENT_DIR</span></span><br><span class="line">name=`<span class="built_in">echo</span> <span class="variable">$fullname</span> | cut -d. -f1`</span><br><span class="line">    gnome-terminal -x gdb <span class="string">"<span class="variable">$dir</span>/<span class="variable">$name</span>"</span></span><br></pre></td></tr></table></figure>

<p>这四条的代码都从All Languages改为C++，然后将Compile和Compile And Run的工具里将保存从 无 改为 当前文档。</p>
<p>大功告成，我们可以写一份代码保存到桌面（注意Gedit不会自动添加扩展名），然后执行快捷键体验了。</p>
<p>额，没有括号补全？<br>首先我们来安装所有的插件，在终端执行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="builtin-name">get</span> install gedit-plugins</span><br></pre></td></tr></table></figure>

<p>然后我们在插件里找到括号补全，点开就好了。还有个Code Comment也可以启用，它可以在编辑菜单里看到。</p>
<h2 id="Arbiter"><a href="#Arbiter" class="headerlink" title="Arbiter"></a>Arbiter</h2><p>又称为考试评测系统Primer，是北航联合CCF推出的一款官方评测系统，其系统bug极多，效果极差，稍有操作不慎将从头来过，被我机房所独骂。</p>
<p>虽说官方已经发了<a href="http://www.noi.cn/RequireFile.do?fid=6tj9d3hF" target="_blank" rel="noopener">介绍</a>不过我们确实需要说一说这个。</p>
<p>我们NOI Linux上安装的一般都是单机版<del>（我也没有网络版）</del></p>
<p><strong>请注意下面的每一步最好都保存以免意外重来。</strong></p>
<p>新建一个文件夹，然后在Arbiter里新建比赛，目录选择那个文件夹。目录里就会出现这些东西。<br><img src="/pic/NLA1.png" alt=""></p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">└Exam				&lt;-评测根目录</span><br><span class="line"> ├data				&lt;-数据目录</span><br><span class="line"> │└[无文件]</span><br><span class="line"> ├evaldata			&lt;-整合数据目录（数据格式必须为XXxx.<span class="keyword">in</span>/.ans，XX为字母，xx为数字）</span><br><span class="line"> │└[无文件]</span><br><span class="line"> ├filter			&lt;-评测比较器</span><br><span class="line"> │├fulltext</span><br><span class="line"> │├fulltext_e</span><br><span class="line"> │├fulltext_e.c</span><br><span class="line"> │└...</span><br><span class="line"> ├final				&lt;-提供存储最终成绩的目录</span><br><span class="line"> │└[无文件]</span><br><span class="line"> ├players			&lt;-选手程序目录</span><br><span class="line"> │└[无文件]</span><br><span class="line"> ├result			&lt;-成绩目录</span><br><span class="line"> │└[无文件]</span><br><span class="line"> ├tmp				&lt;-评测临时目录</span><br><span class="line"> │└[无文件]</span><br><span class="line"> └setup.cfg			&lt;-评测设置文件</span><br></pre></td></tr></table></figure>

<p>下面我们开始配置<br>我们有两种配置方式：一种是多场次共文件夹的（情况A）、一种是单场次单文件夹的（情况B）。<br>我们假设Day1有三道题A、B、C，Day2有三道题D、E、F。</p>
<h3 id="多场次共文件夹"><a href="#多场次共文件夹" class="headerlink" title="多场次共文件夹"></a>多场次共文件夹</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">└Exam				&lt;-评测根目录</span><br><span class="line"> ├data				&lt;-数据目录</span><br><span class="line"> │├A</span><br><span class="line"> ││├A1.<span class="keyword">in</span></span><br><span class="line"> ││├A1.ans</span><br><span class="line"> ││├A2.<span class="keyword">in</span></span><br><span class="line"> ││├A2.ans</span><br><span class="line"> ││└...</span><br><span class="line"> │├B</span><br><span class="line"> ││├B1.<span class="keyword">in</span></span><br><span class="line"> ││├B1.ans</span><br><span class="line"> ││├B2.<span class="keyword">in</span></span><br><span class="line"> ││├B2.ans</span><br><span class="line"> ││└...</span><br><span class="line"> │├C</span><br><span class="line"> ││├C1.<span class="keyword">in</span></span><br><span class="line"> ││├C1.ans</span><br><span class="line"> ││├C2.<span class="keyword">in</span></span><br><span class="line"> ││├C2.ans</span><br><span class="line"> ││└...</span><br><span class="line"> │├D</span><br><span class="line"> ││├D1.<span class="keyword">in</span></span><br><span class="line"> ││├D1.ans</span><br><span class="line"> ││├D2.<span class="keyword">in</span></span><br><span class="line"> ││├D2.ans</span><br><span class="line"> ││└...</span><br><span class="line"> │├E</span><br><span class="line"> ││├E1.<span class="keyword">in</span></span><br><span class="line"> ││├E1.ans</span><br><span class="line"> ││├E2.<span class="keyword">in</span></span><br><span class="line"> ││├E2.ans</span><br><span class="line"> ││└...</span><br><span class="line"> │└F</span><br><span class="line"> │ ├F1.<span class="keyword">in</span></span><br><span class="line"> │ ├F1.ans</span><br><span class="line"> │ ├F2.<span class="keyword">in</span></span><br><span class="line"> │ ├F2.ans</span><br><span class="line"> │ └...</span><br><span class="line"> ├evaldata			&lt;-整合数据目录（数据格式必须为XXxx.<span class="keyword">in</span>/.ans，XX为字母，xx为数字）</span><br><span class="line"> │├A1.<span class="keyword">in</span></span><br><span class="line"> │├A1.ans</span><br><span class="line"> │├A2.<span class="keyword">in</span></span><br><span class="line"> │├A2.ans</span><br><span class="line"> │├...</span><br><span class="line"> │├B1.<span class="keyword">in</span></span><br><span class="line"> │├B1.ans</span><br><span class="line"> │├B2.<span class="keyword">in</span></span><br><span class="line"> │├B2.ans</span><br><span class="line"> │├...</span><br><span class="line"> │├C1.<span class="keyword">in</span></span><br><span class="line"> │├C1.ans</span><br><span class="line"> │├C2.<span class="keyword">in</span></span><br><span class="line"> │├C2.ans</span><br><span class="line"> │├...</span><br><span class="line"> │├D1.<span class="keyword">in</span></span><br><span class="line"> │├D1.ans</span><br><span class="line"> │├D2.<span class="keyword">in</span></span><br><span class="line"> │├D2.ans</span><br><span class="line"> │├...</span><br><span class="line"> │├E1.<span class="keyword">in</span></span><br><span class="line"> │├E1.ans</span><br><span class="line"> │├E2.<span class="keyword">in</span></span><br><span class="line"> │├E2.ans</span><br><span class="line"> │├...</span><br><span class="line"> │├F1.<span class="keyword">in</span></span><br><span class="line"> │├F1.ans</span><br><span class="line"> │├F2.<span class="keyword">in</span></span><br><span class="line"> │├F2.ans</span><br><span class="line"> │└...</span><br><span class="line"> ├<span class="attribute">filter</span>			&lt;-评测比较器</span><br><span class="line"> │├fulltext</span><br><span class="line"> │├fulltext_e</span><br><span class="line"> │├fulltext_e.c</span><br><span class="line"> │└...</span><br><span class="line"> ├final				&lt;-提供存储最终成绩的目录</span><br><span class="line"> │└[自己放的东西]</span><br><span class="line"> ├players			&lt;-选手程序目录</span><br><span class="line"> │├HA-<span class="number">0001</span></span><br><span class="line"> ││├A</span><br><span class="line"> │││└A.cpp</span><br><span class="line"> ││├B</span><br><span class="line"> │││└B.cpp</span><br><span class="line"> ││├C</span><br><span class="line"> │││└C.cpp</span><br><span class="line"> ││├D</span><br><span class="line"> │││└D.cpp</span><br><span class="line"> ││├E</span><br><span class="line"> │││└E.cpp</span><br><span class="line"> ││└F</span><br><span class="line"> ││ └F.cpp</span><br><span class="line"> │├HA-<span class="number">0002</span></span><br><span class="line"> ││├A</span><br><span class="line"> │││└A.cpp</span><br><span class="line"> ││├B</span><br><span class="line"> │││└B.cpp</span><br><span class="line"> ││├C</span><br><span class="line"> │││└C.cpp</span><br><span class="line"> ││├D</span><br><span class="line"> │││└D.cpp</span><br><span class="line"> ││├E</span><br><span class="line"> │││└E.cpp</span><br><span class="line"> ││└F</span><br><span class="line"> ││ └F.cpp</span><br><span class="line"> │└...</span><br><span class="line"> ├ps				&lt;-成绩打印表</span><br><span class="line"> │├day1</span><br><span class="line"> ││├HA-<span class="number">0001</span></span><br><span class="line"> │││└HA-<span class="number">0001</span>.ps</span><br><span class="line"> ││├HA-<span class="number">0002</span></span><br><span class="line"> │││└HA-<span class="number">0002</span>.ps</span><br><span class="line"> ││└...</span><br><span class="line"> │└day2</span><br><span class="line"> │ ├HA-<span class="number">0001</span></span><br><span class="line"> │ │└HA-<span class="number">0001</span>.ps</span><br><span class="line"> │ ├HA-<span class="number">0002</span></span><br><span class="line"> │ │└HA-<span class="number">0002</span>.ps</span><br><span class="line"> │ └...</span><br><span class="line"> ├result			&lt;-成绩目录</span><br><span class="line"> │├day1</span><br><span class="line"> ││├HA-<span class="number">0001</span></span><br><span class="line"> │││└HA-<span class="number">0001</span>.result</span><br><span class="line"> ││├HA-<span class="number">0002</span></span><br><span class="line"> │││└HA-<span class="number">0002</span>.result</span><br><span class="line"> ││└...</span><br><span class="line"> │└day2</span><br><span class="line"> │ ├HA-<span class="number">0001</span></span><br><span class="line"> │ │└HA-<span class="number">0001</span>.result</span><br><span class="line"> │ ├HA-<span class="number">0002</span></span><br><span class="line"> │ │└HA-<span class="number">0002</span>.result</span><br><span class="line"> │ └...</span><br><span class="line"> ├tmp				&lt;-评测临时目录</span><br><span class="line"> │└[系统产生的文件]</span><br><span class="line"> ├day1.info</span><br><span class="line"> ├day2.info</span><br><span class="line"> ├player.info</span><br><span class="line"> ├setup<span class="selector-class">.cfg</span>			&lt;-评测设置文件</span><br><span class="line"> ├task1_1.info</span><br><span class="line"> ├task1_2.info</span><br><span class="line"> ├task1_3.info</span><br><span class="line"> ├task2_1.info</span><br><span class="line"> ├task2_2.info</span><br><span class="line"> ├task2_3.info</span><br><span class="line"> └team.info</span><br></pre></td></tr></table></figure>

<p>我们在data文件夹下放数据，怎么放都行，貌似这个文件夹不会影响测评<br><img src="/pic/NLA4.png" alt=""></p>
<p>evaldata下要放所有数据，必须在文件夹下放.in/.ans，不能缺少，而且输出文件只能为.ans，否则<strong>Arbiter评测时就会闪退</strong></p>
<p>接着在players里放下选手的文件夹，在每个选手的文件夹里题应该独立建子文件夹，并将程序放在子文件夹下，如上树形图所示</p>
<p>我们返回Arbiter，在试题管理选项卡中右键-添加考试，在第一场上添加三个试题，更改试题名称、（试题分值）、测试点数量、时间限制、内存限制和比较方式（我不知道spj怎么设置），如果有需要还可以设置编译选项。</p>
<p><img src="/pic/NLA5.png" alt=""></p>
<p>接着我们转到试题评测选项卡，点击右侧添加选手，添加完所有选手。然后导出名单，可以保存成任意格式，北航官方说保存成.txt<del>其实明眼人一看就是.csv的文件</del>，但是无所谓。这个名单方便下次测评可以直接导入名单而不用一一添加选手名字。</p>
<p>添加好后，更改左上角的场次，勾选要测评的选手然后点击评测选定选手，等待评<br>测。</p>
<p><img src="/pic/NLA6.png" alt=""></p>
<p>双击选手可查看其程序，若提示<strong>“找不到答案文件”</strong>，说明放置的选手程序有误或是没有，反正系统找不到源程序。  </p>
<p><img src="/pic/NLA7.png" alt=""></p>
<p>评测完后，可以查看相应的成绩，在result文件夹下对应场次中找到选手，打开.result文件即可查看对应的单测试点时间、成绩及信息。</p>
<p><img src="/pic/NLA8.png" alt=""></p>
<p>最后还有成绩统计选项卡，这个就随意了，你也可以导出成绩到文件，如果打印到文件会多出一个ps文件夹用于存储打印表。</p>
<p><img src="/pic/NLA9.png" alt=""></p>
<h3 id="单场次单文件夹"><a href="#单场次单文件夹" class="headerlink" title="单场次单文件夹"></a>单场次单文件夹</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">└Exam				&lt;-评测根目录</span><br><span class="line"> ├data				&lt;-数据目录</span><br><span class="line"> │├day1</span><br><span class="line"> ││├A</span><br><span class="line"> │││├A1.<span class="keyword">in</span></span><br><span class="line"> │││├A1.ans</span><br><span class="line"> │││├A2.<span class="keyword">in</span></span><br><span class="line"> │││├A2.ans</span><br><span class="line"> │││└...</span><br><span class="line"> ││├B</span><br><span class="line"> │││├B1.<span class="keyword">in</span></span><br><span class="line"> │││├B1.ans</span><br><span class="line"> │││├B2.<span class="keyword">in</span></span><br><span class="line"> │││├B2.ans</span><br><span class="line"> │││└...</span><br><span class="line"> ││└C</span><br><span class="line"> ││ ├C1.<span class="keyword">in</span></span><br><span class="line"> ││ ├C1.ans</span><br><span class="line"> ││ ├C2.<span class="keyword">in</span></span><br><span class="line"> ││ ├C2.ans</span><br><span class="line"> ││ └...</span><br><span class="line"> │└day2</span><br><span class="line"> │ ├D</span><br><span class="line"> │ │├D1.<span class="keyword">in</span></span><br><span class="line"> │ │├D1.ans</span><br><span class="line"> │ │├D2.<span class="keyword">in</span></span><br><span class="line"> │ │├D2.ans</span><br><span class="line"> │ │└...</span><br><span class="line"> │ ├E</span><br><span class="line"> │ │├E1.<span class="keyword">in</span></span><br><span class="line"> │ │├E1.ans</span><br><span class="line"> │ │├E2.<span class="keyword">in</span></span><br><span class="line"> │ │├E2.ans</span><br><span class="line"> │ │└...</span><br><span class="line"> │ └F</span><br><span class="line"> │  ├F1.<span class="keyword">in</span></span><br><span class="line"> │  ├F1.ans</span><br><span class="line"> │  ├F2.<span class="keyword">in</span></span><br><span class="line"> │  ├F2.ans</span><br><span class="line"> │  └...</span><br><span class="line"> ├evaldata			&lt;-整合数据目录（数据格式必须为XXxx.<span class="keyword">in</span>/.ans，XX为字母，xx为数字）</span><br><span class="line"> │├A1.<span class="keyword">in</span></span><br><span class="line"> │├A1.ans</span><br><span class="line"> │├A2.<span class="keyword">in</span></span><br><span class="line"> │├A2.ans</span><br><span class="line"> │├...</span><br><span class="line"> │├B1.<span class="keyword">in</span></span><br><span class="line"> │├B1.ans</span><br><span class="line"> │├B2.<span class="keyword">in</span></span><br><span class="line"> │├B2.ans</span><br><span class="line"> │├...</span><br><span class="line"> │├C1.<span class="keyword">in</span></span><br><span class="line"> │├C1.ans</span><br><span class="line"> │├C2.<span class="keyword">in</span></span><br><span class="line"> │├C2.ans</span><br><span class="line"> │├...</span><br><span class="line"> │├D1.<span class="keyword">in</span></span><br><span class="line"> │├D1.ans</span><br><span class="line"> │├D2.<span class="keyword">in</span></span><br><span class="line"> │├D2.ans</span><br><span class="line"> │├...</span><br><span class="line"> │├E1.<span class="keyword">in</span></span><br><span class="line"> │├E1.ans</span><br><span class="line"> │├E2.<span class="keyword">in</span></span><br><span class="line"> │├E2.ans</span><br><span class="line"> │├...</span><br><span class="line"> │├F1.<span class="keyword">in</span></span><br><span class="line"> │├F1.ans</span><br><span class="line"> │├F2.<span class="keyword">in</span></span><br><span class="line"> │├F2.ans</span><br><span class="line"> │└...</span><br><span class="line"> ├<span class="attribute">filter</span>			&lt;-评测比较器</span><br><span class="line"> │├fulltext</span><br><span class="line"> │├fulltext_e</span><br><span class="line"> │├fulltext_e.c</span><br><span class="line"> │└...</span><br><span class="line"> ├final				&lt;-提供存储最终成绩的目录</span><br><span class="line"> │└[自己放的东西]</span><br><span class="line"> ├players			&lt;-选手程序目录 *请注意：有时候由于Arbiter的bug，无法识别某个场次的文件夹里的选手程序，此时请将此场次里的文件复制到别的场次里</span><br><span class="line"> │├day1</span><br><span class="line"> ││├HA-<span class="number">0001</span></span><br><span class="line"> │││├A</span><br><span class="line"> ││││└A.cpp</span><br><span class="line"> │││├B</span><br><span class="line"> ││││└B.cpp</span><br><span class="line"> │││└C</span><br><span class="line"> │││ └C.cpp</span><br><span class="line"> ││├HA-<span class="number">0002</span></span><br><span class="line"> │││├A</span><br><span class="line"> ││││└A.cpp</span><br><span class="line"> │││├B</span><br><span class="line"> ││││└B.cpp</span><br><span class="line"> │││└C</span><br><span class="line"> │││ └C.cpp</span><br><span class="line"> ││└...</span><br><span class="line"> │└day2</span><br><span class="line"> │ ├HA-<span class="number">0001</span></span><br><span class="line"> │ │├D</span><br><span class="line"> │ ││└D.cpp</span><br><span class="line"> │ │├E</span><br><span class="line"> │ ││└E.cpp</span><br><span class="line"> │ │└F</span><br><span class="line"> │ │ └F.cpp</span><br><span class="line"> │ ├HA-<span class="number">0002</span></span><br><span class="line"> │ │├D</span><br><span class="line"> │ ││└D.cpp</span><br><span class="line"> │ │├E</span><br><span class="line"> │ ││└E.cpp</span><br><span class="line"> │ │└F</span><br><span class="line"> │ │ └F.cpp</span><br><span class="line"> │ └...</span><br><span class="line"> ├ps				&lt;-成绩打印表</span><br><span class="line"> │├day1</span><br><span class="line"> ││├HA-<span class="number">0001</span></span><br><span class="line"> │││└HA-<span class="number">0001</span>.ps</span><br><span class="line"> ││├HA-<span class="number">0002</span></span><br><span class="line"> │││└HA-<span class="number">0002</span>.ps</span><br><span class="line"> ││└...</span><br><span class="line"> │└day2</span><br><span class="line"> │ ├HA-<span class="number">0001</span></span><br><span class="line"> │ │└HA-<span class="number">0001</span>.ps</span><br><span class="line"> │ ├HA-<span class="number">0002</span></span><br><span class="line"> │ │└HA-<span class="number">0002</span>.ps</span><br><span class="line"> │ └...</span><br><span class="line"> ├result			&lt;-成绩目录</span><br><span class="line"> │├day1</span><br><span class="line"> ││├HA-<span class="number">0001</span></span><br><span class="line"> │││└HA-<span class="number">0001</span>.result</span><br><span class="line"> ││├HA-<span class="number">0002</span></span><br><span class="line"> │││└HA-<span class="number">0002</span>.result</span><br><span class="line"> ││└...</span><br><span class="line"> │└day2</span><br><span class="line"> │ ├HA-<span class="number">0001</span></span><br><span class="line"> │ │└HA-<span class="number">0001</span>.result</span><br><span class="line"> │ ├HA-<span class="number">0002</span></span><br><span class="line"> │ │└HA-<span class="number">0002</span>.result</span><br><span class="line"> │ └...</span><br><span class="line"> ├tmp				&lt;-评测临时目录</span><br><span class="line"> │└[系统产生的文件]</span><br><span class="line"> ├day1.info</span><br><span class="line"> ├day2.info</span><br><span class="line"> ├player.info</span><br><span class="line"> ├setup<span class="selector-class">.cfg</span>			&lt;-评测设置文件</span><br><span class="line"> ├task1_1.info</span><br><span class="line"> ├task1_2.info</span><br><span class="line"> ├task1_3.info</span><br><span class="line"> ├task2_1.info</span><br><span class="line"> ├task2_2.info</span><br><span class="line"> ├task2_3.info</span><br><span class="line"> └team.info</span><br></pre></td></tr></table></figure>

<p>还是老话，data文件夹下怎么放都行，所以这里唯一变化的是players文件夹。<br>为什么推荐情况A的设置方法，原因很简单，Arbiter有个巨大的bug，就是按情况B这样设置Arbiter极容易找不到个别场次的程序，为了方便起见，我们用情况A的方法配置，但是这样也是可以配置的。</p>
<h3 id="目录文件转换"><a href="#目录文件转换" class="headerlink" title="目录文件转换"></a>目录文件转换</h3><p>考虑到有学校使用Windows下Lemon或Cena评测<br>在这里提供几组bat文件方便老师使用。</p>
<p>data.bat<br>用于提取evaldata文件夹下的数据并自动放在data文件夹里形成Lemon或Cena可用的data文件夹<br>适用于情况B，需手动设置题目名称和场次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set a=A		::&lt;-第一题</span><br><span class="line">set b=B		::&lt;-第二题</span><br><span class="line">set c=C		::&lt;-第三题</span><br><span class="line">set d=day1	::&lt;-场次</span><br><span class="line">md data</span><br><span class="line">cd data</span><br><span class="line">md %d%</span><br><span class="line">cd %d%</span><br><span class="line">for /d %%i in (%a% %b% %c%) do (</span><br><span class="line">   md %%i</span><br><span class="line">   copy ..\..\evaldata\%%i*.* .\%%i</span><br><span class="line">)</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>data-noday.bat<br>用于提取evaldata文件夹下的数据并自动放在data文件夹里形成Lemon或Cena可用的data文件夹<br>适用于情况A，需手动设置题目名称。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set a=A		::&lt;-第一题</span><br><span class="line">set b=B		::&lt;-第二题</span><br><span class="line">set c=C		::&lt;-第三题</span><br><span class="line">md data</span><br><span class="line">cd data</span><br><span class="line">for /d %%i in (%a% %b% %c%) do (</span><br><span class="line">   md %%i</span><br><span class="line">   copy ..\evaldata\%%i*.* .\%%i</span><br><span class="line">)</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>evaldata.bat<br>用于提取data文件夹下的数据并自动放在evaldata文件夹里形成Arbiter可用的evaldata文件夹<br>适用于情况B，需手动设置场次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">md evaldata</span><br><span class="line">cd data</span><br><span class="line">cd day1		::&lt;-场次</span><br><span class="line">for /d %%i in (*) do copy .\%%i\*.* ..\..\evaldata</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>evaldata-noday.bat<br>用于提取data文件夹下的数据并自动放在evaldata文件夹里形成Arbiter可用的evaldata文件夹<br>适用于情况A，无需设置任何内容。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">md evaldata</span><br><span class="line">cd data</span><br><span class="line">for /d %%i in (*) do copy .\%%i\*.* ..\evaldata</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>players.bat<br>用于提取source文件夹下的数据并自动放在players文件夹里形成Arbiter可用的players文件夹<br>适用于情况B，需手动设置题目名称、场次和选手名称对应代号（也可直接让选手以代号提交）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set a=A		::&lt;-第一题</span><br><span class="line">set b=B		::&lt;-第二题</span><br><span class="line">set c=C		::&lt;-第三题</span><br><span class="line">set d=day1	::&lt;-场次</span><br><span class="line">md players</span><br><span class="line">cd players</span><br><span class="line">md %d%</span><br><span class="line">cd..</span><br><span class="line">xcopy source\* players\%d% /y /e /i /q</span><br><span class="line">cd players</span><br><span class="line">cd %d%</span><br><span class="line">for /d %%i in (*) do (</span><br><span class="line">   @echo %%i</span><br><span class="line">   cd %%i</span><br><span class="line">   for /d %%j in (%a% %b% %c%) do (</span><br><span class="line">      @echo %%j</span><br><span class="line">      md %%j</span><br><span class="line">      copy .\%%j.cpp .\%%j\%%j.cpp</span><br><span class="line">   )</span><br><span class="line">   del /f /q .\*.*</span><br><span class="line">   cd..</span><br><span class="line">)</span><br><span class="line">ren std HA-0001		::&lt;-选手名称对应代号，若让选手以代号提交请删除</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>players-noday.bat<br>用于提取source文件夹下的数据并自动放在players文件夹里形成Arbiter可用的players文件夹<br>适用于情况A，需手动设置题目名称和选手名称对应代号（也可直接让选手以代号提交）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set a=A		::&lt;-第一题</span><br><span class="line">set b=B		::&lt;-第二题</span><br><span class="line">set c=C		::&lt;-第三题</span><br><span class="line">md players</span><br><span class="line">xcopy source\* players /y /e /i /q</span><br><span class="line">cd players</span><br><span class="line">for /d %%i in (*) do (</span><br><span class="line">   @echo %%i</span><br><span class="line">   cd %%i</span><br><span class="line">   for /d %%j in (%a% %b% %c%) do (</span><br><span class="line">      @echo %%j</span><br><span class="line">      md %%j</span><br><span class="line">      copy .\%%j.cpp .\%%j\%%j.cpp</span><br><span class="line">   )</span><br><span class="line">   del /f /q .\*.*</span><br><span class="line">   cd..</span><br><span class="line">)</span><br><span class="line">ren std HA-0001		::&lt;-选手名称对应代号，若让选手以代号提交请删除</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>source.bat<br>用于提取players文件夹下的数据并自动放在source文件夹里形成Lemon或Cena可用的source文件夹<br>适用于情况B，需手动设置场次和选手名称对应代号（也可直接以选手代号评测）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">md source</span><br><span class="line">xcopy players\day1\* source /y /e /i /q		::&lt;-day1即为场次</span><br><span class="line">cd source</span><br><span class="line">for /d %%i in (*) do (</span><br><span class="line">   @echo %%i</span><br><span class="line">   cd %%i</span><br><span class="line">   for /d %%j in (*) do (</span><br><span class="line">      @echo %%j</span><br><span class="line">      copy .\%%j\%%j.cpp .\%%j.cpp</span><br><span class="line">      del /f /s /q .\%%j\*.*</span><br><span class="line">      rd /q /s .\%%j\</span><br><span class="line">   )</span><br><span class="line">   cd..</span><br><span class="line">)</span><br><span class="line">ren HA-0001 std		::&lt;-选手名称对应代号，若直接以选手代号评测请删除</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>source-noday.bat<br>用于提取players文件夹下的数据并自动放在source文件夹里形成Lemon或Cena可用的source文件夹<br>适用于情况A，需手动设置选手名称对应代号（也可直接以选手代号评测）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">md source</span><br><span class="line">xcopy players\* source /y /e /i /q</span><br><span class="line">cd source</span><br><span class="line">for /d %%i in (*) do (</span><br><span class="line">   @echo %%i</span><br><span class="line">   cd %%i</span><br><span class="line">   for /d %%j in (*) do (</span><br><span class="line">      @echo %%j</span><br><span class="line">      copy .\%%j\%%j.cpp .\%%j.cpp</span><br><span class="line">      del /f /s /q .\%%j\*.*</span><br><span class="line">      rd /q /s .\%%j\</span><br><span class="line">   )</span><br><span class="line">   cd..</span><br><span class="line">)</span><br><span class="line">ren HA-0001 std		::&lt;-选手名称对应代号，若直接以选手代号评测请删除</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>使用方法是放在目录文件夹，然后更改bat内容并运行。</p>
<p><img src="/pic/NLA2.png" alt=""><br><img src="/pic/NLA3.png" alt="">  </p>
<p>如果提示“存在一个重名文件，或是找不到文件”，这是因为</p>
<ol>
<li>bat的内容设置写法有误<del>（肯定是你们写错了）</del>，请检查你填写的内容是否多空格少空格，如果目录名有空格，请加英文半角的双引号<code>&quot;</code></li>
<li>已经有文件夹，例如我执行source-noday.bat之前文件夹里已经有std文件夹，那么就会这么提示，解决方法是手动替换或提前删除。。。</li>
</ol>
<h2 id="GNU-Emacs-24"><a href="#GNU-Emacs-24" class="headerlink" title="GNU Emacs 24"></a>GNU Emacs 24</h2><p>其实并不会用这个软件，这个软件是用来学（tui）习（fei）用的，你可以看到菜单栏里的Tools-&gt;Games里有很多东西，(#^.^#)，可以自己试着体验体验这些东西。</p>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>动态树</title>
    <url>/blog/data-LinkCutTree/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>动态树的一些操作：<br><em>据说树剖能做的动态树都能做，但目前使（wo）用（zhi）最（xue）多（hui）的LCT不擅长处理子树操作<del>（也有可能是我太菜了）</del></em></p>
<ul>
<li>单点修改/询问</li>
<li>路径询问</li>
<li>连边/删边</li>
<li>······</li>
</ul>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,key[<span class="number">300005</span>];</span><br><span class="line"><span class="keyword">int</span> top,ch[<span class="number">300005</span>][<span class="number">2</span>],fa[<span class="number">300005</span>],xsm[<span class="number">300005</span>],que[<span class="number">300005</span>],rev[<span class="number">300005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;xsm[x]=xsm[ch[x][<span class="number">0</span>]]^xsm[ch[x][<span class="number">1</span>]]^key[x];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(rev[x])</span><br><span class="line">    &#123;</span><br><span class="line">        rev[ch[x][<span class="number">0</span>]]^=<span class="number">1</span>;rev[ch[x][<span class="number">1</span>]]^=<span class="number">1</span>;rev[x]^=<span class="number">1</span>;</span><br><span class="line">        swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isroot</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> ch[fa[x]][<span class="number">0</span>]!=x&amp;&amp;ch[fa[x]][<span class="number">1</span>]!=x;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> y=fa[x],z=fa[y],l=(ch[y][<span class="number">1</span>]==x),r=l^<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(!isroot(y))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[z][<span class="number">0</span>]==y)</span><br><span class="line">            ch[z][<span class="number">0</span>]=x;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ch[z][<span class="number">1</span>]=x;</span><br><span class="line">    &#125;</span><br><span class="line">    fa[x]=z;</span><br><span class="line">    fa[y]=x;</span><br><span class="line">    fa[ch[x][r]]=y;</span><br><span class="line">    ch[y][l]=ch[x][r];</span><br><span class="line">    ch[x][r]=y;</span><br><span class="line">    pushup(y);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    top=<span class="number">0</span>;</span><br><span class="line">    que[++top]=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=x;!isroot(i);i=fa[i])</span><br><span class="line">        que[++top]=fa[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=top;i;i--)</span><br><span class="line">        pushdown(que[i]);</span><br><span class="line">    <span class="keyword">while</span>(!isroot(x))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y=fa[x],z=fa[y];</span><br><span class="line">        <span class="keyword">if</span>(!isroot(y))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((ch[y][<span class="number">0</span>]==x)^(ch[z][<span class="number">0</span>]==y))rotate(x);</span><br><span class="line">            <span class="keyword">else</span> rotate(y);</span><br><span class="line">        &#125;</span><br><span class="line">        rotate(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">0</span>;x;t=x,x=fa[x])</span><br><span class="line">    &#123;</span><br><span class="line">        splay(x);</span><br><span class="line">        ch[x][<span class="number">1</span>]=t;</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeroot</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    access(x);</span><br><span class="line">    splay(x);</span><br><span class="line">    rev[x]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    access(x);</span><br><span class="line">    splay(x);</span><br><span class="line">    <span class="keyword">while</span>(ch[x][<span class="number">0</span>])</span><br><span class="line">        x=ch[x][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    access(y);</span><br><span class="line">    splay(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    split(x,y);</span><br><span class="line">    <span class="keyword">if</span>(ch[y][<span class="number">0</span>]==x&amp;&amp;ch[x][<span class="number">1</span>]==<span class="number">0</span>)</span><br><span class="line">        ch[y][<span class="number">0</span>]=fa[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    makeroot(x);</span><br><span class="line">    fa[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;key[i]),xsm[i]=key[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,y;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;opt,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">0</span>)split(x,y),<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,xsm[y]);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)<span class="keyword">if</span>(find(x)!=find(y))link(x,y);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)<span class="keyword">if</span>(find(x)==find(y))cut(x,y);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">3</span>)access(x),splay(x),key[x]=y,pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://t1.picb.cc/uploads/2018/09/06/JW1a8i.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://t1.picb.cc/uploads/2018/09/06/JW1bXL.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>平衡树</title>
    <url>/blog/data-BalancedTree/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>平衡树的一些操作：  </p>
<ul>
<li>查询x的排名</li>
<li>查询第x的数</li>
<li>查询x的前驱/后继</li>
<li>翻转给定区间</li>
<li>查询最大/最小的数</li>
<li>在某个位置插入x</li>
<li>在某个位置插入一串数</li>
<li>删除某个位置的x</li>
<li>删除某个位置开始的一串数</li>
<li>修改某个位置开始的一串数为x</li>
<li>查询区间和/本质不同的数值个数</li>
<li>将数x移至开头/末尾</li>
<li>将数与他的前驱/后继换位</li>
<li>进行某个特殊操作：<ul>
<li>求和最大的子列</li>
<li>在原数列的第i个元素所有新元素后面添加一个新元素</li>
<li>查询相邻/所有两个元素中差值（绝对值）的最小值</li>
<li>······</li>
</ul>
</li>
<li>······</li>
</ul>
<h1 id="正常版本"><a href="#正常版本" class="headerlink" title="正常版本"></a>正常版本</h1><h2 id="普通平衡树"><a href="#普通平衡树" class="headerlink" title="普通平衡树"></a>普通平衡树</h2><p>Treap</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">1000005</span>][<span class="number">2</span>],cnt[<span class="number">1000005</span>],size[<span class="number">1000005</span>],key[<span class="number">1000005</span>],rd[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> sz,n,root;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newpoint</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sz++;</span><br><span class="line">    key[sz]=x;</span><br><span class="line">    rd[sz]=rand();</span><br><span class="line">    size[sz]=<span class="number">1</span>;</span><br><span class="line">    cnt[sz]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> sz;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        size[x]=cnt[x];</span><br><span class="line">        <span class="keyword">if</span>(ch[x][<span class="number">0</span>])size[x]+=size[ch[x][<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">if</span>(ch[x][<span class="number">1</span>])size[x]+=size[ch[x][<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    root=newpoint(-inf),ch[root][<span class="number">1</span>]=newpoint(inf);</span><br><span class="line">    pushup(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> son=ch[x][d^<span class="number">1</span>];</span><br><span class="line">    ch[x][d^<span class="number">1</span>]=ch[son][d];</span><br><span class="line">    ch[son][d] = x;</span><br><span class="line">    pushup(x),pushup(son);</span><br><span class="line">    x=son;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)</span><br><span class="line">    &#123;</span><br><span class="line">        x=newpoint(val);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(key[x]==val)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[x]++;</span><br><span class="line">        pushup(x);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d=key[x]&lt;val;</span><br><span class="line">    insert(ch[x][d],val);</span><br><span class="line">    <span class="keyword">if</span>(rd[x]&lt; rd[ch[x][d]])</span><br><span class="line">        rotate(x,d^<span class="number">1</span>);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(key[x]==val)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[x]&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[x]--;</span><br><span class="line">            pushup(x);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> d=rd[ch[x][<span class="number">0</span>]]&gt;rd[ch[x][<span class="number">1</span>]];</span><br><span class="line">        <span class="keyword">if</span>(ch[x][<span class="number">0</span>]||ch[x][<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[x][<span class="number">1</span>]||d)</span><br><span class="line">                rotate(x,<span class="number">1</span>),del(ch[x][<span class="number">1</span>],val);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                rotate(x,<span class="number">0</span>),del(ch[x][<span class="number">0</span>],val);</span><br><span class="line">            pushup(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> x=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        del(ch[x][key[x]&lt;val],val);</span><br><span class="line">        pushup(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rnk</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(key[x]==val)</span><br><span class="line">        <span class="keyword">return</span> size[ch[x][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(key[x]&gt;val)</span><br><span class="line">        <span class="keyword">return</span> rnk(ch[x][<span class="number">0</span>],val);</span><br><span class="line">    <span class="keyword">return</span> rnk(ch[x][<span class="number">1</span>],val)+size[ch[x][<span class="number">0</span>]]+cnt[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)<span class="keyword">return</span> inf;</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=size[ch[x][<span class="number">0</span>]])</span><br><span class="line">        <span class="keyword">return</span> kth(ch[x][<span class="number">0</span>],k);</span><br><span class="line">    <span class="keyword">if</span>(k&lt;=size[ch[x][<span class="number">0</span>]]+cnt[x])</span><br><span class="line">        <span class="keyword">return</span> key[x];</span><br><span class="line">    <span class="keyword">return</span> kth(ch[x][<span class="number">1</span>],k-size[ch[x][<span class="number">0</span>]]-cnt[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=-inf;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(key[x]&gt;=val)</span><br><span class="line">            x=ch[x][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res=key[x],x=ch[x][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=inf;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(key[x]&lt;=val)</span><br><span class="line">            x=ch[x][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res=key[x],x=ch[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>)),srand(rand()),srand(rand()+<span class="number">19260817</span>),srand(time(<span class="number">0</span>)+rand()),srand(rand()*rand()),srand(rand()+<span class="number">359003647</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    build();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;opt,&amp;x);</span><br><span class="line">        <span class="keyword">switch</span>(opt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:insert(root,x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:del(root,x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rnk(root,x)<span class="number">-1</span>);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(root,x+<span class="number">1</span>));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,pre(root,x));<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,next(root,x));<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Splay</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">100005</span>][<span class="number">2</span>],f[<span class="number">100005</span>],size[<span class="number">100005</span>],cnt[<span class="number">100005</span>],key[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> sz,root,n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ch[x][<span class="number">0</span>]=ch[x][<span class="number">1</span>]=f[x]=size[x]=cnt[x]=key[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        size[x]=cnt[x];</span><br><span class="line">        <span class="keyword">if</span>(ch[x][<span class="number">0</span>])size[x]+=size[ch[x][<span class="number">0</span>]];</span><br><span class="line">        <span class="keyword">if</span>(ch[x][<span class="number">1</span>])size[x]+=size[ch[x][<span class="number">1</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> old=f[x],oldf=f[old],whichx=get(x);</span><br><span class="line">    ch[old][whichx]=ch[x][whichx^<span class="number">1</span>];</span><br><span class="line">    f[ch[old][whichx]]=old;</span><br><span class="line">    ch[x][whichx^<span class="number">1</span>]=old;</span><br><span class="line">    f[old]=x;</span><br><span class="line">    f[x]=oldf;</span><br><span class="line">    <span class="keyword">if</span>(oldf)</span><br><span class="line">        ch[oldf][ch[oldf][<span class="number">1</span>]==old]=x;</span><br><span class="line">    pushup(old);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fa;fa=f[x];rotate(x))</span><br><span class="line">        <span class="keyword">if</span>(f[fa])</span><br><span class="line">            rotate((get(x)==get(fa))?fa:x);</span><br><span class="line">    root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sz++;</span><br><span class="line">        ch[sz][<span class="number">0</span>]=ch[sz][<span class="number">1</span>]=f[sz]=<span class="number">0</span>;</span><br><span class="line">        root=sz;</span><br><span class="line">        size[sz]=cnt[sz]=<span class="number">1</span>;</span><br><span class="line">        key[sz]=x;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now=root,fa=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x==key[now])</span><br><span class="line">        &#123;</span><br><span class="line">            cnt[now]++;</span><br><span class="line">            pushup(now);</span><br><span class="line">            pushup(fa);</span><br><span class="line">            splay(now);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fa=now;</span><br><span class="line">        now=ch[now][key[now]&lt;x];</span><br><span class="line">        <span class="keyword">if</span>(now==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sz++;</span><br><span class="line">            ch[sz][<span class="number">0</span>]=ch[sz][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">            f[sz]=fa;</span><br><span class="line">            size[sz]=cnt[sz]=<span class="number">1</span>;</span><br><span class="line">            ch[fa][key[fa]&lt;x]=sz;</span><br><span class="line">            key[sz]=x;</span><br><span class="line">            pushup(fa);</span><br><span class="line">            splay(sz);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rnk</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=root,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;key[now])</span><br><span class="line">            now=ch[now][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans+=(ch[now][<span class="number">0</span>]?size[ch[now][<span class="number">0</span>]]:<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(x==key[now])</span><br><span class="line">            &#123;</span><br><span class="line">                splay(now);</span><br><span class="line">                <span class="keyword">return</span> ans+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=cnt[now];</span><br><span class="line">            now=ch[now][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=root;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch[now][<span class="number">0</span>]&amp;&amp;x&lt;=size[ch[now][<span class="number">0</span>]])</span><br><span class="line">            now=ch[now][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=(ch[now][<span class="number">0</span>]?size[ch[now][<span class="number">0</span>]]:<span class="number">0</span>)+cnt[now];</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=tmp)<span class="keyword">return</span> key[now];</span><br><span class="line">            x-=tmp;</span><br><span class="line">            now=ch[now][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=ch[root][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span>(ch[now][<span class="number">1</span>])now=ch[now][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=ch[root][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(ch[now][<span class="number">0</span>])now=ch[now][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> whatever=rnk(x);</span><br><span class="line">    <span class="keyword">if</span>(cnt[root]&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[root]--;</span><br><span class="line">        pushup(root);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[root][<span class="number">0</span>]&amp;&amp;!ch[root][<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        clear(root);</span><br><span class="line">        root=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[root][<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> oldroot=root;</span><br><span class="line">        root=ch[root][<span class="number">1</span>];</span><br><span class="line">        f[root]=<span class="number">0</span>;</span><br><span class="line">        clear(oldroot);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(!ch[root][<span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> oldroot=root;</span><br><span class="line">        root=ch[root][<span class="number">0</span>];</span><br><span class="line">        f[root]=<span class="number">0</span>;</span><br><span class="line">        clear(oldroot);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> leftbig=pre(),oldroot=root;</span><br><span class="line">    splay(leftbig);</span><br><span class="line">    ch[root][<span class="number">1</span>]=ch[oldroot][<span class="number">1</span>];</span><br><span class="line">    f[ch[oldroot][<span class="number">1</span>]]=root;</span><br><span class="line">    clear(oldroot);</span><br><span class="line">    pushup(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;opt,&amp;x);</span><br><span class="line">        <span class="keyword">switch</span>(opt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: insert(x);                                  <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: del(x);                                     <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,rnk(x));                      <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>: <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,kth(x));                      <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>: insert(x);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,key[pre()]); del(x);<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>: insert(x);<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,key[next()]);del(x);<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文艺平衡树"><a href="#文艺平衡树" class="headerlink" title="文艺平衡树"></a>文艺平衡树</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> ch[<span class="number">100005</span>][<span class="number">2</span>],f[<span class="number">100005</span>],size[<span class="number">100005</span>],cnt[<span class="number">100005</span>],key[<span class="number">100005</span>],tag[<span class="number">100005</span>],data[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> sz,root,n,m,x,y;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch[f[x]][<span class="number">1</span>]==x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[x]=size[ch[x][<span class="number">0</span>]]+size[ch[x][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&amp;&amp;tag[x])</span><br><span class="line">    &#123;</span><br><span class="line">        tag[ch[x][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line">        tag[ch[x][<span class="number">1</span>]]^=<span class="number">1</span>;</span><br><span class="line">        swap(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line">        tag[x]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> old=f[x],oldf=f[old],whichx=get(x);</span><br><span class="line">    pushdown(old);</span><br><span class="line">    pushdown(x);</span><br><span class="line">    ch[old][whichx]=ch[x][whichx^<span class="number">1</span>];</span><br><span class="line">    f[ch[old][whichx]]=old;</span><br><span class="line">    ch[x][whichx^<span class="number">1</span>]=old;</span><br><span class="line">    f[old]=x;</span><br><span class="line">    f[x]=oldf;</span><br><span class="line">    <span class="keyword">if</span>(oldf)</span><br><span class="line">        ch[oldf][ch[oldf][<span class="number">1</span>]==old]=x;</span><br><span class="line">    pushup(old);</span><br><span class="line">    pushup(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">splay</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> goal)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fa;(fa=f[x])!=goal;rotate(x))</span><br><span class="line">        <span class="keyword">if</span>(f[fa]!=goal)</span><br><span class="line">            rotate((get(x)==get(fa))?fa:x);</span><br><span class="line">    <span class="keyword">if</span>(!goal)root=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">int</span> fa,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,now=++sz;</span><br><span class="line">    key[now]=data[mid];</span><br><span class="line">    f[now]=fa;</span><br><span class="line">    tag[now]=<span class="number">0</span>;</span><br><span class="line">    ch[now][<span class="number">0</span>]=build_tree(now,l,mid<span class="number">-1</span>);</span><br><span class="line">    ch[now][<span class="number">1</span>]=build_tree(now,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushup(now);</span><br><span class="line">    <span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rnk</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=root;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pushdown(now);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=size[ch[now][<span class="number">0</span>]])</span><br><span class="line">            now=ch[now][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            x-=size[ch[now][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!x)<span class="keyword">return</span> now;</span><br><span class="line">            now=ch[now][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l=rnk(l);</span><br><span class="line">    r=rnk(r+<span class="number">2</span>);</span><br><span class="line">    splay(l,<span class="number">0</span>);</span><br><span class="line">    splay(r,l);</span><br><span class="line">    pushdown(root);</span><br><span class="line">    tag[ch[ch[root][<span class="number">1</span>]][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pushdown(now);</span><br><span class="line">    <span class="keyword">if</span>(ch[now][<span class="number">0</span>])write(ch[now][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(key[now]!=-inf&amp;&amp;key[now]!=inf)<span class="built_in">printf</span>(<span class="string">"%d "</span>,key[now]);</span><br><span class="line">    <span class="keyword">if</span>(key[ch[now][<span class="number">1</span>]])write(ch[now][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)data[i+<span class="number">1</span>]=i;</span><br><span class="line">    data[<span class="number">1</span>]=-inf;data[n+<span class="number">2</span>]=inf;</span><br><span class="line">    root=build_tree(<span class="number">0</span>,<span class="number">1</span>,n+<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        turn(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    write(root);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="平板电视（pb-ds）版本"><a href="#平板电视（pb-ds）版本" class="headerlink" title="平板电视（pb_ds）版本"></a>平板电视（pb_ds）版本</h1><h2 id="普通平衡树-1"><a href="#普通平衡树-1" class="headerlink" title="普通平衡树"></a>普通平衡树</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line">tree&lt;<span class="keyword">long</span> <span class="keyword">long</span>,null_type,less&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;t;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;opt&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">            t.insert((x&lt;&lt;<span class="number">20</span>)+i);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">            t.erase(t.lower_bound(x&lt;&lt;<span class="number">20</span>));</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(t.order_of_key(x&lt;&lt;<span class="number">20</span>)+<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(*t.find_by_order(x<span class="number">-1</span>)&gt;&gt;<span class="number">20</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">5</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(*--t.lower_bound(x&lt;&lt;<span class="number">20</span>)&gt;&gt;<span class="number">20</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">6</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;(*t.lower_bound((x+<span class="number">1</span>)&lt;&lt;<span class="number">20</span>)&gt;&gt;<span class="number">20</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="文艺平衡树-1"><a href="#文艺平衡树-1" class="headerlink" title="文艺平衡树"></a>文艺平衡树</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_cxx;</span><br><span class="line">rope&lt;<span class="keyword">int</span>&gt;str,rstr;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	str.append(i),rstr.append(n-i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,l,r,st,ed;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">        st=l<span class="number">-1</span>,ed=r;</span><br><span class="line">        <span class="keyword">if</span>(st&gt;=ed)<span class="keyword">continue</span>;</span><br><span class="line">        rope&lt;<span class="keyword">int</span>&gt;tmp=str.substr(st+str.begin(),ed+str.begin());</span><br><span class="line">        str=str.substr(<span class="number">0</span>+str.begin(),st+str.begin())+rstr.substr(n-ed+rstr.begin(),n-st+rstr.begin())+str.substr(ed+str.begin(),str.length()+str.begin());</span><br><span class="line">        rstr=rstr.substr(rstr.begin(),n-ed+rstr.begin())+tmp+rstr.substr(n-st+rstr.begin(),rstr.length()+rstr.begin());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">"%d "</span>,str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://t1.picb.cc/uploads/2018/09/06/JW1a8i.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://t1.picb.cc/uploads/2018/09/06/JW1bXL.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>树链剖分</title>
    <url>/blog/data-TreeChainPartition/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>树链剖分的一些操作：</p>
<ul>
<li>查询子树范围</li>
<li>查询两点最短路径</li>
<li>求LCA ← 树剖LCA</li>
<li>最大子树</li>
<li>结合线段树可以做到：<ul>
<li>修改单点值/子树/两点间的值</li>
<li>查询单点值/子树/两点间的和/最大值/最小值</li>
<li>······</li>
</ul>
</li>
<li>······</li>
</ul>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>树剖+线段树（维护区间和）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tpos f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=getchar();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=getchar();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos,<span class="keyword">typename</span>... Tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x,Tpos &amp;...X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(x),scan(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop,<span class="keyword">typename</span>... Tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x,Tpop ...X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(x),<span class="built_in">putchar</span>(<span class="string">' '</span>),print(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> head[<span class="number">100005</span>],cnt,n,m,root,size[<span class="number">100005</span>],son[<span class="number">100005</span>],top[<span class="number">100005</span>],dep[<span class="number">100005</span>],fa[<span class="number">100005</span>],st[<span class="number">100005</span>],ed[<span class="number">100005</span>],dfx[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> p,a[<span class="number">100005</span>],add[<span class="number">400005</span>],ans[<span class="number">400005</span>];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ne,fr,to;</span><br><span class="line">&#125;e[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adde</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;head[u],u,v&#125;;head[u]=cnt;</span><br><span class="line">    e[++cnt]=(edge)&#123;head[v],v,u&#125;;head[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    size[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u],v;i;i=e[i].ne)</span><br><span class="line">    &#123;</span><br><span class="line">        v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v!=fa[u])</span><br><span class="line">        &#123;</span><br><span class="line">            fa[v]=u;</span><br><span class="line">            dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">            dfs1(v);</span><br><span class="line">            size[u]+=size[v];</span><br><span class="line">            <span class="keyword">if</span>(size[v]&gt;size[son[u]])son[u]=v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> dfn;</span><br><span class="line">    st[u]=++dfn;</span><br><span class="line">    dfx[dfn]=u;</span><br><span class="line">    <span class="keyword">if</span>(son[u])</span><br><span class="line">    &#123;</span><br><span class="line">        top[son[u]]=top[u];</span><br><span class="line">        dfs2(son[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u],v;i;i=e[i].ne)</span><br><span class="line">    &#123;</span><br><span class="line">        v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v!=fa[u]&amp;&amp;v!=son[u])</span><br><span class="line">        &#123;</span><br><span class="line">            top[v]=v;</span><br><span class="line">            dfs2(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ed[u]=dfn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ls</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;ans[x]=(ans[ls(x)]+ans[rs(x)])%p;ans[x]%=p;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=a[dfx[l]];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(x),l,mid);</span><br><span class="line">    build(rs(x),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    add[ls(x)]=(add[ls(x)]+add[x])%p;</span><br><span class="line">    add[rs(x)]=(add[rs(x)]+add[x])%p;</span><br><span class="line">    ans[ls(x)]=(ans[ls(x)]+(add[x]*(mid-l+<span class="number">1</span>))%p)%p;</span><br><span class="line">    ans[rs(x)]=(ans[rs(x)]+(add[x]*(r-mid))%p)%p;</span><br><span class="line">    add[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addup</span><span class="params">(<span class="keyword">int</span> nl,<span class="keyword">int</span> nr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=(ans[x]+(k*(r-l+<span class="number">1</span>))%p)%p;</span><br><span class="line">        add[x]=(add[x]+k)%p;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(x,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)addup(nl,nr,l,mid,ls(x),k);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=nr)addup(nl,nr,mid+<span class="number">1</span>,r,rs(x),k);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)<span class="keyword">return</span> ans[x]%p;</span><br><span class="line">    pushdown(x,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)res+=query(ql,qr,l,mid,ls(x));</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=qr)res+=query(ql,qr,mid+<span class="number">1</span>,r,rs(x));</span><br><span class="line">    <span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addxy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);</span><br><span class="line">        addup(st[top[x]],st[x],<span class="number">1</span>,n,<span class="number">1</span>,z);</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(st[x]&gt;st[y])swap(x,y);</span><br><span class="line">    addup(st[x],st[y],<span class="number">1</span>,n,<span class="number">1</span>,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryxy</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top[x]!=top[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[top[x]]&lt;dep[top[y]])swap(x,y);</span><br><span class="line">        res+=query(st[top[x]],st[x],<span class="number">1</span>,n,<span class="number">1</span>),res%=p;</span><br><span class="line">        x=fa[top[x]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(st[x]&gt;st[y])swap(x,y);</span><br><span class="line">    res+=query(st[x],st[y],<span class="number">1</span>,n,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(n,m,root,p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scan(a[i]);a[i]%=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,u,v;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scan(u,v);</span><br><span class="line">        adde(u,v);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(root);dfs2(root);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,y,z;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scan(opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            scan(x,y,z);z%=p;</span><br><span class="line">            addxy(x,y,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            scan(x,y);</span><br><span class="line">            print(queryxy(x,y)),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            scan(x,z);z%=p;</span><br><span class="line">            addup(st[x],ed[x],<span class="number">1</span>,n,<span class="number">1</span>,z);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            scan(x);</span><br><span class="line">            print(query(st[x],ed[x],<span class="number">1</span>,n,<span class="number">1</span>)),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树</title>
    <url>/blog/data-SegmentTree/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ls</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="线段树1"><a href="#线段树1" class="headerlink" title="线段树1"></a><a href="https://www.luogu.org/problemnew/show/P3372" target="_blank" rel="noopener">线段树1</a></h1><p>区间加减，区间查询</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;ans[x]=ans[ls(x)]+ans[rs(x)];&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=a[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(x),l,mid);</span><br><span class="line">    build(rs(x),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    add[ls(x)]=add[ls(x)]+add[x];</span><br><span class="line">    add[rs(x)]=add[rs(x)]+add[x];</span><br><span class="line">    ans[ls(x)]=ans[ls(x)]+add[x]*(mid-l+<span class="number">1</span>);</span><br><span class="line">    ans[rs(x)]=ans[rs(x)]+add[x]*(r-mid);</span><br><span class="line">    add[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addup</span><span class="params">(<span class="keyword">int</span> nl,<span class="keyword">int</span> nr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=ans[x]+k*(r-l+<span class="number">1</span>);</span><br><span class="line">        add[x]=add[x]+k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)addup(nl,nr,l,mid,ls(x),k);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=nr)addup(nl,nr,mid+<span class="number">1</span>,r,rs(x),k);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line">    addup(l,r,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)<span class="keyword">return</span> ans[x];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)res+=query(ql,qr,l,mid,ls(x));</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=qr)res+=query(ql,qr,mid+<span class="number">1</span>,r,rs(x));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">    print(query(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of_scan&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(__Type_of_scan &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __Type_of_scan f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=getchar();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=getchar();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of_print&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(__Type_of_print x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">100005</span>],ans[<span class="number">400005</span>],add[<span class="number">400005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ls</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;ans[x]=ans[ls(x)]+ans[rs(x)];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[x]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=a[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(x),l,mid);</span><br><span class="line">    build(rs(x),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    add[ls(x)]=add[ls(x)]+add[x];</span><br><span class="line">    add[rs(x)]=add[rs(x)]+add[x];</span><br><span class="line">    ans[ls(x)]=ans[ls(x)]+add[x]*(mid-l+<span class="number">1</span>);</span><br><span class="line">    ans[rs(x)]=ans[rs(x)]+add[x]*(r-mid);</span><br><span class="line">    add[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addup</span><span class="params">(<span class="keyword">int</span> nl,<span class="keyword">int</span> nr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=ans[x]+k*(r-l+<span class="number">1</span>);</span><br><span class="line">        add[x]=add[x]+k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)addup(nl,nr,l,mid,ls(x),k);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=nr)addup(nl,nr,mid+<span class="number">1</span>,r,rs(x),k);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)<span class="keyword">return</span> ans[x];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)res+=query(ql,qr,l,mid,ls(x));</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=qr)res+=query(ql,qr,mid+<span class="number">1</span>,r,rs(x));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(n),scan(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        scan(a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,y;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scan(opt),scan(x),scan(y);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">            scan(k);</span><br><span class="line">            addup(x,y,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            print(query(x,y,<span class="number">1</span>,n,<span class="number">1</span>)),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="线段树2"><a href="#线段树2" class="headerlink" title="线段树2"></a><a href="https://www.luogu.org/problemnew/show/P3373" target="_blank" rel="noopener">线段树2</a></h1><p>模意义下：区间乘，区间加减，区间查询</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;ans[x]=(ans[ls(x)]+ans[rs(x)])%p;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[x]=<span class="number">0</span>;mul[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=a[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(x),l,mid);</span><br><span class="line">    build(rs(x),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    mul[ls(x)]=(mul[ls(x)]*mul[x])%p;</span><br><span class="line">    mul[rs(x)]=(mul[rs(x)]*mul[x])%p;</span><br><span class="line">    add[ls(x)]=(add[ls(x)]*mul[x])%p;</span><br><span class="line">    add[rs(x)]=(add[rs(x)]*mul[x])%p;</span><br><span class="line">    ans[ls(x)]=(ans[ls(x)]*mul[x])%p;</span><br><span class="line">    ans[rs(x)]=(ans[rs(x)]*mul[x])%p;</span><br><span class="line">    mul[x]=<span class="number">1</span>;</span><br><span class="line">    add[ls(x)]=(add[ls(x)]+add[x])%p;</span><br><span class="line">    add[rs(x)]=(add[rs(x)]+add[x])%p;</span><br><span class="line">    ans[ls(x)]=(ans[ls(x)]+add[x]*(mid-l+<span class="number">1</span>))%p;</span><br><span class="line">    ans[rs(x)]=(ans[rs(x)]+add[x]*(r-mid))%p;</span><br><span class="line">    add[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addup</span><span class="params">(<span class="keyword">int</span> nl,<span class="keyword">int</span> nr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=(ans[x]+k*(r-l+<span class="number">1</span>))%p;</span><br><span class="line">        add[x]=(add[x]+k)%p;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)addup(nl,nr,l,mid,ls(x),k);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=nr)addup(nl,nr,mid+<span class="number">1</span>,r,rs(x),k);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line">    addup(l,r,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mulup</span><span class="params">(<span class="keyword">int</span> nl,<span class="keyword">int</span> nr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=(ans[x]*k)%p;</span><br><span class="line">        mul[x]=(mul[x]*k)%p;</span><br><span class="line">        add[x]=(add[x]*k)%p;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)mulup(nl,nr,l,mid,ls(x),k);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=nr)mulup(nl,nr,mid+<span class="number">1</span>,r,rs(x),k);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line">    mulup(l,r,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)<span class="keyword">return</span> ans[x]%p;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)res+=query(ql,qr,l,mid,ls(x));</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=qr)res+=query(ql,qr,mid+<span class="number">1</span>,r,rs(x));</span><br><span class="line">    <span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line">    print(query(l,r,<span class="number">1</span>,n,<span class="number">1</span>));</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of_scan&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(__Type_of_scan &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __Type_of_scan f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=getchar();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=getchar();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of_print&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(__Type_of_print x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">100005</span>],ans[<span class="number">400005</span>],add[<span class="number">400005</span>],mul[<span class="number">400005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ls</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rs</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;ans[x]=(ans[ls(x)]+ans[rs(x)])%p;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add[x]=<span class="number">0</span>;mul[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=a[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(x),l,mid);</span><br><span class="line">    build(rs(x),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    mul[ls(x)]=(mul[ls(x)]*mul[x])%p;</span><br><span class="line">    mul[rs(x)]=(mul[rs(x)]*mul[x])%p;</span><br><span class="line">    add[ls(x)]=(add[ls(x)]*mul[x])%p;</span><br><span class="line">    add[rs(x)]=(add[rs(x)]*mul[x])%p;</span><br><span class="line">    ans[ls(x)]=(ans[ls(x)]*mul[x])%p;</span><br><span class="line">    ans[rs(x)]=(ans[rs(x)]*mul[x])%p;</span><br><span class="line">    mul[x]=<span class="number">1</span>;</span><br><span class="line">    add[ls(x)]=(add[ls(x)]+add[x])%p;</span><br><span class="line">    add[rs(x)]=(add[rs(x)]+add[x])%p;</span><br><span class="line">    ans[ls(x)]=(ans[ls(x)]+add[x]*(mid-l+<span class="number">1</span>))%p;</span><br><span class="line">    ans[rs(x)]=(ans[rs(x)]+add[x]*(r-mid))%p;</span><br><span class="line">    add[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addup</span><span class="params">(<span class="keyword">int</span> nl,<span class="keyword">int</span> nr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=(ans[x]+k*(r-l+<span class="number">1</span>))%p;</span><br><span class="line">        add[x]=(add[x]+k)%p;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)addup(nl,nr,l,mid,ls(x),k);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=nr)addup(nl,nr,mid+<span class="number">1</span>,r,rs(x),k);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mulup</span><span class="params">(<span class="keyword">int</span> nl,<span class="keyword">int</span> nr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=l&amp;&amp;r&lt;=nr)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[x]=(ans[x]*k)%p;</span><br><span class="line">        mul[x]=(mul[x]*k)%p;</span><br><span class="line">        add[x]=(add[x]*k)%p;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(nl&lt;=mid)mulup(nl,nr,l,mid,ls(x),k);</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=nr)mulup(nl,nr,mid+<span class="number">1</span>,r,rs(x),k);</span><br><span class="line">    push_up(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;r&lt;=qr)<span class="keyword">return</span> ans[x]%p;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    push_down(x,l,r);</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=mid)res+=query(ql,qr,l,mid,ls(x));</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&lt;=qr)res+=query(ql,qr,mid+<span class="number">1</span>,r,rs(x));</span><br><span class="line">    <span class="keyword">return</span> res%p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(n),scan(m),scan(p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        scan(a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,y;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scan(opt),scan(x),scan(y);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">            scan(k);</span><br><span class="line">            mulup(x,y,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">            scan(k);</span><br><span class="line">            addup(x,y,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            print(query(x,y,<span class="number">1</span>,n,<span class="number">1</span>)),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>树状数组</title>
    <url>/blog/data-BinaryIndexTree/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="树状数组1"><a href="#树状数组1" class="headerlink" title="树状数组1"></a><a href="https://www.luogu.org/problemnew/show/P3374" target="_blank" rel="noopener">树状数组1</a></h1><p>单点修改，区间查询。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要先</span></span><br><span class="line">    add(i,a[i]);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        tree[x]+=d;</span><br><span class="line">&#125;</span><br><span class="line">   add(x,k);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        s+=tree[x];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> xb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>;</span><br><span class="line">    s+=ask(xb);</span><br><span class="line">    s-=ask(xa<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,range_ask(xa,xb));</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tree[<span class="number">500005</span>];</span><br><span class="line"><span class="keyword">int</span> nx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        tree[x]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> xb,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(xa,d);</span><br><span class="line">    add(xb+<span class="number">1</span>,-d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        s+=tree[x];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> xb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>;</span><br><span class="line">    s+=ask(xb);</span><br><span class="line">    s-=ask(xa<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;nx,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=nx;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        add(i,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,xa,xb;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k; </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>,&amp;x,&amp;k);</span><br><span class="line">            add(x,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;xa,&amp;xb);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,range_ask(xa,xb));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="树状数组2"><a href="#树状数组2" class="headerlink" title="树状数组2"></a><a href="https://www.luogu.org/problemnew/show/P3368" target="_blank" rel="noopener">树状数组2</a></h1><p>区间修改，单点查询。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要先</span></span><br><span class="line">    range_add(i,i,a[i]);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        tree[x]+=d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> xb,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(xa,d);</span><br><span class="line">    add(xb+<span class="number">1</span>,-d);</span><br><span class="line">&#125;</span><br><span class="line">    range_add(xa,xb,k);</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        s+=tree[x];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ask(x));</span><br></pre></td></tr></table></figure>

<p>完整代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tree[<span class="number">500005</span>];</span><br><span class="line"><span class="keyword">int</span> nx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        tree[x]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> xb,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(xa,d);</span><br><span class="line">    add(xb+<span class="number">1</span>,-d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        s+=tree[x];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> xb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>;</span><br><span class="line">    s+=ask(xb);</span><br><span class="line">    s-=ask(xa<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;nx,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=nx;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        range_add(i,i,x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,xa,xb;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;xa,&amp;xb,&amp;k);</span><br><span class="line">            range_add(xa,xb,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ask(x));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>kmp</title>
    <url>/blog/string-kmp/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>字符串的经典类型有一项为单串匹配问题，这是指一个模式串在一个文本串中出现了多少次并求出出现的位置的一个问题。<br>我们称模式串长为$n$，文本串长为$m$，那么有</p>
<ul>
<li>理论复杂度下界$O(n+m)$。</li>
</ul>
<h1 id="考虑暴力"><a href="#考虑暴力" class="headerlink" title="考虑暴力"></a>考虑暴力</h1><p>每次在文本串中的每一个位置从前往后匹配尝试是否正确。</p>
<ul>
<li>对于随机数据来说十分优秀，甚至有时可以达到近$O(m)$的复杂度，但是会被 “aaaaaaaa”文本串和”aaa”模式串 这样的数据卡到$O(nm)$。</li>
</ul>
<h1 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h1><p>我们考虑，我们希望找到一个方便的转移，使得我们模式串的当前一位匹配失败了可以及时地转到另一个地方匹配，这样就减少了不必要的匹配次数。<br><img src="" alt=""><br><img src="" alt=""><br><img src="" alt=""><br><img src="" alt=""><br><img src="" alt=""><br><img src="" alt="">  </p>
<p>代码如下：<br>我们从下标1开始存储（读入方式为scanf(“%s”,s+1);）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文本串为s1，模式串为s2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getnext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s2+<span class="number">1</span>);</span><br><span class="line">    next[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,j;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j=next[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(s2[i]!=s2[j+<span class="number">1</span>]&amp;&amp;j)</span><br><span class="line">            j=next[j];</span><br><span class="line">        <span class="keyword">if</span>(s2[i]==s2[j+<span class="number">1</span>])</span><br><span class="line">            next[i]=j+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            next[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getnext();</span><br><span class="line">    <span class="keyword">int</span> n=<span class="built_in">strlen</span>(s2+<span class="number">1</span>),m=<span class="built_in">strlen</span>(s1+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(s1[i]!=s2[j+<span class="number">1</span>]&amp;&amp;j)</span><br><span class="line">            j=next[j];</span><br><span class="line">        <span class="keyword">if</span>(s1[i]==s2[j+<span class="number">1</span>])</span><br><span class="line">            j++;</span><br><span class="line">        <span class="keyword">if</span>(j==n)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i-n+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>gcd和exgcd</title>
    <url>/blog/gcd-and-exgcd/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h1><p>STL库中有个template化的非递归版gcd，需要调用<code>&lt;alogorithm&gt;</code><br>使用方式是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">c=__gcd(a,b);</span><br></pre></td></tr></table></figure>

<p>手写的话：</p>
<p>递归版：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> (!b)?a:gcd(b,a%b);&#125;</span><br></pre></td></tr></table></figure>

<p>非递归版：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">while</span>(b)&#123;<span class="keyword">int</span> t=a%b;a=b;b=t;&#125;<span class="keyword">return</span> a;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="exgcd"><a href="#exgcd" class="headerlink" title="exgcd"></a>exgcd</h1><p>递归版：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)&#123;x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span> a;&#125;</span><br><span class="line">    <span class="keyword">int</span> t=gcd(b,a%b,y,x);y-=a/b*x;<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>非递归版：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=a%b,x0=<span class="number">1</span>,y0=<span class="number">0</span>,x1=<span class="number">0</span>,y1=<span class="number">1</span>;x=x1;y=y1;</span><br><span class="line">    <span class="keyword">while</span>(t)</span><br><span class="line">    &#123;</span><br><span class="line">        x=x0-a/b*x1,y=y0-a/b*y1;</span><br><span class="line">        x0=x1,y0=y1;x1=x,y1=y;</span><br><span class="line">        a=b,b=t,t=a%b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T53818 【[退役欢乐赛Day2T3]谁是退役的人】</title>
    <url>/blog/solution-t53818/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T53818" target="_blank" rel="noopener">LuoguT53818</a>:</p>
<p>Splay？Rotate？不不不！这些都是蒟蒻出题人吓唬做题人的道具而已。</p>
<p>实际上 rotate 操作在这里起到的作用等价于将节点的父节点染为相同颜色。原因就是在rotate(x)之后，x 的原父节点 y 的另一个儿子变成了 x 的后代，而 y 变成了 x 的后代。然后它们都被重新染色。而且这种染色对于其他的子树没有任何影响。</p>
<p>学习子树被覆盖只需判断其祖先们有一个被覆盖。当然，由于数据范围过小，所以也可以遍历子树进行赋值。而对于另一种情况，可以打标记啊什么的，但是我不会写……而且数据太小，所以每次就暴力染色即可。</p>
<p>首先要维护好一棵树的基本信息，比如深度和子树大小什么的。</p>
<p>直接写三个人三棵树可能会比较难受，所以可以先写一个人一棵树，然后把数组加一维得到三个人三棵树的写法。</p>
<hr>
<p>如果不知道世界最强OI教练的英文首字母缩写大写，可以查看<a href="https://www.zhangkai.xin/">博客</a>的友链。</p>
<p>本题By：<a href="https://www.luogu.org/space/show?uid=61819" target="_blank" rel="noopener">asdfghjkl123</a></p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T53817 【[退役欢乐赛Day2T2]谁是最神的人】</title>
    <url>/blog/solution-t53817/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T53817" target="_blank" rel="noopener">LuoguT53817</a>:</p>
<p>可以观察到，数据范围贼小，所以首先，有耐性和心态好的人可以通过极其优秀的暴力过掉，然后呢，最强的那个人还考虑了状压DP的做法<del>但我不会</del>但数据小还能想到的办法当然是随机算法——模拟退火！但由于数据忒小了，其实写个真随机性算法每次随机数据排列分组贪心然后取最优即可</p>
<hr>
<p>如果不知道机房最神的人的英文首字母缩写大写，可以查看<a href="https://www.zhangkai.xin/">博客</a>的友链。</p>
<p>本题By：<a href="https://www.luogu.org/space/show?uid=75939" target="_blank" rel="noopener">Shirai_Kuroko</a></p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T53816 【[退役欢乐赛Day2T1]谁是最惨的人】</title>
    <url>/blog/solution-t53816/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T53816" target="_blank" rel="noopener">LuoguT53816</a>:</p>
<p>按思路模拟即可。</p>
<p>要点：</p>
<ol>
<li>注意’\0’会影响字符串输出</li>
<li>后输入的字符串应覆盖前面输入的字符串</li>
</ol>
<hr>
<p>如果不知道机房最惨者的英文首字母缩写大写，可以查看<a href="https://www.zhangkai.xin/">博客</a>的友链。</p>
<p>本题By：<a href="https://www.luogu.org/space/show?uid=59593" target="_blank" rel="noopener">Peter_Matthew</a></p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T53815 【[退役欢乐赛Day1T3]高二退役的你】</title>
    <url>/blog/solution-t53815/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T53815" target="_blank" rel="noopener">LuoguT53815</a>:</p>
<p>在数据不水的情况下</p>
<p>显然可以用贪心处理，最后选取的子矩阵的和为题目a中一段难度和乘以题目b中一段难度和，我们可以贪心，处理在每一套题目中长度为l的难度和的最小值，这样可以保证在难度不超过C蒟蒻能力的情况下可以AC的题更多。</p>
<hr>
<p>如果不知道机房中最蒟蒻的人的英文首字母缩写大写，可以查看<a href="https://www.zhangkai.xin/">博客</a>的友链。</p>
<p>本题By：<a href="https://www.luogu.org/space/show?uid=59934" target="_blank" rel="noopener">cs18</a></p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T53814 【[退役欢乐赛Day1T2]高三吊打着你】</title>
    <url>/blog/solution-t53814/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T53814" target="_blank" rel="noopener">LuoguT53814</a>:</p>
<p>很显然，此题是一道搜索水题，适合于初入OI的萌新</p>
<p>法1：迭代加深，全局设置步数，dfs所有能到达的点若包含则输出当前步数（数据小于50）</p>
<p>法2：bfs （数据小于1000）两种方式跑，第一次跑到的一定最优</p>
<p>法2优化：若数据大于2000，我们考虑双向bfs</p>
<p>当然了，这道题数据只有20，我们怎么写都可以<br>qwq</p>
<hr>
<p>如果不知道机房清华爷的英文首字母缩写大写，可以查看<a href="https://www.zhangkai.xin/">博客</a>的友链。</p>
<p>本题By：<a href="https://www.luogu.org/space/show?uid=60874" target="_blank" rel="noopener">陈子骏</a></p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T53813 【[退役欢乐赛Day1T1]高一机惨着你】</title>
    <url>/blog/solution-t53813/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T53813" target="_blank" rel="noopener">LuoguT53813</a>:</p>
<p>题意是在说：每次比较被机惨的两个人的话的长度。<br>那么我们每次比较长度，第一个长则为bigger，第二个长则为less，同样长则为XD。</p>
<hr>
<p>如果不知道机房最强机惨王的英文首字母缩写大写，可以查看<a href="https://www.zhangkai.xin/">博客</a>的友链。</p>
<p>本题By：<a href="https://www.luogu.org/space/show?uid=59593" target="_blank" rel="noopener">Peter_Matthew</a></p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U19727 【PP游戏#1 彩环游戏（Color Rings Game）】</title>
    <url>/blog/solution-u19727/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/U19727" target="_blank" rel="noopener">LuoguU19727</a>:</p>
<p>按题意模拟暴力即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>][<span class="number">5</span>][<span class="number">5</span>];<span class="comment">//x,y,sz;</span></span><br><span class="line"><span class="keyword">int</span> h[<span class="number">15</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> st[<span class="number">15</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> tag,t;</span><br><span class="line">    <span class="built_in">queue</span>&lt;pair&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c=<span class="number">1</span>;c&lt;=n;c++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            tag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                t=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i][j][k]==c)</span><br><span class="line">                    &#123;</span><br><span class="line">                        t=<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!t)</span><br><span class="line">                &#123;</span><br><span class="line">                    tag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">                        <span class="keyword">if</span>(a[i][j][k]==c)</span><br><span class="line">                            q.push(make_pair(make_pair(i,j),k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                t=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(a[i][j][k]==c)</span><br><span class="line">                    &#123;</span><br><span class="line">                        t=<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!t)</span><br><span class="line">                &#123;</span><br><span class="line">                    tag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">                        <span class="keyword">if</span>(a[i][j][k]==c)</span><br><span class="line">                            q.push(make_pair(make_pair(i,j),k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i][i][k]==c)</span><br><span class="line">                &#123;</span><br><span class="line">                    t=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!t)</span><br><span class="line">            &#123;</span><br><span class="line">                tag=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">                    <span class="keyword">if</span>(a[i][i][k]==c)</span><br><span class="line">                        q.push(make_pair(make_pair(i,i),k));</span><br><span class="line">        &#125;</span><br><span class="line">        tag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a[i][<span class="number">4</span>-i][k]==c)</span><br><span class="line">                &#123;</span><br><span class="line">                    t=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!t)</span><br><span class="line">            &#123;</span><br><span class="line">                tag=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">                    <span class="keyword">if</span>(a[i][<span class="number">4</span>-i][k]==c)</span><br><span class="line">                        q.push(make_pair(make_pair(i,<span class="number">4</span>-i),k));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j][<span class="number">1</span>]==a[i][j][<span class="number">2</span>]&amp;&amp;a[i][j][<span class="number">2</span>]==a[i][j][<span class="number">3</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">                    q.push(make_pair(make_pair(i,j),k));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x=q.front().first.first,y=q.front().first.second,c=q.front().second;q.pop();</span><br><span class="line">        a[x][y][c]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(d&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">                    <span class="keyword">if</span>(a[i][j][k])</span><br><span class="line">                        <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,st[i][<span class="number">0</span>],st[i][<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t[<span class="number">5</span>][<span class="number">5</span>][<span class="number">5</span>];<span class="built_in">memcpy</span>(t,a,<span class="keyword">sizeof</span>(t));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> tag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(h[d][k]&amp;&amp;a[i][j][k])</span><br><span class="line">                &#123;</span><br><span class="line">                    tag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i][j][k]=(h[d][k]?h[d][k]:a[i][j][k]);</span><br><span class="line">                &#125;</span><br><span class="line">                st[d][<span class="number">0</span>]=i;st[d][<span class="number">1</span>]=j;</span><br><span class="line">                check();dfs(d+<span class="number">1</span>);</span><br><span class="line">                st[d][<span class="number">0</span>]=<span class="number">0</span>;st[d][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">                <span class="built_in">memcpy</span>(a,t,<span class="keyword">sizeof</span>(a));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i][j][k]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;h[i][j]);</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>NOIp2011-2017总结</title>
    <url>/blog/noip-summary/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="NOIp2011"><a href="#NOIp2011" class="headerlink" title="NOIp2011"></a>NOIp2011</h1><p>Link to Francis_noco（孙启皓）</p>
<h1 id="NOIp2012"><a href="#NOIp2012" class="headerlink" title="NOIp2012"></a>NOIp2012</h1><h2 id="D1T1LuoguP1079-Vigenere-密码"><a href="#D1T1LuoguP1079-Vigenere-密码" class="headerlink" title="D1T1LuoguP1079:Vigenère 密码"></a>D1T1<a href="https://www.luogu.org/problemnew/show/P1079" target="_blank" rel="noopener">LuoguP1079</a>:Vigenère 密码</h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给你一串加密后的字符串和一串加密钥匙，给你加密函数（以表的方式给出），求原字符串。</p>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><p>这是一道很水的模拟题，我们可以建一张表大小52$\times$52（注意字母的大小写只与原串与加密串有关）暴力模拟。但是作为一个<del>研究字符串很久的</del>蒟蒻，我们利用这张表的性质（假设A-Z表示1-26，那么表上的第i行第j列的值为(i+j-2)%26+1），反推加密串与加密钥匙的表的性质（假设A-Z表示1-26，那么表上的第行第j列的值为(j-i+26)%26+1）。</p>
<h3 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码"></a>题目代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> m[<span class="number">1005</span>],k[<span class="number">105</span>],c[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dxx</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="string">'a'</span>&amp;&amp;x&lt;=<span class="string">'z'</span>)<span class="keyword">return</span> <span class="string">'a'</span><span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="string">'A'</span>&amp;&amp;x&lt;=<span class="string">'Z'</span>)<span class="keyword">return</span> <span class="string">'A'</span><span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">R</span><span class="params">(<span class="keyword">int</span> m_i,<span class="keyword">int</span> k_i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (m[m_i]-dxx(m[m_i])+k[k_i%<span class="built_in">strlen</span>(k)]-dxx(k[k_i%<span class="built_in">strlen</span>(k)])<span class="number">-2</span>)%<span class="number">26</span>+<span class="number">1</span>+dxx(m[m_i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">R_1</span><span class="params">(<span class="keyword">int</span> c_i,<span class="keyword">int</span> k_i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c[c_i]-dxx(c[c_i])-k[k_i%<span class="built_in">strlen</span>(k)]+dxx(k[k_i%<span class="built_in">strlen</span>(k)])+<span class="number">26</span>)%<span class="number">26</span>+<span class="number">1</span>+dxx(c[c_i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(c);i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c"</span>,R_1(i,i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D1T2LuoguP1080-国王游戏"><a href="#D1T2LuoguP1080-国王游戏" class="headerlink" title="D1T2LuoguP1080:国王游戏"></a>D1T2<a href="https://www.luogu.org/problemnew/show/P1080" target="_blank" rel="noopener">LuoguP1080</a>:国王游戏</h2><h3 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h3><p>有1个国王n个大臣，每人左右手里都有数，每个大臣拿到的值是他前面人的左手值的积与他右手值的商，你需要将大臣排序然后把国王放在大臣前面，然后求大臣的值的最大值最小是多少。</p>
<h3 id="题目解析-1"><a href="#题目解析-1" class="headerlink" title="题目解析"></a>题目解析</h3><p>本题的唯一难点是排序大臣，如果i和j两个大臣相邻那么i排在j前面的必要条件是$total\times a[i]/b[j]&lt;total\times a[j]/b[i]$，也就是说$a[i]\times b[i]&lt;a[j]\times b[j]$。<br>其次就是注意高精度不要写流式输入输出，否则会TLE。</p>
<h3 id="题目代码-1"><a href="#题目代码-1" class="headerlink" title="题目代码"></a>题目代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> now[<span class="number">20005</span>],sum[<span class="number">20005</span>],ans[<span class="number">20005</span>],add[<span class="number">20005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ren</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a,b,c;</span><br><span class="line">&#125;r[<span class="number">1010</span>];</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>],*p1=buf,*p2=buf;</span><br><span class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">100000</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of__scan&gt;</span><br><span class="line"><span class="keyword">void</span> _scan(__Type_of__scan &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">    __Type_of__scan f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=gc();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=gc();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100000</span>],*pp=buf;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pp-buf==<span class="number">100000</span>)fwrite(buf,<span class="number">1</span>,<span class="number">100000</span>,<span class="built_in">stdout</span>),pp=buf;</span><br><span class="line">    *pp++=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of__print&gt;</span><br><span class="line"><span class="keyword">void</span> _print(__Type_of__print x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;pc(<span class="string">'-'</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)_print(x/<span class="number">10</span>);</span><br><span class="line">    pc(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fsh</span><span class="params">()</span></span>&#123;fwrite(buf,<span class="number">1</span>,pp-buf,<span class="built_in">stdout</span>);pp=buf;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">times</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(add,<span class="number">0</span>,<span class="keyword">sizeof</span>(add));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans[<span class="number">0</span>];i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i]=ans[i]*x;</span><br><span class="line">        add[i+<span class="number">1</span>]+=ans[i]/<span class="number">10</span>;</span><br><span class="line">        ans[i]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=ans[<span class="number">0</span>]+<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[i]+=add[i];</span><br><span class="line">        <span class="keyword">if</span>(ans[i]&gt;=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[i+<span class="number">1</span>]+=ans[i]/<span class="number">10</span>;</span><br><span class="line">            ans[i]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[<span class="number">0</span>]=max(ans[<span class="number">0</span>],i);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divition</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(add,<span class="number">0</span>,<span class="keyword">sizeof</span>(add));</span><br><span class="line">    <span class="keyword">int</span> q=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=ans[<span class="number">0</span>];i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        q*=<span class="number">10</span>;</span><br><span class="line">        q+=ans[i];</span><br><span class="line">        add[i]=q/x;</span><br><span class="line">        <span class="keyword">if</span>(add[<span class="number">0</span>]==<span class="number">0</span> &amp;&amp; add[i]!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            add[<span class="number">0</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        q%=x; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sum[<span class="number">0</span>]!=add[<span class="number">0</span>])</span><br><span class="line">    	<span class="keyword">return</span> add[<span class="number">0</span>]&gt;sum[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=add[<span class="number">0</span>];i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(add[i]!=sum[i])</span><br><span class="line">            <span class="keyword">return</span> add[i]&gt;sum[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=add[<span class="number">0</span>];i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        sum[i]=add[i];</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(ren a,ren b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _scan(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        _scan(r[i].a),_scan(r[i].b);</span><br><span class="line">        r[i].c=r[i].a*r[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(r+<span class="number">1</span>,r+n+<span class="number">1</span>,cmp);</span><br><span class="line">    ans[<span class="number">0</span>]=<span class="number">1</span>,ans[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        times(r[i<span class="number">-1</span>].a);</span><br><span class="line">        divition(r[i].b);</span><br><span class="line">        <span class="keyword">if</span>(compare())</span><br><span class="line">            cp();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=sum[<span class="number">0</span>];i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        _print(sum[i]);</span><br><span class="line">    fsh();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D1T3LuoguP1081-开车旅行"><a href="#D1T3LuoguP1081-开车旅行" class="headerlink" title="D1T3LuoguP1081:开车旅行"></a>D1T3<a href="https://www.luogu.org/problemnew/show/P1081" target="_blank" rel="noopener">LuoguP1081</a>:开车旅行</h2><h3 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h3><p>小A和小B决定利用假期外出旅行，他们将想去的城市从1到N编号，且编号较小的城市在编号较大的城市的西边，已知各个城市的海拔高度互不相同，记城市i的海拔高度为Hi，城市i和城市j之间的距离d[i,j]恰好是这两个城市海拔高度之差的绝对值，即d[i,j]=|Hi-Hj|。</p>
<p>旅行过程中，小A和小B轮流开车，第一天小A开车，之后每天轮换一次。他们计划选择一个城市S作为起点，一直向东行驶，并且最多行驶X公里就结束旅行。小A和小B的驾驶风格不同，小B总是沿着前进方向选择一个最近的城市作为目的地，而小A总是沿着前进方向选择第二近的城市作为目的地（注意：本题中如果当前城市到两个城市的距离相同，则认为离海拔低的那个城市更近）。如果其中任何一人无法按照自己的原则选择目的城市，或者到达目的地会使行驶的总距离超出X公里，他们就会结束旅行。</p>
<p>在启程之前，小A想知道两个问题：</p>
<ol>
<li>对于一个给定的X=X0，从哪一个城市出发，小A开车行驶的路程总数与小B行驶的路程总数的比值最小（如果小B的行驶路程为0，此时的比值可视为无穷大，且两个无穷大视为相等）。如果从多个城市出发，小A开车行驶的路程总数与小B行驶的路程总数的比值都最小，则输出海拔最高的那个城市。</li>
<li>对任意给定的X=Xi和出发城市Si，小A开车行驶的路程总数以及小B行驶的路程总数。</li>
</ol>
<h3 id="题目解析-2"><a href="#题目解析-2" class="headerlink" title="题目解析"></a>题目解析</h3><p>这题建议先把暴力模拟的70分做出来而不是直接打正解，考场上如果想不到用倍增，暴力拿70分也是很可观的</p>
<p>那么先说说暴力思路:<br>1)预处理</p>
<p>显然我们可以做下面这些事情:</p>
<p>c1[i]表示b在i选择的下一个城市（也就是在i东边距离i最近的城市）<br>c2[i]表示a在i选择的下一个城市（也就是在i东边距离i第二近的城市）<br>dist1[i]表示b从i到c1[i]的路程<br>dist2[i]表示a从i到c2[i]的路程  </p>
<p>我们可以从第n-1个城市枚举到第1个城市，在第i+1个城市到第n个城市之间</p>
<p>2)对于两个问题，分别模拟求解</p>
<p>由于a b是轮流驾驶的，我们可以用一个变量turn记录当前是谁在驾驶，turn为0时a驾驶，为1时b驾驶，然后根据题意记录a b分别走过的路程，判断总路程是否超过限制，模拟即可</p>
<p>得分：70暴力找最近和第二近，具体实现看代码</p>
<p>暴力打完了，接下来就是正解了</p>
<p>其实如果直接告诉你正解就是在暴力的基础上用倍增和双向链表优化一下，自己想想，慢慢调也能弄出来，所以还是建议先自己思考一下如何用倍增去优化，然后想想如何用双向链表去初始化</p>
<p>1)这里先说一下为什么用倍增</p>
<p>显然，对于每一个点i，a的选择是唯一的，b的选择也是唯一的，所以不存在最优解，可以用倍增</p>
<p>2)怎么使用双向链表初始化</p>
<p>首先把所有城市的高度和编号存入一个结构体，然后排序，记录一下每个城市排序后的位置。然后这个结构体数组可以直接加一个last域和next域改成双向链表，预处理的时候从1到n在链表上找到对应位置pos[i]，不难想到第一近和第二近一定在pos[i]-2 pos[i]-1 pos[i]+1 pos[i]+2之间，在这四个位置之间和上面的暴力是一样的处理，然后在链表中把pos[i]删去，这样的话由于1到n是从西到东的，链表中除了pos[i]以外的所有城市都在pos[i]东边，那么就可以O(N)预处理出c1 c2 dist1 dist2</p>
<p>3)倍增初始化</p>
<p>下面说说如何初始化倍增以及注意事项</p>
<p>我们定义dist3[i][j]为a和b从i分别开了1&lt;&lt;j次的距离，<br>dist4[i][j]为a和b从i分别开了1&lt;&lt;j次以后a的总路程，dist5同理，为a和b从i分别开了1&lt;&lt;j次以后b的总路程<br>c3[i][j]为a和b从i分别开了1&lt;&lt;j次以后他们在什么位置</p>
<p>对于j=0的情况是显然的</p>
<p>注意一下c1和c2不要弄混了</p>
<p>然后是j&gt;=1的情况</p>
<p>这里需要特别注意的是，j是在外层的，i是在内层的，千万不能搞反了（可能只有我这种蒟蒻会犯这种错），因为要先处理j-1的情形才能处理j，另外，如果c3[i][j]是0，说明不能走了，就不要去处理dist了</p>
<p>然后就初始化完了</p>
<p>4)对问题求解</p>
<p>我们先让a和b一起开，那么用c3和dist3就能得到一个近似最终的情况，最后由于是a先开的，要判断一下a是否可以继续开，因为之前是a开完b也开，可能再开dist3就超过限制而a再开一次并没有超过限制，所以这个判断是必要的，其余的与暴力相似</p>
<p>得分：100</p>
<h3 id="题目代码-2"><a href="#题目代码-2" class="headerlink" title="题目代码"></a>题目代码</h3><p>70分</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c1[<span class="number">100005</span>], c2[<span class="number">100005</span>], n, m, h[<span class="number">100005</span>] = &#123; INT_MAX &#125;, dist1[<span class="number">100005</span>], dist2[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of_scan&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(__Type_of_scan &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __Type_of_scan f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=getchar();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=getchar();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of_print&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(__Type_of_print x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> minv=INT_MAX;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        scan(h[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> minn=i+<span class="number">1</span>,minn2=<span class="number">0</span>;</span><br><span class="line">        dist1[i]=<span class="built_in">abs</span>(h[i]-h[i+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">2</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dist1[i]&gt;<span class="built_in">abs</span>(h[i]-h[j])||(dist1[i]==<span class="built_in">abs</span>(h[i]-h[j])&amp;&amp;h[j]&lt;h[minn]))</span><br><span class="line">            &#123;</span><br><span class="line">                dist2[i]=dist1[i];</span><br><span class="line">                dist1[i]=<span class="built_in">abs</span>(h[i]-h[j]);</span><br><span class="line">                minn2=minn;</span><br><span class="line">                minn=j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(dist2[i]==<span class="number">0</span>||dist2[i]&gt;<span class="built_in">abs</span>(h[i]-h[j])||(dist2[i]==<span class="built_in">abs</span>(h[i]-h[j])&amp;&amp;h[j]&lt;h[minn2]))</span><br><span class="line">            &#123;</span><br><span class="line">                dist2[i]=<span class="built_in">abs</span>(h[i]-h[j]);</span><br><span class="line">                minn2=j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        c1[i]=minn;</span><br><span class="line">        c2[i]=minn2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x0,ans=<span class="number">0</span>;</span><br><span class="line">    scan(x0);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a=<span class="number">0</span>,b=<span class="number">0</span>,loc=i,turn=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(turn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a+b+dist1[loc]&gt;x0||!c1[loc])<span class="keyword">break</span>;</span><br><span class="line">                b+=dist1[loc];</span><br><span class="line">                loc=c1[loc];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a+b+dist2[loc]&gt;x0||!c2[loc])<span class="keyword">break</span>;</span><br><span class="line">                a+=dist2[loc];</span><br><span class="line">                loc=c2[loc];</span><br><span class="line">            &#125;</span><br><span class="line">            turn^=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ans||<span class="number">1.0</span>*a/b-minv&lt;<span class="number">-0.00000001</span>||(<span class="built_in">fabs</span>(<span class="number">1.0</span>*a/b-minv)&lt;=<span class="number">0.00000001</span>&amp;&amp;h[ans]&lt;h[i]))</span><br><span class="line">        &#123;</span><br><span class="line">            minv=<span class="number">1.0</span>*a/b;</span><br><span class="line">            ans=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    scan(m);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> s,x,a=<span class="number">0</span>,b=<span class="number">0</span>,turn=<span class="number">0</span>;</span><br><span class="line">        scan(s),scan(x);</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(turn)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a+b+dist1[s]&gt;x||!c1[s])<span class="keyword">break</span>;</span><br><span class="line">                b+=dist1[s];</span><br><span class="line">                s=c1[s];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(a+b+dist2[s]&gt;x||!c2[s])<span class="keyword">break</span>;</span><br><span class="line">                a+=dist2[s];</span><br><span class="line">                s=c2[s];</span><br><span class="line">            &#125;</span><br><span class="line">            turn^=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>100分</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> c1[<span class="number">100005</span>],c2[<span class="number">100005</span>],c3[<span class="number">100005</span>][<span class="number">21</span>],n,m,pos[<span class="number">100005</span>],dist1[<span class="number">100005</span>],dist2[<span class="number">100005</span>],dist3[<span class="number">100005</span>][<span class="number">21</span>],dist4[<span class="number">100005</span>][<span class="number">21</span>],dist5[<span class="number">100005</span>][<span class="number">21</span>];</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of_scan&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(__Type_of_scan &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __Type_of_scan f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=getchar();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=getchar();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of_print&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(__Type_of_print x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> minv=INT_MAX;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chengshi</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> h;</span><br><span class="line">    <span class="keyword">int</span> bh,last,next;</span><br><span class="line">&#125;q[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(chengshi s,chengshi t)</span></span>&#123;<span class="keyword">return</span> s.h&lt;t.h;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> loc,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">1</span>&amp;&amp;x&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dist1[i]||dist1[i]&gt;<span class="built_in">abs</span>(q[loc].h-q[x].h)||(dist1[i]==<span class="built_in">abs</span>(q[loc].h-q[x].h)&amp;&amp;q[x].h&lt;q[pos[c1[i]]].h))</span><br><span class="line">        &#123;</span><br><span class="line">            dist2[i]=dist1[i];</span><br><span class="line">            dist1[i]=<span class="built_in">abs</span>(q[loc].h-q[x].h);</span><br><span class="line">            c2[i]=c1[i];</span><br><span class="line">            c1[i]=q[x].bh;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!dist2[i]||dist2[i]&gt;<span class="built_in">abs</span>(q[loc].h-q[x].h)||(dist2[i]==<span class="built_in">abs</span>(q[loc].h-q[x].h)&amp;&amp;q[x].h&lt;q[pos[c2[i]]].h))</span><br><span class="line">        &#123;</span><br><span class="line">            dist2[i]=<span class="built_in">abs</span>(q[loc].h-q[x].h);</span><br><span class="line">            c2[i]=q[x].bh;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)scan(q[i].h),q[i].bh=i;</span><br><span class="line">    sort(q+<span class="number">1</span>,q+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos[q[i].bh]=i;</span><br><span class="line">        <span class="keyword">if</span>(i!=<span class="number">1</span>)</span><br><span class="line">            q[i].last=i<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(i!=n)</span><br><span class="line">            q[i].next=i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,loc;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        loc=pos[i];</span><br><span class="line">        updata(i,loc,q[q[loc].last].last);</span><br><span class="line">        updata(i,loc,q[loc].last);</span><br><span class="line">        updata(i,loc,q[loc].next);</span><br><span class="line">        updata(i,loc,q[q[loc].next].next);</span><br><span class="line">        <span class="keyword">if</span>(q[loc].last)q[q[loc].last].next=q[loc].next;</span><br><span class="line">        <span class="keyword">if</span>(q[loc].next)q[q[loc].next].last=q[loc].last;</span><br><span class="line">        q[loc].last=q[loc].next=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dist4[i][<span class="number">0</span>]=dist2[i];</span><br><span class="line">        dist5[i][<span class="number">0</span>]=dist1[c2[i]];</span><br><span class="line">        dist3[i][<span class="number">0</span>]=dist2[i]+dist1[c2[i]];</span><br><span class="line">        c3[i][<span class="number">0</span>]=c1[c2[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">20</span>;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c3[i][j]=c3[c3[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(c3[i][j])</span><br><span class="line">            &#123;</span><br><span class="line">                dist3[i][j]=dist3[i][j<span class="number">-1</span>]+dist3[c3[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">                dist4[i][j]=dist4[i][j<span class="number">-1</span>]+dist4[c3[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">                dist5[i][j]=dist5[i][j<span class="number">-1</span>]+dist5[c3[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> xx,ans=<span class="number">0</span>;</span><br><span class="line">    scan(xx);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> a=<span class="number">0</span>,b=<span class="number">0</span>,loc=i,x0=xx;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">20</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dist3[loc][j]&amp;&amp;x0&gt;=dist3[loc][j])</span><br><span class="line">            &#123;</span><br><span class="line">                x0-=dist3[loc][j];</span><br><span class="line">                a+=dist4[loc][j];</span><br><span class="line">                b+=dist5[loc][j];</span><br><span class="line">                loc=c3[loc][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dist2[loc]&lt;=x0)a+=dist2[loc];</span><br><span class="line">        <span class="keyword">if</span>(a&lt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ans||<span class="number">1.0</span>*a/b-minv&lt;<span class="number">-0.00000001</span>||(<span class="built_in">fabs</span>(<span class="number">1.0</span>*a/b-minv)&lt;=<span class="number">0.00000001</span>&amp;&amp;q[pos[ans]].h&lt;q[pos[i]].h))</span><br><span class="line">        &#123;</span><br><span class="line">            minv=<span class="number">1.0</span>*a/b;</span><br><span class="line">            ans=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    scan(m);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> s,x,a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">        scan(x),scan(x);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">20</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dist3[s][j]&amp;&amp;x&gt;=dist3[s][j])</span><br><span class="line">            &#123;</span><br><span class="line">                x-=dist3[s][j];</span><br><span class="line">                a+=dist4[s][j];</span><br><span class="line">                b+=dist5[s][j];</span><br><span class="line">                s=c3[s][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dist2[s]&lt;=x)a+=dist2[s];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,a,b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D2T1LuoguP1082-同余方程"><a href="#D2T1LuoguP1082-同余方程" class="headerlink" title="D2T1LuoguP1082:同余方程"></a>D2T1<a href="https://www.luogu.org/problemnew/show/P1082" target="_blank" rel="noopener">LuoguP1082</a>:同余方程</h2><h3 id="题目大意-3"><a href="#题目大意-3" class="headerlink" title="题目大意"></a>题目大意</h3><p>求关于x的同余方程ax≡1(mod b)的最小正整数解。</p>
<h3 id="题目解析-3"><a href="#题目解析-3" class="headerlink" title="题目解析"></a>题目解析</h3><p>裸的数论题。<br>要注意：</p>
<ol>
<li>此题要求的就是ax mod b=1的最小正整数解。</li>
<li>题目要求最小正整数解，而我们可能求到负整数。由于负数取模是负数，而且绝对值小于模数所以我们加上模数再取模即可。</li>
<li>选用扩展欧几里得算法，注意写的时候要么x,y传址调用，要么x,y为全局变量，其余会挂掉。</li>
</ol>
<h3 id="题目代码-3"><a href="#题目代码-3" class="headerlink" title="题目代码"></a>题目代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a,b,x,y,z;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>;y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    exgcd(b,a%b);</span><br><span class="line">    z=x;x=y;</span><br><span class="line">    y=z-a/b*y;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">    exgcd(a,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(x+b)%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D2T2LuoguP1083-借教室"><a href="#D2T2LuoguP1083-借教室" class="headerlink" title="D2T2LuoguP1083:借教室"></a>D2T2<a href="https://www.luogu.org/problemnew/show/P1083" target="_blank" rel="noopener">LuoguP1083</a>:借教室</h2><h3 id="题目大意-4"><a href="#题目大意-4" class="headerlink" title="题目大意"></a>题目大意</h3><p>在大学期间，经常需要租借教室。大到院系举办活动，小到学习小组自习讨论，都需要向学校申请借教室。教室的大小功能不同，借教室人的身份不同，借教室的手续也不一样。</p>
<p>面对海量租借教室的信息，我们自然希望编程解决这个问题。</p>
<p>我们需要处理接下来n天的借教室信息，其中第i天学校有ri个教室可供租借。共有m份订单，每份订单用三个正整数描述，分别为dj,sj,tj，表示某租借者需要从第sj天到第tj天租借教室（包括第sj天和第tj天），每天需要租借dj个教室。</p>
<p>我们假定，租借者对教室的大小、地点没有要求。即对于每份订单，我们只需要每天提供dj个教室，而它们具体是哪些教室，每天是否是相同的教室则不用考虑。</p>
<p>借教室的原则是先到先得，也就是说我们要按照订单的先后顺序依次为每份订单分配教室。如果在分配的过程中遇到一份订单无法完全满足，则需要停止教室的分配，通知当前申请人修改订单。这里的无法满足指从第sj天到第tj天中有至少一天剩余的教室数量不足dj个。</p>
<p>现在我们需要知道，是否会有订单无法完全满足。如果有，需要通知哪一个申请人修改订单。</p>
<h3 id="题目解析-4"><a href="#题目解析-4" class="headerlink" title="题目解析"></a>题目解析</h3><p>二分订单号很容易想到，但是如何check？</p>
<p>线段树是可以的（但是此时你已显然不用再写二分）</p>
<p>然后我们可以用前缀和，用c[]作为前缀和数组，对于一个d[i],s[i],t[i],则将c[s[i]]+=d[i],c[t[i]+1]-=d[i]，<br>这是在一个订单的起始天+要借的房间数量，在结束天的下一天减去要借的房间数量。</p>
<p>当我们读入d,s,t，则操作c[s]=c[s]+d;c[t+1]=c[t+1]-d;<br>那么如果第i天在s和t之间，那么前i天的sum{c[i]}中有c[s],相当于已经记下第i天的订单数量了。如果第i天在t之后，前i天的sum{c[i]}中有c[s]和c[t],因为c[s]+d+c[t+1]-d=c[s]+c[t]，所以这个订单只对s和t中间天数起作用。</p>
<h3 id="题目代码-4"><a href="#题目代码-4" class="headerlink" title="题目代码"></a>题目代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans=<span class="number">20020420</span>;</span><br><span class="line"><span class="keyword">int</span> r[<span class="number">1000005</span>],c[<span class="number">1000005</span>],now;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">1000005</span>],s[<span class="number">1000005</span>],t[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(now&gt;x) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=x+<span class="number">1</span>;i&lt;=now;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[s[i]]-=d[i];</span><br><span class="line">            c[t[i]+<span class="number">1</span>]+=d[i];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=now+<span class="number">1</span>;i&lt;=x;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            c[s[i]]+=d[i];</span><br><span class="line">            c[t[i]+<span class="number">1</span>]-=d[i];</span><br><span class="line">        &#125;</span><br><span class="line">    now=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=c[i];</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;r[i])</span><br><span class="line">        	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;r[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;d[i],&amp;s[i],&amp;t[i]);</span><br><span class="line">    <span class="keyword">int</span> lt=<span class="number">1</span>,rt=m;</span><br><span class="line">    <span class="keyword">while</span>(lt&lt;=rt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(lt+rt)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            ans=min(ans,mid);</span><br><span class="line">            rt=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            lt=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="number">20020420</span>) </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1\n%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="D2T3LuoguP1084-疫情控制"><a href="#D2T3LuoguP1084-疫情控制" class="headerlink" title="D2T3LuoguP1084:疫情控制"></a>D2T3<a href="https://www.luogu.org/problemnew/show/P1084" target="_blank" rel="noopener">LuoguP1084</a>:疫情控制</h2><h3 id="题目大意-5"><a href="#题目大意-5" class="headerlink" title="题目大意"></a>题目大意</h3><p>H国有n个城市，这n个城市用n−1条双向道路相互连通构成一棵树，1号城市是首都，也是树中的根节点。</p>
<p>H国的首都爆发了一种危害性极高的传染病。当局为了控制疫情，不让疫情扩散到边境城市（叶子节点所表示的城市），决定动用军队在一些城市建立检查点，使得从首都到边境城市的每一条路径上都至少有一个检查点，边境城市也可以建立检查点。但特别要注意的是，首都是不能建立检查点的。</p>
<p>现在，在H国的一些城市中已经驻扎有军队，且一个城市可以驻扎多个军队。一支军队可以在有道路连接的城市间移动，并在除首都以外的任意一个城市建立检查点，且只能在一个城市建立检查点。一支军队经过一条道路从一个城市移动到另一个城市所需要的时间等于道路的长度（单位：小时）。</p>
<p>请问最少需要多少个小时才能控制疫情。注意：不同的军队可以同时移动。</p>
<h3 id="题目解析-5"><a href="#题目解析-5" class="headerlink" title="题目解析"></a>题目解析</h3><p>先说输出-1的情况，也就是军队数小于根节点的子节点数时无法完成控制，输出-1</p>
<p>接下来，对于求最小时间就想到了可以二分答案。二分限制的时间t，看是否所有军队是否能在t时间内完成移动。</p>
<p>那么时候涉及到树上移动，为了不超时，我们显然需要倍增来爬树。</p>
<p>剩下的就是怎么判断能否在t时间内完成移动了，这道题主要就是这里烦人</p>
<p>很显然的可以想到，所有军队都要尽量往上爬，因为越往上，能控制的节点就越多。</p>
<p>主要问题在于，要不要跨子树。</p>
<p>那么对于所有能爬到根节点的军队，我们记下他剩下的时间和原先爬上来的子树。如果这个军队所在的子树并没有被控制，并且他剩余时间不够他回到原来的子树，那他就根本不用爬到根节点，让他回去控制原来的子树就可以了。因为如果他不回去，必然需要另一个到达根节点并且剩余时间大于从根节点到他原来的子树距离的军队来代替他控制那颗子树，这样显然是亏的，因为当前军队的剩余时间小于子树到根节点距离，也就是小于能代替他控制子树的军队的剩余时间。让一个剩余时间大于当前军队的军队代替当前军队控制当前子树显然不合理。</p>
<p>上述情况是要回去滴</p>
<p>怎么写呢？把爬到根节点的军队按照剩余时间从小到大排序，然后对于满足上述情况的点，把他原先所在的子树做标记，并把剩余时间赋为-1即可。至于为什么要从小到大排序：当两个点原先的子树为同一棵的情况下，当然让剩余时间小的那个去控制原来那棵子树啦，大的那个后扫到，此时原来的子树已经被小的军队控制了，他就不用回去了。</p>
<p>那么对于仍然还呆在根节点等你安排的军队，把他们按照剩余时间从大到小排序。然后记录一下根节点到所有没有被控制的子树的距离，也从大到小排序。然后，贪心比较，也就是第一个和第一个比，第二个和第二个比……比到一个剩余时间小于当前记录下的距离，也就是过不去了，那么当前的限制时间t偏小，失败。如果全部比完了，都能够走到，那么当前t可以成功控制疫情。</p>
<h3 id="题目代码-5"><a href="#题目代码-5" class="headerlink" title="题目代码"></a>题目代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,cnt;</span><br><span class="line"><span class="keyword">int</span> d[<span class="number">50005</span>],head[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">50005</span>],f[<span class="number">25</span>][<span class="number">50005</span>],dis[<span class="number">25</span>][<span class="number">50005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tag[<span class="number">50005</span>],rst[<span class="number">50005</span>],q[<span class="number">50005</span>],top[<span class="number">50005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ne,to,w;</span><br><span class="line">&#125;e[<span class="number">100005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">army</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> rst,bac;</span><br><span class="line">&#125;arr[<span class="number">50005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(army x,army y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.rst&lt;y.rst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(army x,army y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.rst&gt;y.rst;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt]=(edge)&#123;head[x],y,z&#125;;head[x]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> dep,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[u]=dep,top[u]=t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].ne)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=e[i].to;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="number">1</span>) t=v;</span><br><span class="line">        <span class="keyword">if</span>(!d[v])</span><br><span class="line">        &#123;</span><br><span class="line">        	dfs(v,dep+<span class="number">1</span>,t);</span><br><span class="line">            f[<span class="number">0</span>][v]=u;</span><br><span class="line">            dis[<span class="number">0</span>][v]=e[i].w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">can</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tag[x])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[x];i;i=e[i].ne)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(e[i].to==fa)<span class="keyword">continue</span>;</span><br><span class="line">        res++;</span><br><span class="line">        <span class="keyword">if</span>(!can(e[i].to,x))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!res)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num=<span class="number">0</span>,k=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(tag,<span class="number">0</span>,<span class="keyword">sizeof</span>(tag));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x=a[i],tmp=t;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">20</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!f[j][x])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dis[j][x]&gt;tmp)<span class="keyword">continue</span>;</span><br><span class="line">            tmp-=dis[j][x];</span><br><span class="line">            <span class="keyword">if</span>(f[j][x]==<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                arr[++num].rst=tmp,arr[num].bac=top[x];</span><br><span class="line">                x=f[j][x];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            x=f[j][x];</span><br><span class="line">        &#125;</span><br><span class="line">        tag[x]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tag[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(can(<span class="number">1</span>,<span class="number">1</span>)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    sort(arr+<span class="number">1</span>,arr+num+<span class="number">1</span>,cmp1);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">        <span class="keyword">if</span>(arr[i].rst&lt;dis[<span class="number">0</span>][arr[i].bac])</span><br><span class="line">            <span class="keyword">if</span>(!can(arr[i].bac,<span class="number">1</span>)) arr[i].rst=<span class="number">-1</span>,tag[arr[i].bac]=<span class="number">1</span>;</span><br><span class="line">    sort(arr+<span class="number">1</span>,arr+num+<span class="number">1</span>,cmp2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[<span class="number">1</span>];i;i=e[i].to)</span><br><span class="line">        <span class="keyword">if</span>(!can(e[i].to,<span class="number">1</span>))q[++k]=e[i].w;</span><br><span class="line">    sort(q+<span class="number">1</span>,q+k+<span class="number">1</span>,cmp);</span><br><span class="line">    arr[num+<span class="number">1</span>].rst=<span class="number">-0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">        <span class="keyword">if</span>(q[i]&gt;arr[i].rst) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l=<span class="number">0</span>,r=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y,z;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        addedge(x,y,z);</span><br><span class="line">        addedge(y,x,z);</span><br><span class="line">        r+=z;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>||y==<span class="number">1</span>) tmp++;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">0</span>,dfs(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j]=f[i<span class="number">-1</span>][f[i<span class="number">-1</span>][j]];</span><br><span class="line">            dis[i][j]=dis[i<span class="number">-1</span>][j]+dis[i<span class="number">-1</span>][f[i<span class="number">-1</span>][j]];</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">if</span>(tmp&gt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid)) r=mid;</span><br><span class="line">        <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,l);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="NOIp2013"><a href="#NOIp2013" class="headerlink" title="NOIp2013"></a>NOIp2013</h1><p>Link to Curry0420（李明达）</p>
<h1 id="NOIp2014"><a href="#NOIp2014" class="headerlink" title="NOIp2014"></a>NOIp2014</h1><p>Link to czj666（陈子骏）</p>
<h1 id="NOIp2015"><a href="#NOIp2015" class="headerlink" title="NOIp2015"></a>NOIp2015</h1><p>Link to cs18（孙锦洋）</p>
<h1 id="NOIp2016"><a href="#NOIp2016" class="headerlink" title="NOIp2016"></a>NOIp2016</h1><p>Link to Bei_S（王子骏）</p>
<h1 id="NOIp2017"><a href="#NOIp2017" class="headerlink" title="NOIp2017"></a>NOIp2017</h1><p>Link to Steven7（尚元睿）</p>
]]></content>
      <tags>
        <tag>不知道什么东西</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】X Window系统简明介绍</title>
    <url>/blog/lgrb-x-window-system/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="X-Window系统简明介绍"><a href="#X-Window系统简明介绍" class="headerlink" title="X Window系统简明介绍"></a>X Window系统简明介绍</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://www.luogu.org/blog/chenxijun/x-window-system" target="_blank" rel="noopener">洛谷日报#72</a>，原作者为尘息。</p>
</blockquote>
<hr>
<h2 id="你能在本文学到什么"><a href="#你能在本文学到什么" class="headerlink" title="你能在本文学到什么"></a>你能在本文学到什么</h2><p>首先声明一下，这是一篇蒟蒻中的蒟蒻——我一时灵感来临写的QwQ。如果你有什么不懂的问题以及本文的错误可以在下方评论，或私信我，不保证什么都懂，更多请参阅<a href="https://www.google.com/" target="_blank" rel="noopener">Google</a>。</p>
<p>本文主旨在于学习关于X的理论知识以及其启动过程，帮助各位在Linux GUI开发中打下基础。本文属于知识框架型，部分内容非特别细致，还需劳烦各位感兴趣的使用搜索引擎。望各位喜欢！</p>
<p>**注意：本文大部分命令需要root权限，请用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## X是什么</span><br><span class="line">&gt; X Window系统（X Window System，也常称为X11或X）是一种以位图方式显示的软体视窗系统。最初是1984年麻省理工学院的研究，之后变成UNIX、类UNIX、以及OpenVMS等操作系统所一致适用的标准化软体工具套件及显示架构的运作协定。X Window系统透过软体工具及架构协定来建立作业系统所用的图形用户界面，此后则逐渐扩展适用到各形各色的其他作业系统上。现在几乎所有的作业系统都能支援与使用X。更重要的是，今日知名的桌面环境——GNOME和KDE也都是以X Window系统为基础建构成的。</span><br><span class="line">&gt; </span><br><span class="line">&gt; 由于X只是工具套件及架构规范，本身并无实际参与运作的实体，所以必须有人依据此标准进行开发撰写。如此才有真正可用、可执行的实体，始可称为实现体。目前依据X的规范架构所开发撰写成的实现体中，以X.Org最为普遍且最受欢迎。X.Org所用的协定版本，X11，是在1987年9月所发布。而今最新的参考实作（参考性、示范性的实作体）版本则是X11 Release 7.7（简称：X11R7.7），而此专案由X.Org基金会所领导，且是以MIT授权和相似的授权许可的自由软体。</span><br><span class="line">&gt; </span><br><span class="line">&gt; ——引自维基百科</span><br><span class="line"></span><br><span class="line">总而言之，如果你在使用```*nix```系统的桌面环境，那么你就与X Window系统的关系十分密切，包括Linux。你所使用的**桌面环境**和**带有GUI的应用程序**的绝大部分都依靠着X Window系统。</span><br><span class="line"></span><br><span class="line"> _注意：不包括直接调用硬件的游戏或软件！_ </span><br><span class="line"></span><br><span class="line">X在经过MIT(麻省理工学院)及各厂商大学等的无数版本迭代后，1987年，X的版本来到了X11，这是一个具有明显进步的版本，并取得了明显成功，几乎后来所有的分支都是基于X11开发的。时至今日，X开发的主导者有MIT、MIT X协会、X协会公司、X.Org、XFree86项目、X.Org基金会等等(依照时间排序)，期间有许多授权纠纷等各种各样的问题。为了避免太长不看，此部分感兴趣的可以查看参照中维基百科的条目。</span><br><span class="line"></span><br><span class="line">## 主要部分</span><br><span class="line">### X的结构</span><br><span class="line">X采用C/S架构(Client/Server，主从式架构)，分为**X服务器**(X Server)和**X客户端**(X Client)。与我们的常识稍有不同，X服务器是属于控制方面的，控制显示器、鼠标、键盘等甚至显卡都属于X服务器的职责，显示的内容与X窗口管理器(X Window Manager)却属于X客户端。所以应服务器运行X客户端程序，客户机运行X服务器，正好相反。</span><br><span class="line"></span><br><span class="line">X客户端可以通过网络**明文**与X服务器联系，于是你甚至可以在Windows机器运行X 服务器与Linux机器，我就可以说我的Windows正在运行Linux程序啦(然而是事实可以的)！你只需在准备打开X客户端的终端输入 ```export DISPLAY=[X服务器地址]:[显示界面号]``` 即可。</span><br><span class="line"></span><br><span class="line">(本图来自鸟哥的私房菜)</span><br><span class="line"></span><br><span class="line">![鸟哥的Linux私房菜 23.1.1](http://linux.vbird.org/linux_basic/0590xwindow//x_ser_cli.gif)</span><br><span class="line"></span><br><span class="line">为什么我要强调明文呢？明文代表着隔壁老王能很轻松并很清楚地知道你与远程服务器的~~PY交易~~在干什么，甚至银行密码等需要键盘输入的东西都能被**截获**！还可以发起**中间人攻击**！于是现在你可以通过**ssh**、**telnet** ( _这玩意也是明文_ ) 等远程终端进行转发，得到不被~~老王~~监控的环境。</span><br><span class="line"></span><br><span class="line">### X服务器</span><br><span class="line">X服务器作为X的重要部分，掌管着**显示图形界面**、**接受用户输入**、**字体渲染**的重任，Xorg是一种常见的X服务器。简而言之，其流程如下：</span><br><span class="line"></span><br><span class="line">**输入：**</span><br><span class="line">1. 接受来自用户的信号(鼠标、键盘、触摸屏等)；</span><br><span class="line">2. 通过网络**明文**传送给X客户端；</span><br><span class="line">3. 需要时传送给中转单位(ssh等应付加密需求)。</span><br><span class="line"></span><br><span class="line">**输出：**</span><br><span class="line">1. 需要时从中转单位获得信息；</span><br><span class="line">2. 通过网络**明文**接收X客户端数据；</span><br><span class="line">3. 显示X客户端的内容。</span><br><span class="line"></span><br><span class="line">很容易就能发现流程基本上是相反的，所以其实X服务器和X客户端是双向、相互依存、不可分割的。</span><br><span class="line"></span><br><span class="line">X服务器的硬件决定了图形的渲染，例如：X服务器的显卡没有3D图形加速，那么X客户端就无法使用这项技术了。 _但是，许多高性能应用及显卡驱动决定直接控制本机显卡，此时X服务端就不会受到这些信息了！_ </span><br><span class="line"></span><br><span class="line">### X客户端</span><br><span class="line">X客户端也是X的重要组成部分，每一个**需要在X服务器显示的程序**都可以称之为X客户端(有时甚至会有许多个！)。</span><br><span class="line"></span><br><span class="line">其流程与X服务端相反，不必多说，~~以免有人说我水文章~~。X客户端有一个特性，他们之间其实是**相互隔离**、**不知道其它X客户端的存在**的！好处就是不需要管X服务器的硬件如何、不需要管其它X客户端在干什么，只用管好自己的事就可以了。缺点也很明显，X客户端就不知道有没有其它东西覆盖在自己上面，十分被动，~~更不要讲什么根据手机壳颜色改变用户主题了(然而可以让X服务器告诉你)~~。</span><br><span class="line"></span><br><span class="line">怎么处理这种问题呢，并且窗口全部叠在一起怎么用啊，那么就有了下面这个东西——X窗口管理器(X Window Manager)。</span><br><span class="line"></span><br><span class="line">### X窗口管理器</span><br><span class="line">X窗口管理器是现代X的控制管理者——但它其实是一种特殊的**X客户端**！我们常见的X窗口管理器有：GNOME、KDE、KFCE、Unity、twm等。X不需要X窗口管理器也能正常运作。X窗口管理器提供以下功能：</span><br><span class="line">1. 提供各种~~奇奇怪怪~~的主题样式给X服务器；</span><br><span class="line">2. 管理虚拟桌面(Virtual Desktop)；</span><br><span class="line">3. 提供窗口管理工具，还有类似Dock、任务栏之类的东西；</span><br><span class="line">4. 提供X客户端的各种参数，窗口大小等等的数据；</span><br><span class="line"></span><br><span class="line">借助X窗口管理器，能够提供Linux很多桌面电脑的功能，让Linux也能成为生产力工具。PS： _桌面不一定是由X窗口管理器提供的。_ </span><br><span class="line"></span><br><span class="line">(twm窗口管理器，来自鸟哥的Linux私房菜)</span><br><span class="line"></span><br><span class="line">![只有X](http://linux.vbird.org/linux_basic/0590xwindow//centos7_xwin_test_4.jpg)</span><br><span class="line"></span><br><span class="line">### X显示管理器</span><br><span class="line">X显示管理器(XDM, X Display Manager)提供显示的第一界面，也就是登录用户的地方。往往有两种方式能在本地计算机启动X——在tty里输入```startx```或开机后我们看到的登录界面，这就是X显示管理器的作用。常见的有GNOME内置的gdm等。</span><br><span class="line"></span><br><span class="line">### X终端</span><br><span class="line">X终端(XTerm)就是在X界面中虚拟终端(Virtual Terminal)的一种实现。这一点没什么好说的，就是我们打开的“终端”。</span><br><span class="line"></span><br><span class="line">## X的启动</span><br><span class="line">下文将会教授X的启动方式和原理，及其相关基础知识。</span><br><span class="line"></span><br><span class="line">### TTY是什么</span><br><span class="line">TTY原指电传打字机(Teletype)，在这里指**虚拟控制台**，也就是不启动X时的只有文本的界面。 _Debian_ 系发行版默认开启tty1~tty6六个TTY，你可以使用```Ctrl+Alt+F1~F6```进行切换。(各发行版会有不同，根据实际操作)</span><br><span class="line"></span><br><span class="line">### 运行级别</span><br><span class="line">Linux拥有7个运行级别(runlevel)：</span><br><span class="line">- 运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</span><br><span class="line">- 运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</span><br><span class="line">- 运行级别2：多用户状态(没有NFS)</span><br><span class="line">- 运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</span><br><span class="line">- 运行级别4：系统未使用，保留</span><br><span class="line">- 运行级别5：X11控制台，登陆后进入图形GUI模式</span><br><span class="line">- 运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</span><br><span class="line"></span><br><span class="line">我们启动X便就是从运行级别3启动X服务器，转至运行级别5。</span><br><span class="line"></span><br><span class="line">启动X需要在**运行级别3**(默认)，切换运行级别：```init [运行级别]```，查看运行级别：```runlevel</span><br></pre></td></tr></table></figure></p>
<h3 id="DISPLAY"><a href="#DISPLAY" class="headerlink" title="DISPLAY"></a>DISPLAY</h3><p>我们在桌面环境运行shell，输入<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> _PS：在原用户使用```xhost +```可允许其它用户将X客户端连接原用户的X服务器。_ </span><br><span class="line"></span><br><span class="line">### startx与xinit</span><br><span class="line">`startx`、`xinit`和`X`(本体)均是启动X的方式，理论上`startx`是`xinit`的壳子，而`xinit`又是`X`的壳子。`startx`能自动帮你读取配置文件的参数。这些参数决定了X服务器的**呈现方式**、**DPI**、**显示界面号**等，决定了需要启动的**X客户端**(包括**桌面环境**)。以下是命令参数：</span><br></pre></td></tr></table></figure></p>
<p>startx [X客户端参数] – [X服务端参数]<br>xinit [X客户端参数] – [X服务端参数]</p>
<p>```<br>是的，这两个命令的参数是一致的，<strong>参数各有优先级</strong>，如下(顺序排列)：</p>
<p><strong>X服务器：</strong></p>
<ol>
<li>命令后接的参数；</li>
<li>~/.xserverrc；</li>
<li>/etc/X11/xinit/xserverrc；</li>
</ol>
<p>无参数则直接执行<code>X</code>。</p>
<p>(只启动X的样式，来自鸟哥的Linux私房菜)</p>
<p><img src="http://linux.vbird.org/linux_basic/0590xwindow//xwin_test_1.gif" alt="只有X"></p>
<p><strong>X客户端：</strong></p>
<ol>
<li>命令后接的参数；</li>
<li>~/.xinitrc；</li>
<li>/etc/X11/xinit/xinitrc；</li>
</ol>
<p>无参数则直接执行<code>xterm</code>。</p>
<p>(加上xterm的样式，来自鸟哥的Linux私房菜)</p>
<p><img src="http://linux.vbird.org/linux_basic/0590xwindow//xwin_test_2.gif" alt="xterm"></p>
<p>至此，你可以自己尝试从tty启动X了，甚至可以体验自己手动启动X。因篇幅限制，相关参数及更详细的技术细节请查询网络，或自行分析。</p>
<h3 id="显示界面号、tty号和监听端口"><a href="#显示界面号、tty号和监听端口" class="headerlink" title="显示界面号、tty号和监听端口"></a>显示界面号、tty号和监听端口</h3><p>假设你是<strong>Debian系</strong>用户，即默认打开了tty1~tty6，那么就有</p>
<table>
<thead>
<tr>
<th align="right">第n个</th>
<th align="right">显示界面号</th>
<th align="right">tty号</th>
<th align="right">监听端口</th>
</tr>
</thead>
<tbody><tr>
<td align="right">1</td>
<td align="right">0</td>
<td align="right">7</td>
<td align="right">6000</td>
</tr>
<tr>
<td align="right">2</td>
<td align="right">1</td>
<td align="right">8</td>
<td align="right">6001</td>
</tr>
<tr>
<td align="right">3</td>
<td align="right">2</td>
<td align="right">9</td>
<td align="right">6002</td>
</tr>
<tr>
<td align="right">…</td>
<td align="right">n</td>
<td align="right">往后推</td>
<td align="right">6000+n</td>
</tr>
</tbody></table>
<p>n可以为任意正整数，<del>我也不知道能多大</del>，可在上篇<code>[X服务器参数]</code>中使用<code>-display :n</code>调整显示界面号；端口等于<code>6000+n</code>；tty则是已有的往后推。</p>
<h2 id="你学到了什么"><a href="#你学到了什么" class="headerlink" title="你学到了什么"></a>你学到了什么</h2><p>感谢各位看完了本蒟蒻的文章，有意见与建议或是问题的请联系我，<del>我将会解决掉提出的人</del>。你应该能学习到：</p>
<ul>
<li>X是什么，X Window系统分为什么</li>
<li>X服务器和客户端扮演着怎样的角色</li>
<li>X使用明文or密文传输</li>
<li>如何防止隔壁老王偷窥</li>
<li>学会如何从tty启动X</li>
<li>学会显示界面号和监听端口的关系</li>
<li>还有更多</li>
</ul>
<h2 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h2><p><a href="https://zh.wikipedia.org/wiki/X_Window%E7%B3%BB%E7%B5%B1" target="_blank" rel="noopener">X窗口系统-维基百科</a><br><a href="http://linux.vbird.org/linux_basic/0590xwindow.php" target="_blank" rel="noopener">鸟哥的Linux私房菜 第二十三章、X Window 设置介绍</a></p>
<h2 id="版权声明"><a href="#版权声明" class="headerlink" title="版权声明"></a>版权声明</h2><p>本作品以 <img src="https://licensebuttons.net/l/by-nc-sa/4.0/80x15.png" alt="知识共享许可协议"> <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a> 进行许可</p>
]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>排序</title>
    <url>/blog/compositor-sequence/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>插入排序分为直接插入排序、二分插入排序、二路插入排序、表插入排序和希尔插入排序。</p>
<h2 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,j;i&lt;=length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">    	sq[<span class="number">0</span>]=sq[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i<span class="number">-1</span>;sq[<span class="number">0</span>]&lt;sq[j];j--)</span><br><span class="line">        &#123;</span><br><span class="line">        	sq[j+<span class="number">1</span>]=sq[j];</span><br><span class="line">        &#125;</span><br><span class="line">    sq[j+<span class="number">1</span>]=sq[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个一个数插入，最后得到了序列。当序列基本有序时，需要往前插入的次数会减少很多，效率还是较高的。<br>复杂度$O(n^2)$。</p>
<h2 id="二分插入排序"><a href="#二分插入排序" class="headerlink" title="二分插入排序"></a>二分插入排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BinaryInsertSort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>,lwo,mid,high,j;i&lt;=length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sq[i]&lt;sq[i<span class="number">-1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            sq[<span class="number">0</span>]=sq[i];</span><br><span class="line">            low=<span class="number">1</span>;</span><br><span class="line">            high=i<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">            &#123;</span><br><span class="line">                mid=(low+high)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(sq[<span class="number">0</span>]&lt;sq[mid])</span><br><span class="line">                    high=mid<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sq[<span class="number">0</span>]&gt;sq[mid])</span><br><span class="line">                    low=mid+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    low=high=mid;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"low=%d,high=%d\n"</span>,low,high);</span><br><span class="line">            <span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=high+<span class="number">1</span>;j--)</span><br><span class="line">                sq[j+<span class="number">1</span>]=sq[j];</span><br><span class="line">            sq[high+<span class="number">1</span>]=sq[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接插入排序中，前面的序列已经是有序的，需要找到当前需要插入的数在前面的数的位置，然后进行插入，直接插入排序采用从后往前依次找插入位置，如果前面的序列是有序表的话，可以用二分查找方法来找到要插入的位置。二分查找，设置low，high，当没有找到待插入元素时，&gt;=high的元素都是大于当前待插入元素的，所以找到了插入位置，即high之前。<br>可见二分插入排序，只是减少了关键字之间的比较次数，并不能减少交换次数，只是在查找插入位置时提高了速度，而且必须是有序表的限制。</p>
<h2 id="二路插入排序"><a href="#二路插入排序" class="headerlink" title="二路插入排序"></a>二路插入排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DoubleRouterInsertSort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *sqadd=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>((length+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    *(sq+<span class="number">0</span>)=*(sqadd+length)=*(sq+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> insertpos;</span><br><span class="line">    <span class="keyword">int</span> pivotA=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pivotB=length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((*(sq+i))&gt;*((sq+<span class="number">0</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            insertpos=pivotB;</span><br><span class="line">            <span class="keyword">while</span>((insertpos&lt;=length)&amp;&amp;((*(sq+i))&gt;(*(sqadd+insertpos))))</span><br><span class="line">            &#123;</span><br><span class="line">                *(sqadd+insertpos<span class="number">-1</span>)=*(sqadd+insertpos);</span><br><span class="line">                insertpos++;</span><br><span class="line">            &#125;</span><br><span class="line">            *(sqadd+insertpos<span class="number">-1</span>)=*(sq+i);</span><br><span class="line">            pivotB--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pivotA==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                *(sq+<span class="number">1</span>)=*(sq+i);</span><br><span class="line">                pivotA=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                insertpos=pivotA;</span><br><span class="line">                <span class="keyword">while</span>((insertpos&gt;=<span class="number">1</span>)&amp;&amp;((*(sq+i))&lt;(*(sq+insertpos))))</span><br><span class="line">                &#123;</span><br><span class="line">                    *(sq+insertpos+<span class="number">1</span>)=*(sq+insertpos);</span><br><span class="line">                    insertpos--;</span><br><span class="line">                &#125;</span><br><span class="line">                *(sq+insertpos+<span class="number">1</span>)=*(sq+i);</span><br><span class="line">                pivotA++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(;pivotA&lt;length;pivotA++)</span><br><span class="line">    &#123;</span><br><span class="line">        *(sq+pivotA+<span class="number">1</span>)=*(sqadd+pivotB);</span><br><span class="line">        pivotB++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(sqadd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二路插入排序是在二分插入排序的基础上改进的方法，目的是为了减少排序过程中交换记录的次数，但为此需要额外的n个辅助记录空间。用一个记录（目前取第一个记录）作为枢纽点，然后把比该记录关键字大大记录插入当前空间，比该记录大的插入到辅助空间，最后合并两个数组，完成排序。<br>二路插入排序中，移动记录的次数约为$\frac{n^2}{8}$。因此，二路插入排序只能减少移动记录的次数，而不能绝对避免移动记录。并且当，*(sq+1)为关键字最小/大的记录时，二路插入排序就完全失去其优越性。</p>
<h2 id="表插入排序"><a href="#表插入排序" class="headerlink" title="表插入排序"></a>表插入排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SList</span>&#123;</span></span><br><span class="line">    Node sq[MAX_LEN+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SList;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSL</span><span class="params">(SList test)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pos=test.sq[<span class="number">0</span>].next;</span><br><span class="line">    <span class="keyword">while</span>(pos!=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,test.sq[pos].key);</span><br><span class="line">        pos=test.sq[pos].next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSN</span><span class="params">(SList test)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=test.length;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,test.sq[i].key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TableInsertSort</span><span class="params">(SList &amp;sl)</span></span>&#123;</span><br><span class="line">    sl.sq[<span class="number">0</span>].next=<span class="number">1</span>;</span><br><span class="line">    sl.sq[<span class="number">1</span>].next=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> insertpos;</span><br><span class="line">    <span class="keyword">int</span> preinsertpos;	</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sl.length;i++)&#123;</span><br><span class="line">        insertpos=sl.sq[<span class="number">0</span>].next;</span><br><span class="line">        preinsertpos=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span>(sl.sq[i].key&gt;sl.sq[insertpos].key)&#123;</span><br><span class="line">            preinsertpos=insertpos;</span><br><span class="line">            insertpos=sl.sq[insertpos].next;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        sl.sq[preinsertpos].next=i;</span><br><span class="line">        sl.sq[i].next=insertpos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Arrange</span><span class="params">(SList &amp;test)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q,p=test.sq[<span class="number">0</span>].next;</span><br><span class="line">    Node tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;test.length;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(p&lt;i)&#123;</span><br><span class="line">            p=test.sq[p].next;</span><br><span class="line">        &#125;</span><br><span class="line">        q=test.sq[p].next;</span><br><span class="line">        <span class="keyword">if</span>(p!=i)&#123;</span><br><span class="line">            <span class="comment">//sq[p]&lt;---&gt;sq[i]</span></span><br><span class="line">            tmp=test.sq[p];</span><br><span class="line">            test.sq[p]=test.sq[i];</span><br><span class="line">            test.sq[i]=tmp;</span><br><span class="line"> </span><br><span class="line">            test.sq[i].next=p;</span><br><span class="line">        &#125;</span><br><span class="line">        p=q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面3中插入排序都无法完全避免记录之间的交换，只有改变数据结构才能解决这个问题，表插入排序通过修改next域来避免直接的记录交换。<br>可见，表插入排序基本操作依然是将一个记录插入到已排序的有序表中，和直接插入排序相比，不同之处是以修改$2n$次“指针”域代替了移动记录，排序过程中关键字之间的比较次数相同，因此表插入排序的时间复杂度依然是$O(n^2)$ 。</p>
<h2 id="希尔插入排序"><a href="#希尔插入排序" class="headerlink" title="希尔插入排序"></a>希尔插入排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShellInsert</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length,<span class="keyword">int</span> dk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=dk+<span class="number">1</span>;i&lt;=length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((*(sq+i))&lt;(*(sq+i-dk)))</span><br><span class="line">        &#123;</span><br><span class="line">            tmp=*(sq+i);</span><br><span class="line">            <span class="keyword">int</span> j;</span><br><span class="line">            <span class="keyword">for</span>(j=i-dk;(j&gt;<span class="number">0</span>)&amp;&amp;((*(sq+j))&gt;tmp);j-=dk)</span><br><span class="line">            &#123;</span><br><span class="line">                *(sq+j+dk)=*(sq+j);</span><br><span class="line">            &#125;</span><br><span class="line">            *(sq+j+dk)=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span>* <span class="title">CreateIncrement</span><span class="params">(<span class="keyword">int</span> times)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *increment=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(times*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>!=increment)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;times<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            *(increment+i)=(<span class="keyword">int</span>)(<span class="built_in">pow</span>((<span class="keyword">double</span>)(<span class="number">2</span>),(<span class="keyword">double</span>)(times-i<span class="number">-1</span>))+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        *(increment+times<span class="number">-1</span>)=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> increment;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SHELL_TIMES=<span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *dk=CreateIncrement(SHELL_TIMES);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span>!=dk)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SHELL_TIMES;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ShellInsert(sq,length,*(dk+i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(dk);</span><br><span class="line">        dk=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>希尔排序又称“缩小增量排序”（diminishing increment sort），它也是一种插入排序类的方法，但在效率上有较大提高。<br>对直接插入排序的分析可知，其算法时间复杂度为$O(n^2)$ ，但是，若待排序记录序列为 “正序” 时，时间复杂度可提高到$O(n)$  。由此可设想，若待排序序列按关键字基本有序，n也很小时，直接插入排序的效率还是很高的，希尔排序正式从这两点出发，对直接插入排序的一种改进排序算法。<br>可见，希尔排序的特点是：子序列的构成不是简单地“逐段分割”，而是将相隔某个“增量”的记录组成一个子序列。因此，希尔排序中关键字小的记录不是一步一步向前挪动，而是跳跃式地向前移，从而使得最后一趟增量为1的插入排序时，序列已基本有序，这就是希尔排序效率提高的关键。</p>
<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序是一种借助“交换”的方式，对冒泡排序的一种改进的排序算法。</p>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=length;i&gt;<span class="number">1</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sq[j]&gt;sq[j+<span class="number">1</span>])&#123;</span><br><span class="line">                tmp=sq[j];</span><br><span class="line">                sq[j]=sq[j+<span class="number">1</span>];</span><br><span class="line">                sq[j+<span class="number">1</span>]=tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>冒泡排序时间复杂度是 $O(n^2)$，效率比较低，在最坏情况下需要进行  $\frac{n(n-1)}{2}$ 次比较，并作同等数量级的记录移动。</p>
<h2 id="快速排序-1"><a href="#快速排序-1" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Partion</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivotkey=sq[low];</span><br><span class="line">    <span class="keyword">while</span>(low&lt;high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((low&lt;high)&amp;&amp;(sq[high]&gt;pivotkey))high--;</span><br><span class="line">        sq[low]=sq[high];</span><br><span class="line">        <span class="keyword">while</span>((low&lt;high)&amp;&amp;(sq[low]&lt;pivotkey))low++;</span><br><span class="line">        sq[high]=sq[low];</span><br><span class="line">    &#125;</span><br><span class="line">    sq[low]=pivotkey;</span><br><span class="line">    <span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>快速排序对冒泡排序有较大改进，它的基本思想是：通过一趟排序将待排序记录分割成两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。<br>假设待排序的序列为 r[low]，r[low+1]，……，r[high]，任选一个记录，通常是第一个记录 r[low] 为枢轴（pivot），然后将所有关键字比枢轴大的记录都安置在枢轴之后，所有比枢轴小的记录都安置在枢轴前面，以枢轴最后落点位置pos为分界点，将序列分割成两个序列：r[low]，r[low+1]，…..，r[pos-1]和r[pos+1]，r[pos+2]，…..，r[high]，这个过程称为一趟快速排序或一次划分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Qsort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low&lt;high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> pivot=Partion(sq,low,high);</span><br><span class="line">        Qsort(sq,low,pivot<span class="number">-1</span>);</span><br><span class="line">        Qsort(sq,pivot+<span class="number">1</span>,high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Qsort(sq,<span class="number">1</span>,length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记录一趟排序后剩下两个记录序列，又可以分别对这两个序列进行划分，同样的方法，递归实现。<br>快速排序时间复杂度为 $O(n\log{n})$，平均时间复杂度低，但是最坏情况的话就沦落到冒泡排序。</p>
<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>选择排序（selection sort）的基本思想是：每一趟在序列 sq[1],sq[2],…,sq[length]中选取关键字最大的记录作为序列最后一个记录，然后再从剩下的记录中选取最大的记录作为序列倒数第二个记录…，直到整个序列有序。《数据结构》中如是描述：每一趟在 n-i+1 (i=1,2,…,n-1)个记录中选取最小的记录作为有序序列中第 i 个记录。常见的选择排序包括：简单选择排序，树形选择排序，堆排序。分别给予实现</p>
<h2 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j,tmp,min;i&lt;length;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min=i;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=length;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sq[j]&lt;sq[min])</span><br><span class="line">                min=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min!=i)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp=sq[i];</span><br><span class="line">            sq[i]=sq[min];</span><br><span class="line">            sq[min]=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对 sq[1,2,…,n]中记录进行简单选择排序算法为：令 i 从1至n-1，进行n-1趟选择操作，每次选择最小的和sq[i]交换。<br>可见，简单选择排序过程中需要进行移动记录的次数较少，最小值为0，最大时为$3(n-1)$。然而，无论记录的初始排列如何，所需进行的关键字之间的比较操作次数相同，均为 $\frac{n(n-1)}{2}$ ，因此总时间复杂度为$O(n^2)$。</p>
<h2 id="树形选择排序"><a href="#树形选择排序" class="headerlink" title="树形选择排序"></a>树形选择排序</h2><p>从上述可见，选择排序主要进行关键字之间的比较，因此改进简单选择排序应从如何减少比较次数出发考虑。显然从 n 个关键字中选出最小值，至少需要 n-1 次比较，然而，继续在剩下的 n-1 个关键字中选择次小关键字就并非一定要进行 n-2 次比较，若能利用前 n 次比较所得信息，则可减少以后每趟的比较次数。锦标赛便是一种选择排序。例如，8个运动员决出前三名至多需要 11 场比赛，而不是 7+6+5=18 场比赛(它的前提就是，若乙胜丙，甲胜乙，则甲定胜丙)，亚军只能产生于分别在决赛和半决赛和第一轮比赛中输给冠军的选手，这就是树形选择排序。</p>
<p>树形选择排序，又称为锦标赛排序，是一种按照锦标赛思想进行选择排序的方法。首先对 n 个记录的关键字进行两两比较，然后在剩下的 $\frac{n+1}{2}$ 个记录中再进行两两比较，如此重复，直至选出最小关键字为止(选冠军)。输出最小关键字，然后把最小关键字置为<em>MAX</em>(MAX_INT)，然后又重新从这 n 个记录中选择最小的，此时的最小即次小，如此重复，直到输出所有关键字。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AdjustTree</span><span class="params">(<span class="keyword">int</span> *Tree,<span class="keyword">int</span> length,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(length==<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> nextlength=(length+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> adjustpos=high-length+<span class="number">1</span>-nextlength;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=high-length+<span class="number">1</span>;i&lt;=high;i+=<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((i&lt;high)&amp;&amp;(Tree[i]&gt;Tree[i+<span class="number">1</span>]))</span><br><span class="line">                Tree[adjustpos]=Tree[i+<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Tree[adjustpos]=Tree[i];</span><br><span class="line">            adjustpos++;</span><br><span class="line">        &#125;</span><br><span class="line">        AdjustTree(Tree,nextlength,high-length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetTreeSize</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> (n+GetTreeSize((n+<span class="number">1</span>)/<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeSelectSort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TreeSize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> *Tree=<span class="literal">NULL</span>;</span><br><span class="line">    TreeSize=GetTreeSize(length);</span><br><span class="line">    Tree=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(TreeSize*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">if</span>(Tree!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(Tree,<span class="number">0</span>,TreeSize*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=TreeSize-length,j=<span class="number">1</span>;i&lt;TreeSize;i++,j++)</span><br><span class="line">            Tree[i]=sq[j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> pos=<span class="number">1</span>;pos&lt;=length;)</span><br><span class="line">        &#123;</span><br><span class="line">            AdjustTree(Tree,length,TreeSize<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=TreeSize-length;i&lt;TreeSize;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(Tree[i]==Tree[<span class="number">0</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    Tree[i]=MAX_INT;</span><br><span class="line">                    sq[pos]=Tree[<span class="number">0</span>];</span><br><span class="line">                    pos++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(Tree);</span><br><span class="line">        Tree=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于含有 n 个叶子节点的完全二叉树的深度为  $\left\lceil(\log_{2}{n})\right\rceil+1$ ，则在树形选择排序中除最小关键字之外，每选择一个次小关键字仅需进行 $\left\lceil(\log_{2}{N})\right\rceil$次比较，因此它的时间复杂度为 $O(n\log{n})$。$\left\lceil\right\rceil$代表上取整。</p>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>从树形选择排序中我们知道，为了构成完全二叉树，需要额外很大的辅助空间，为了弥补，威洛姆斯在1964年提出了堆排序。堆排序只需要一个记录大小的辅助空间，每个待排序的记录仅占一个存储空间。<br>堆顶一如下：n个元素的序列{K1,K2,…,Kn} 当且仅当满足如下关系时，称之为堆。</p>
<p>Ki&gt;=K2i &amp;&amp; Ki&gt;=K(2i+1)  或者 Ki&lt;=K2i &amp;&amp; Ki&lt;=K(2i+1)  $i=(1,2,…,\left\lfloor\frac{n}{2}\right\rfloor)$ $\left\lfloor\right\rfloor$代表下取整<br>即以一维数组来存储这个序列，并看成一个完全二叉树，则堆的含义是，完全二叉树中所有非终端节点的值均不大于（或不小于）其左右孩子节点的值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapAdjust</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rc=sq[low];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>*low;j&lt;=high;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((j&lt;high)&amp;&amp;(sq[j+<span class="number">1</span>]&gt;sq[j]))j++;</span><br><span class="line">        <span class="keyword">if</span>(sq[j]&gt;rc)</span><br><span class="line">        &#123;</span><br><span class="line">            sq[low]=sq[j];</span><br><span class="line">            low=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sq[low]=rc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=length/<span class="number">2</span>;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">        HeapAdjust(sq,i,length);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=length,tmp;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp=sq[<span class="number">1</span>];</span><br><span class="line">        sq[<span class="number">1</span>]=sq[i];</span><br><span class="line">        sq[i]=tmp;</span><br><span class="line">        HeapAdjust(sq,<span class="number">1</span>,i<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>若在输出堆顶元素(如果堆顶元素是最大的那么可以将之与堆最后一个元素交换)之后，使得剩余的 n-1 个元素又重新建堆，则得到 n 个元素中次小值。如此反复执行便能得到一个有序序列，这个过程称为堆排序。<br>堆排序在最坏情况下，其时间复杂度也为 $O(n\log{n})$。相对于快速排序来说，这是堆排序的最大优点，此外堆排序仅需一个记录大小的供交换的辅助空间。</p>
<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>归并排序（Merging Sort）是又一类不同的排序算法。归并的含义是将两个或两个以上的有序序列组合成一个新的有序序列。合并两个有序序列，采用齐头并进的方法，无论是顺序存储结构还是链式存储结构，都可以在 $O(m+n)$ 的时间数量级上实现。<br>2-路归并的思想就是，假设初始序列含有 n 个记录，则可看成是 n 个有序的子序列(长度均为1)，然后两两归并，得到$\left\lceil\frac{n}{2}\right\rceil$ 个长度为 2 或者1 的有序子序列，再两两归并，并如此重复下去，直到得到一个长度为 n 的有序序列为止，这种排序方法称为 2-路归并排序。<br>归并排序在平均和最坏情况下时间复杂度都是$O(n\log{n})$，与快速排序和堆排序相比，归并排序的最大特点是，它是一种稳定的排序算法。</p>
<h2 id="合并两个有序序列"><a href="#合并两个有序序列" class="headerlink" title="合并两个有序序列"></a>合并两个有序序列</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Merge</span><span class="params">(<span class="keyword">int</span> *SR,<span class="keyword">int</span> *TR,<span class="keyword">int</span> i,<span class="keyword">int</span> m,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    assert(SR!=<span class="literal">NULL</span>&amp;&amp;TR!=<span class="literal">NULL</span>);</span><br><span class="line">    assert(i&lt;=m&amp;&amp;m&lt;=n);</span><br><span class="line">    <span class="keyword">int</span> pleft,pright,pos;</span><br><span class="line">    <span class="keyword">for</span>(pos=pleft=i,pright=m+<span class="number">1</span>;pleft&lt;=m&amp;&amp;pright&lt;=n;pos++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(SR[pleft]&lt;=SR[pright])</span><br><span class="line">        &#123;</span><br><span class="line">            TR[pos]=SR[pleft];</span><br><span class="line">            pleft++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            TR[pos]=SR[pright];</span><br><span class="line">            pright++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pleft&lt;=m)</span><br><span class="line">    &#123;</span><br><span class="line">        TR[pos]=SR[pleft];</span><br><span class="line">        pos++;</span><br><span class="line">        pleft++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pright&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        TR[pos]=SR[pright];</span><br><span class="line">        pos++;</span><br><span class="line">        pright++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)</span><br><span class="line">        SR[j]=TR[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>归并排序的核心思想就是：将一维数组中前后两个有序序列合并成一个有序序列</p>
<h2 id="递归形式的二路归并排序"><a href="#递归形式的二路归并排序" class="headerlink" title="递归形式的二路归并排序"></a>递归形式的二路归并排序</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MSort</span><span class="params">(<span class="keyword">int</span> *SR,<span class="keyword">int</span> *TR,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(left==right)</span><br><span class="line">        TR[left]=SR[left];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(left+right)/<span class="number">2</span>;</span><br><span class="line">        MSort(SR,TR,left,mid);</span><br><span class="line">        MSort(SR,TR,mid+<span class="number">1</span>,right);</span><br><span class="line">        Merge(SR,TR,left,mid,right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *result=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>((length+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(result,<span class="number">0</span>,(length+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    MSort(sq,result,<span class="number">1</span>,length);</span><br><span class="line">    <span class="built_in">free</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二路递归的归并排序思想：合并两个 $\left\lceil\frac{n}{2}\right\rceil$ 两个序列</p>
<h2 id="非递归形式的二路归并排序"><a href="#非递归形式的二路归并排序" class="headerlink" title="非递归形式的二路归并排序"></a>非递归形式的二路归并排序</h2><p>在归并排序中，递归形式的归并算法在形式上比较简洁，但实用性较差，那么就实现其非递归形式。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort_SIM</span><span class="params">(<span class="keyword">int</span> *sq,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *result=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>((length+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(result,<span class="number">0</span>,(length+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> sublength=<span class="number">1</span>;sublength&lt;=length;sublength*=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> pos=<span class="number">1</span>;pos&lt;=length;pos+=<span class="number">2</span>*sublength)</span><br><span class="line">        &#123;</span><br><span class="line">            i=pos+sublength;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;length)<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(i+sublength<span class="number">-1</span>&lt;=length)</span><br><span class="line">                Merge(sq,result,pos,i<span class="number">-1</span>,i+sublength<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                Merge(sq,result,pos,i<span class="number">-1</span>,length);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>重载运算符和重载函数</title>
    <url>/blog/Overloaded-Operators-And-Overloaded-Functions/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h1><h2 id="可重载运算符-不可重载运算符"><a href="#可重载运算符-不可重载运算符" class="headerlink" title="可重载运算符/不可重载运算符"></a>可重载运算符/不可重载运算符</h2><p>下面是可重载的运算符列表：<br><img src="/pic/QQ%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%AA%E5%9B%BE20181018105607.png" alt="可重载运算符列表"></p>
<p>下面是不可重载的运算符列表：</p>
<ul>
<li>.    &emsp;&emsp;&emsp;&emsp;    成员访问运算符</li>
<li><code>.*</code>, <code>-&gt;*</code>    &emsp;    成员指针访问运算符</li>
<li>::    &emsp;&emsp;&emsp;&emsp;    域运算符</li>
<li>sizeof    &emsp;&emsp;    长度运算符</li>
<li>?:    &emsp;&emsp;&emsp;&emsp;    条件运算符</li>
<li><code>#</code>    &emsp;&emsp;&emsp;&emsp;    预处理符号</li>
</ul>
<p>我们将以矩阵为例示例重载运算符。</p>
<h2 id="双目算术运算符"><a href="#双目算术运算符" class="headerlink" title="双目算术运算符"></a>双目算术运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">matrix <span class="keyword">operator</span>*(matrix x,matrix y)</span><br><span class="line">&#123;</span><br><span class="line">    matrix tmp;</span><br><span class="line">    tmp.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x.n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=y.m;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=x.m;k++)</span><br><span class="line">                tmp.a[i][j]+=x.a[i][k]*y.a[k][j];</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> matrix x,<span class="keyword">const</span> matrix y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.n!=y.n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x.m!=y.m)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x.n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=x.m;j++)</span><br><span class="line">            <span class="keyword">if</span>(x.a[i][j]!=y.a[i][j])</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><del>逻辑运算符</del></h2><p><del>由于重载逻辑运算符过于毒瘤而被隐藏</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bool operator!(matrix x)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	for(int i=1;i&lt;=x.n;i++)</span></span><br><span class="line"><span class="comment">//		for(int j=1;j&lt;=x.m;j++)</span></span><br><span class="line"><span class="comment">//			if(!x.a[i][j])</span></span><br><span class="line"><span class="comment">//				return 1;</span></span><br><span class="line"><span class="comment">//	return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="单目运算符"><a href="#单目运算符" class="headerlink" title="单目运算符"></a>单目运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">matrix <span class="keyword">operator</span>-(matrix x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x.n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=x.m;j++)</span><br><span class="line">            x.a[i][j]=-x.a[i][j];</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">matrix&amp; <span class="keyword">operator</span>++(matrix &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x.n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=x.m;j++)</span><br><span class="line">            x.a[i][j]+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;<span class="comment">//前置++ </span></span><br><span class="line">matrix <span class="keyword">operator</span>++(matrix &amp;x,<span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">    matrix tmp=x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x.n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=x.m;j++)</span><br><span class="line">            x.a[i][j]+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;<span class="comment">//后置++</span></span><br></pre></td></tr></table></figure>

<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">matrix <span class="keyword">operator</span>~(matrix x)</span><br><span class="line">&#123;</span><br><span class="line">    matrix tmp;</span><br><span class="line">    tmp.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x.n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=x.m;j++)</span><br><span class="line">            tmp.a[i][j]=~x.a[i][j];</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">matrix&amp; <span class="keyword">operator</span>*=(matrix &amp;x,matrix y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x=x*y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h1><p>对于C++中预制的函数，有的函数由于固定了类型，比如pow在&lt;math.h&gt;中的返回值类型为double，传的两个参数类型也为double，那么如果我们使用int进行操作，在某些编译选项下（例如-lm），可能会CE；max和min函数在STL中的定义返回值类型为<figure class="highlight plain"><figcaption><span>_Tp>&```，传的两个参数类型也均为```const<typename _tp="">&```，这就意味着你不能把int和long long两个类型的数同时传到max或min里，否则就会CE。</typename></span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">遇到这种情况，我们就需要重载函数，有的人可能称这种为手写函数，但实际上我们写数据结构之类的函数是手写函数没问题，但max或min这种实际上是重载函数。</span><br><span class="line"></span><br><span class="line">对于矩阵重载pow函数的例子：</span><br><span class="line">```cpp</span><br><span class="line">matrix pow(matrix a,int k)</span><br><span class="line">&#123;</span><br><span class="line">    matrix ans;</span><br><span class="line">    ans.init();</span><br><span class="line">    while(k)</span><br><span class="line">    &#123;</span><br><span class="line">        if(k&amp;1)ans*=a;</span><br><span class="line">        a*=a;</span><br><span class="line">        k&gt;&gt;=1;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度带符号整数算法</title>
    <url>/blog/high-precision-yes/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本博客是 高精度无符号整数算法 的延伸版本，请读者在食用前序文章后食用本篇效果更佳。</p>
<h1 id="高精度的写法"><a href="#高精度的写法" class="headerlink" title="高精度的写法"></a>高精度的写法</h1><p>同无符号的一样，我们仍采用struct封装，但与之前不同的是，我们新定义一个f表示正负。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Wint</span>:</span><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后改下构造函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wint(<span class="keyword">int</span> n=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">0</span>)n*=f=<span class="number">-1</span>;</span><br><span class="line">    push_back(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不再过多解释构造函数写法，只是这里要判断收到的n的正负。<br>然后是check函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Wint&amp; <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!empty()&amp;&amp;!back())pop_back();</span><br><span class="line">    <span class="keyword">if</span>(empty())&#123;f=<span class="number">1</span>;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(back()&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f*=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size(); ++i)</span><br><span class="line">            (*<span class="keyword">this</span>)[i]*=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">while</span>((*<span class="keyword">this</span>)[i<span class="number">-1</span>]&lt;<span class="number">0</span>)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">int</span> j=i;</span><br><span class="line">         <span class="keyword">while</span>((*<span class="keyword">this</span>)[j]&lt;=<span class="number">0</span>&amp;&amp;j&lt;size())++j;</span><br><span class="line">         <span class="keyword">while</span>(j&gt;=i)</span><br><span class="line">         &#123;</span><br><span class="line">             --(*<span class="keyword">this</span>)[j];</span><br><span class="line">             (*<span class="keyword">this</span>)[--j]+=<span class="number">10</span>;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">        (*<span class="keyword">this</span>)[i]+=(*<span class="keyword">this</span>)[i<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">        (*<span class="keyword">this</span>)[i<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(!empty()&amp;&amp;!back())pop_back();</span><br><span class="line">    	<span class="keyword">if</span>(empty())&#123;f=<span class="number">1</span>;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(back()&gt;=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        push_back(back()/<span class="number">10</span>);</span><br><span class="line">        (*<span class="keyword">this</span>)[size()<span class="number">-2</span>]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(back()&lt;<span class="number">0</span>)f*=<span class="number">-1</span>,(*<span class="keyword">this</span>)[size()<span class="number">-1</span>]*=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么整体的struct就长这样</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Wint</span>:</span><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    Wint(<span class="keyword">int</span> n=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(n&lt;<span class="number">0</span>)n*=f=<span class="number">-1</span>;</span><br><span class="line">        push_back(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Wint&amp; <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!empty()&amp;&amp;!back())pop_back();</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;f=<span class="number">1</span>;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(back()&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">    		f*=<span class="number">-1</span>;</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size(); ++i)</span><br><span class="line">    			(*<span class="keyword">this</span>)[i]*=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="keyword">while</span>((*<span class="keyword">this</span>)[i<span class="number">-1</span>]&lt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j=i;</span><br><span class="line">                <span class="keyword">while</span>((*<span class="keyword">this</span>)[j]&lt;=<span class="number">0</span>&amp;&amp;j&lt;size())++j;</span><br><span class="line">                <span class="keyword">while</span>(j&gt;=i)</span><br><span class="line">                &#123;</span><br><span class="line">                    --(*<span class="keyword">this</span>)[j];</span><br><span class="line">                    (*<span class="keyword">this</span>)[--j]+=<span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            (*<span class="keyword">this</span>)[i]+=(*<span class="keyword">this</span>)[i<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">            (*<span class="keyword">this</span>)[i<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(!empty()&amp;&amp;!back())pop_back();</span><br><span class="line">        	<span class="keyword">if</span>(empty())&#123;f=<span class="number">1</span>;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(back()&gt;=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            push_back(back()/<span class="number">10</span>);</span><br><span class="line">            (*<span class="keyword">this</span>)[size()<span class="number">-2</span>]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(back()&lt;<span class="number">0</span>)f*=<span class="number">-1</span>,(*<span class="keyword">this</span>)[size()<span class="number">-1</span>]*=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong><em>所有的运算符重载可以参见我的 重载运算符和重载函数 博客</em></strong></p>
<h2 id="输入输出运算符"><a href="#输入输出运算符" class="headerlink" title="输入输出运算符"></a>输入输出运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is,Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    is&gt;&gt;s;</span><br><span class="line">    n.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(s[i]==<span class="string">'-'</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    		n.f=<span class="number">-1</span>;</span><br><span class="line">    		<span class="keyword">continue</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	n.push_back(s[i]-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os,<span class="keyword">const</span> Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n.empty())&#123;os&lt;&lt;<span class="number">0</span>;<span class="keyword">return</span> os;&#125;</span><br><span class="line">    <span class="keyword">if</span>(n.f==<span class="number">-1</span>)os&lt;&lt;<span class="string">"-"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)os&lt;&lt;n[i];</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接增加”-“的判断即可。</p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>正如之前的，我们只写高精度之间的比较<del>，如果我们要比较一个高精度和另一个整数，可以同之前所述采用stringstream传（此条因太过毒瘤笔者被Diss到爆而去掉，感兴趣的读者可以自己了解下stringstream）</del>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.f!=b.f)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.size()!=b.size())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a!=b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.f!=b.f)<span class="keyword">return</span> a.f&lt;b.f;</span><br><span class="line">    <span class="keyword">if</span>(a.size()!=b.size())<span class="keyword">return</span> a.size()&lt;b.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])<span class="keyword">return</span> a[i]&lt;b[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> b&lt;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a&gt;b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a&lt;b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>加上判断f即可。</p>
<h2 id="单目运算符与abs函数"><a href="#单目运算符与abs函数" class="headerlink" title="单目运算符与abs函数"></a>单目运算符与abs函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wint <span class="keyword">operator</span>-(Wint a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(~a.f)a.f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> a.f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a.check();</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">Wint <span class="title">abs</span><span class="params">(Wint a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>)<span class="keyword">return</span> -a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于-运算符，我们改变符号即可。<br>对于abs函数，我们分段返回即可。</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><del>逻辑运算符</del></h2><p><del>此内容已因笔者过于蒟蒻或毒瘤而被Diss到爆炸，现已划线。</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bool operator!(Wint &amp;n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	n.check();</span></span><br><span class="line"><span class="comment">//	return n==0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//bool operator~(Wint &amp;n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	n.check();</span></span><br><span class="line"><span class="comment">//	return n!=-1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//bool operator&amp;&amp;(Wint &amp;a,Wint &amp;b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	a.check();b.check();</span></span><br><span class="line"><span class="comment">//	if(!a)return 0;</span></span><br><span class="line"><span class="comment">//	if(!b)return 0;</span></span><br><span class="line"><span class="comment">//	return 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//bool operator||(Wint &amp;a,Wint &amp;b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	a.check();b.check();</span></span><br><span class="line"><span class="comment">//	if(a&gt;0)return 1;</span></span><br><span class="line"><span class="comment">//	if(b&gt;0)return 1;</span></span><br><span class="line"><span class="comment">//	return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<p><del>即使加上符号也十分的简单对不对。。。</del></p>
<h2 id="双目算术、赋值和自增自减运算符"><a href="#双目算术、赋值和自增自减运算符" class="headerlink" title="双目算术、赋值和自增自减运算符"></a>双目算术、赋值和自增自减运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wint&amp; <span class="keyword">operator</span>+=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    Wint c=b;</span><br><span class="line">    <span class="keyword">if</span>(a.size()&lt;c.size())a.resize(c.size());</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>&amp;&amp;c&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(<span class="built_in">abs</span>(a)&lt;<span class="built_in">abs</span>(c))</span><br><span class="line">    	&#123;</span><br><span class="line">    		swap(a,c);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;<span class="number">0</span>&amp;&amp;c&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(<span class="built_in">abs</span>(a)&lt;<span class="built_in">abs</span>(c))</span><br><span class="line">    	&#123;</span><br><span class="line">    		swap(a,c);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i!=b.size();++i)a[i]+=c[i]*((a.f==c.f)?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> a.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>+(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a+=b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>++(Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    n+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>++(Wint &amp;n,<span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">    Wint tmp=n;</span><br><span class="line">    n+=<span class="number">1</span>;</span><br><span class="line">    n.check();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>-=(Wint &amp;a,<span class="keyword">const</span> Wint b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a+=-b;</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>-(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a-=b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>--(Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    n-=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>--(Wint &amp;n,<span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">    Wint tmp=n;</span><br><span class="line">    n-=<span class="number">1</span>;</span><br><span class="line">    n.check();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有了符号，加减就可以一起处理了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wint <span class="keyword">operator</span>*(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    Wint n;</span><br><span class="line">    <span class="keyword">if</span>(a.f!=b.f)n.f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> n.f=<span class="number">1</span>;</span><br><span class="line">    n.assign(a.size()+b.size()<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i!=a.size(); ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j!=b.size(); ++j)</span><br><span class="line">            n[i+j]+=a[i]*b[j];</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>*=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a=a*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Wint <span class="title">divmod</span><span class="params">(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Wint ans,tmp=b;</span><br><span class="line">    <span class="keyword">int</span> af=a.f,tmpf=tmp.f;</span><br><span class="line">    a.f=tmp.f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=a.size()-tmp.size(); a&gt;=tmp; --t)</span><br><span class="line">    &#123;</span><br><span class="line">        Wint d;</span><br><span class="line">        d.assign(t+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        d.back()=<span class="number">1</span>;</span><br><span class="line">        Wint c=tmp*d;</span><br><span class="line">        <span class="keyword">while</span>(a&gt;=c)</span><br><span class="line">        &#123;</span><br><span class="line">            a-=c;</span><br><span class="line">            ans+=d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(af!=tmpf)ans.f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> ans.f=<span class="number">1</span>;</span><br><span class="line">    a.f=af,tmp.f=tmpf;</span><br><span class="line">    <span class="keyword">return</span> ans.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>/(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> divmod(a,b);</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>/=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a=a/b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>%=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    divmod(a,b);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>%(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a%=b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>乘除只用判断同或异号。<br>这里的取模运算，对于正数，取正或负模均为正数；对于负数，取正或负模均为负数。</p>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p>abs函数已经在上文提过。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Wint <span class="title">pow</span><span class="params">(<span class="keyword">const</span> Wint &amp;n,<span class="keyword">const</span> Wint &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k.empty())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">2</span>)<span class="keyword">return</span> n*n;</span><br><span class="line">    <span class="keyword">if</span>(k.back()%<span class="number">2</span>)<span class="keyword">return</span> n*<span class="built_in">pow</span>(n,k<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(n,k/<span class="number">2</span>),<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是非递归写法</span></span><br><span class="line"><span class="function">Wint <span class="title">pow</span><span class="params">(Wint n,Wint k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Wint <span class="title">ans</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span>&gt;<span class="number">0</span>)</span><br><span class="line">            ans*=n;</span><br><span class="line">        n*=n;</span><br><span class="line">        k/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是快速幂函数。</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>那么整体的写法如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Wint</span>:</span><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line">    Wint(<span class="keyword">int</span> n=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(n&lt;<span class="number">0</span>)n*=f=<span class="number">-1</span>;</span><br><span class="line">        push_back(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Wint&amp; <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!empty()&amp;&amp;!back())pop_back();</span><br><span class="line">        <span class="keyword">if</span>(empty())&#123;f=<span class="number">1</span>;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">        <span class="keyword">if</span>(back()&lt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">    		f*=<span class="number">-1</span>;</span><br><span class="line">    		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size(); ++i)</span><br><span class="line">    			(*<span class="keyword">this</span>)[i]*=<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">        	<span class="keyword">while</span>((*<span class="keyword">this</span>)[i<span class="number">-1</span>]&lt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> j=i;</span><br><span class="line">                <span class="keyword">while</span>((*<span class="keyword">this</span>)[j]&lt;=<span class="number">0</span>&amp;&amp;j&lt;size())++j;</span><br><span class="line">                <span class="keyword">while</span>(j&gt;=i)</span><br><span class="line">                &#123;</span><br><span class="line">                    --(*<span class="keyword">this</span>)[j];</span><br><span class="line">                    (*<span class="keyword">this</span>)[--j]+=<span class="number">10</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            (*<span class="keyword">this</span>)[i]+=(*<span class="keyword">this</span>)[i<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">            (*<span class="keyword">this</span>)[i<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span>(!empty()&amp;&amp;!back())pop_back();</span><br><span class="line">        	<span class="keyword">if</span>(empty())&#123;f=<span class="number">1</span>;<span class="keyword">return</span> *<span class="keyword">this</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(back()&gt;=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            push_back(back()/<span class="number">10</span>);</span><br><span class="line">            (*<span class="keyword">this</span>)[size()<span class="number">-2</span>]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(back()&lt;<span class="number">0</span>)f*=<span class="number">-1</span>,(*<span class="keyword">this</span>)[size()<span class="number">-1</span>]*=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is,Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    is&gt;&gt;s;</span><br><span class="line">    n.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(s[i]==<span class="string">'-'</span>)</span><br><span class="line">    	&#123;</span><br><span class="line">    		n.f=<span class="number">-1</span>;</span><br><span class="line">    		<span class="keyword">continue</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	n.push_back(s[i]-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os,<span class="keyword">const</span> Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n.empty())&#123;os&lt;&lt;<span class="number">0</span>;<span class="keyword">return</span> os;&#125;</span><br><span class="line">    <span class="keyword">if</span>(n.f==<span class="number">-1</span>)os&lt;&lt;<span class="string">"-"</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)os&lt;&lt;n[i];</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.f!=b.f)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a.size()!=b.size())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a!=b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.f!=b.f)<span class="keyword">return</span> a.f&lt;b.f;</span><br><span class="line">    <span class="keyword">if</span>(a.size()!=b.size())<span class="keyword">return</span> a.size()&lt;b.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])<span class="keyword">return</span> a[i]&lt;b[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> b&lt;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a&gt;b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a&lt;b);</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>-(Wint a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(~a.f)a.f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> a.f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> a.check();</span><br><span class="line">&#125; </span><br><span class="line"><span class="function">Wint <span class="title">abs</span><span class="params">(Wint a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>)<span class="keyword">return</span> -a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> a;</span><br><span class="line">&#125; </span><br><span class="line">Wint&amp; <span class="keyword">operator</span>+=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    Wint c=b;</span><br><span class="line">    <span class="keyword">if</span>(a.size()&lt;c.size())a.resize(c.size());</span><br><span class="line">    <span class="keyword">if</span>(a&lt;<span class="number">0</span>&amp;&amp;c&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(<span class="built_in">abs</span>(a)&lt;<span class="built_in">abs</span>(c))</span><br><span class="line">    	&#123;</span><br><span class="line">    		swap(a,c);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a&gt;<span class="number">0</span>&amp;&amp;c&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(<span class="built_in">abs</span>(a)&lt;<span class="built_in">abs</span>(c))</span><br><span class="line">    	&#123;</span><br><span class="line">    		swap(a,c);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i!=b.size();++i)a[i]+=c[i]*((a.f==c.f)?<span class="number">1</span>:<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> a.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>+(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a+=b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>++(Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    n+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>++(Wint &amp;n,<span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">    Wint tmp=n;</span><br><span class="line">    n+=<span class="number">1</span>;</span><br><span class="line">    n.check();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>-=(Wint &amp;a,<span class="keyword">const</span> Wint b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a+=-b;</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>-(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a-=b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>--(Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    n-=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>--(Wint &amp;n,<span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">    Wint tmp=n;</span><br><span class="line">    n-=<span class="number">1</span>;</span><br><span class="line">    n.check();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>*(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    Wint n;</span><br><span class="line">    <span class="keyword">if</span>(a.f!=b.f)n.f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> n.f=<span class="number">1</span>;</span><br><span class="line">    n.assign(a.size()+b.size()<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i!=a.size(); ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j!=b.size(); ++j)</span><br><span class="line">            n[i+j]+=a[i]*b[j];</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>*=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a=a*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Wint <span class="title">divmod</span><span class="params">(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Wint ans,tmp=b;</span><br><span class="line">    <span class="keyword">int</span> af=a.f,tmpf=tmp.f;</span><br><span class="line">    a.f=tmp.f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=a.size()-tmp.size(); a&gt;=tmp; --t)</span><br><span class="line">    &#123;</span><br><span class="line">        Wint d;</span><br><span class="line">        d.assign(t+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        d.back()=<span class="number">1</span>;</span><br><span class="line">        Wint c=tmp*d;</span><br><span class="line">        <span class="keyword">while</span>(a&gt;=c)</span><br><span class="line">        &#123;</span><br><span class="line">            a-=c;</span><br><span class="line">            ans+=d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(af!=tmpf)ans.f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span> ans.f=<span class="number">1</span>;</span><br><span class="line">    a.f=af,tmp.f=tmpf;</span><br><span class="line">    <span class="keyword">return</span> ans.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>/(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> divmod(a,b);</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>/=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a=a/b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>%=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    divmod(a,b);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>%(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a%=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Wint <span class="title">pow</span><span class="params">(<span class="keyword">const</span> Wint &amp;n,<span class="keyword">const</span> Wint &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k.empty())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">2</span>)<span class="keyword">return</span> n*n;</span><br><span class="line">    <span class="keyword">if</span>(k.back()%<span class="number">2</span>)<span class="keyword">return</span> n*<span class="built_in">pow</span>(n,k<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(n,k/<span class="number">2</span>),<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////下面是非递归写法</span></span><br><span class="line"><span class="comment">//Wint pow(Wint n,Wint k)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	Wint ans(1);</span></span><br><span class="line"><span class="comment">//	while(k&gt;0)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		if(k%2&gt;0)</span></span><br><span class="line"><span class="comment">//			ans*=n;</span></span><br><span class="line"><span class="comment">//		n*=n;</span></span><br><span class="line"><span class="comment">//		k/=2;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	return ans;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="高精度的用法"><a href="#高精度的用法" class="headerlink" title="高精度的用法"></a>高精度的用法</h1><p>还是举洛谷高精度算法试炼场中的几道题<br>我们在main函数中这么写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Wint a,b;</span><br><span class="line">    <span class="comment">//可以把b改成int型，仍能正常使用（题切不了）</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="comment">//LuoguP1601 cout&lt;&lt;a+b&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//LuoguP2142 cout&lt;&lt;a-b&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//LuoguP1303 cout&lt;&lt;a*b&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】真正的全真虚拟机：VmWare Workstation</title>
    <url>/blog/lgrb-zhen-zheng-di-quan-zhen-xu-ni-ji-vmware-workstation/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="真正的全真虚拟机：VmWare-Workstation"><a href="#真正的全真虚拟机：VmWare-Workstation" class="headerlink" title="真正的全真虚拟机：VmWare Workstation"></a>真正的全真虚拟机：VmWare Workstation</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://www.luogu.org/blog/ztz11/zhen-zheng-di-quan-zhen-xu-ni-ji-vmware-workstation" target="_blank" rel="noopener">洛谷日报#64</a>，原作者为木木小胖。</p>
</blockquote>
<hr>
<p>记得以前有大佬曾教过我们用win10的自带双系统运行Ubuntu，但这玩意儿好像玩起来并不简单（反正本人试了一上午也没成功），而且这个系统是和windows交互的，我们也很难调整性能参数。今天，我来教大家玩一玩真正的虚拟机——VmWare Workstation</p>
<h2 id="①-安装"><a href="#①-安装" class="headerlink" title="①.安装"></a>①.安装</h2><p>VmWare是个昂贵的软件，但还是请大家多多支持正版，如果家里没矿的话，可以点<a href="https://pan.baidu.com/s/11s2FzeMYvQpUOkNcepfqgg" target="_blank" rel="noopener">这里</a>下载破解版（仅供学习，严禁用于商业）</p>
<p>首先，解压后双击启动安装</p>
<p><img src="https://cdn.luogu.org/upload/pic/34462.png" alt=""></p>
<p>进入如下页面时点选我接受，下一步</p>
<p><img src="https://cdn.luogu.org/upload/pic/34463.png" alt=""></p>
<p>我们一般安装典型，如果大佬想自定义也可以，但会相对麻烦</p>
<p><img src="https://cdn.luogu.org/upload/pic/34464.png" alt=""></p>
<p>选择要安装的位置，单击下一步</p>
<p><img src="https://cdn.luogu.org/upload/pic/34465.png" alt=""></p>
<p>静候安装完成（大概得4~5分钟）</p>
<p><img src="https://cdn.luogu.org/upload/pic/34466.png" alt=""></p>
<p>输入许可证号(支持正版，如果实在不想买的话我的压缩包里有密码机vm10keygen.exe)</p>
<p><img src="https://cdn.luogu.org/upload/pic/34468.png" alt=""></p>
<p>单击完成</p>
<p><img src="https://cdn.luogu.org/upload/pic/34467.png" alt=""></p>
<h2 id="②-安装系统与配置虚拟机-系统以NOILinux为例"><a href="#②-安装系统与配置虚拟机-系统以NOILinux为例" class="headerlink" title="②.安装系统与配置虚拟机(系统以NOILinux为例)"></a>②.安装系统与配置虚拟机(系统以NOILinux为例)</h2><p>vmware的虚拟机最大的优点就是可以方便的修改虚拟机的配置，让电脑以你想要的性能运行（<del>当然，让虚拟机性能超过你运行虚拟机的物理机是不可能的，这辈子也不可能的</del>）</p>
<p>启动虚拟机，你会看到这样一个界面,我们点击创建新的虚拟机</p>
<p><img src="https://cdn.luogu.org/upload/pic/34470.png" alt=""></p>
<p>他会弹出一个窗口，一般我们点选“典型”</p>
<p><img src="https://cdn.luogu.org/upload/pic/34471.png" alt=""></p>
<p>我们选择稍后安装操作系统</p>
<p><img src="https://cdn.luogu.org/upload/pic/34472.png" alt=""></p>
<p>因为NOILinux是基于Ubuntu的操作系统，我们选择linux-&gt;Ubuntu</p>
<p><img src="https://cdn.luogu.org/upload/pic/34473.png" alt=""></p>
<p>选择你要安装的位置，并命名虚拟机</p>
<p><img src="https://cdn.luogu.org/upload/pic/34474.png" alt=""></p>
<p>这个就看你的爱好了，但记住，虚拟机磁盘不能大于你装虚拟机的磁盘</p>
<p><img src="https://cdn.luogu.org/upload/pic/34477.png" alt=""></p>
<p>这一步非常重要，像不像CCF老爷机就看这个了。我们单击自定义硬件</p>
<p><img src="https://cdn.luogu.org/upload/pic/34478.png" alt=""></p>
<p>我们看CCF老爷机的配置，处理器是2009年的AMD+Athlon(tm)+II+x2+240，2.8GHz\times×2，内存4G.</p>
<p><img src="https://cdn.luogu.org/upload/pic/34479.png" alt=""></p>
<p>处理器的话如果你开到双核每个核心单线程就好。因为主系统方面也会占用一些性能。但如果你是I7的话最好还是开成单核双线程，压缩一下性能，这样更像老爷机</p>
<p><img src="https://cdn.luogu.org/upload/pic/34480.png" alt=""></p>
<p>内存的话开到1G即可，这样就可以评测512M的程序，4G一般用不完，我就不去开他</p>
<p><img src="https://cdn.luogu.org/upload/pic/34481.png" alt=""></p>
<p>单击完成，我们发现已经创建好一个空白虚拟机了。下面我们来装系统</p>
<p><img src="https://cdn.luogu.org/upload/pic/34483.png" alt=""></p>
<p>首先，我们双击CD/DVD，选择使用iso映像文件，路径是NOILinux安装包的位置</p>
<p><img src="https://cdn.luogu.org/upload/pic/34485.png" alt=""></p>
<p>单击完成返回上一页面，单击“开启此虚拟机”，静待载入</p>
<p><img src="https://cdn.luogu.org/upload/pic/34486.png" alt=""></p>
<p>进入安装界面后，我们选择简体中文-&gt;安装Ubuntu</p>
<p><img src="https://cdn.luogu.org/upload/pic/34487.png" alt=""></p>
<p>选择清除整个磁盘并安装，然后单击现在安装</p>
<p><img src="https://cdn.luogu.org/upload/pic/34488.png" alt=""></p>
<p>中间会让你选择时区和语言，选择中国-上海和中文简体即可</p>
<p>然后静候安装完成（大概需要20min）</p>
<p>他会让你重启，按指令重启即可</p>
<p><img src="https://cdn.luogu.org/upload/pic/34489.png" alt=""></p>
<p>安装完成！就可以进入使用了（初始密码为123456）</p>
<h3 id="PS：A-我没看出vm有什么优点啊？"><a href="#PS：A-我没看出vm有什么优点啊？" class="headerlink" title="PS：A:我没看出vm有什么优点啊？"></a>PS：A:我没看出vm有什么优点啊？</h3><h3 id="我：别急，下面就让你涨涨见识"><a href="#我：别急，下面就让你涨涨见识" class="headerlink" title="我：别急，下面就让你涨涨见识"></a>我：别急，下面就让你涨涨见识</h3><h2 id="1-方便的系统间文件传输"><a href="#1-方便的系统间文件传输" class="headerlink" title="1.方便的系统间文件传输"></a>1.方便的系统间文件传输</h2><p>vm系列的文件传输才不需要什么高端操作呢！动动鼠标就行。</p>
<p>首先，我们启动虚拟机，让他和主系统并列的放置</p>
<p><img src="https://cdn.luogu.org/upload/pic/34678.png" alt=""></p>
<p>然后，我们选中要移动的文件，拖放到虚拟机的范围</p>
<p><img src="https://cdn.luogu.org/upload/pic/34625.png" alt=""></p>
<p>松开鼠标，文件便会自动复制到虚拟机中</p>
<p><img src="https://cdn.luogu.org/upload/pic/34631.png" alt=""></p>
<h2 id="2-虚拟机的移动"><a href="#2-虚拟机的移动" class="headerlink" title="2.虚拟机的移动"></a>2.虚拟机的移动</h2><p>很良心的功能啊</p>
<p>不管走到哪里，只要有电脑，你都可以随心所欲地使用原来的虚拟机</p>
<h3 id="①-虚拟机的打包"><a href="#①-虚拟机的打包" class="headerlink" title="①.虚拟机的打包"></a>①.虚拟机的打包</h3><p>其实说打包是不完全正确的，因为其实方便到无需打包</p>
<p>首先，我们找到虚拟机的安装目录</p>
<p>你会发现这么一堆东西</p>
<p><img src="https://cdn.luogu.org/upload/pic/34632.png" alt=""></p>
<p>这些东西就是虚拟机的配置文件和虚拟磁盘。我们把他们装在一个文件夹里，复制到U盘里就好了。这些文件会保留你当前虚拟机的一切状态</p>
<h3 id="②-虚拟机的载入"><a href="#②-虚拟机的载入" class="headerlink" title="②.虚拟机的载入"></a>②.虚拟机的载入</h3><p>上面我们说了如何打包虚拟机，这里我们来说说如何载入打包好的虚拟机</p>
<p>第一步，打开VmWare</p>
<p>看好，这里是没有任何虚拟机的</p>
<p><img src="https://cdn.luogu.org/upload/pic/34634.png" alt=""></p>
<p>我们选择：文件-&gt;打开</p>
<p><img src="https://cdn.luogu.org/upload/pic/34637.png" alt=""></p>
<p>在弹出的窗口中选择你的虚拟机所在的位置,选中后点击即可</p>
<p><img src="https://cdn.luogu.org/upload/pic/34641.png" alt=""></p>
<p>OK</p>
<p><img src="https://cdn.luogu.org/upload/pic/34646.png" alt=""></p>
<p><del>妈妈再也不用担心我出门要背着笔电了</del>，只要有一个U盘，你就可以走遍天下，在任何装了VmWare的地方使用虚拟机</p>
<h3 id="③-虚拟机的外部硬件连接"><a href="#③-虚拟机的外部硬件连接" class="headerlink" title="③.虚拟机的外部硬件连接"></a>③.虚拟机的外部硬件连接</h3><p>如果你想让U盘直接连接到虚拟机上，请看这里</p>
<p>首先，我们把U盘插到物理机上，同时开启虚拟机</p>
<p><img src="https://cdn.luogu.org/upload/pic/34650.png" alt=""></p>
<p>我们会发现虚拟机的右下角有一排小图标，那里就是虚拟机可以连接或已经连接的硬件</p>
<p><img src="https://cdn.luogu.org/upload/pic/34654.png" alt=""></p>
<p>我们要安装的是一个U盘（图标框右面第二个，我们单击图标）</p>
<p><img src="https://cdn.luogu.org/upload/pic/34657.png" alt=""></p>
<p>在弹窗中点击连接即可</p>
<p><img src="https://cdn.luogu.org/upload/pic/34660.png" alt=""></p>
<p>这时候图标会变亮，表示已经连接</p>
<p>退出连接也很简单，再点击一下即可（这时图标会变暗）</p>
<h3 id="④-挂起虚拟机"><a href="#④-挂起虚拟机" class="headerlink" title="④.挂起虚拟机"></a>④.挂起虚拟机</h3><p>有时候，我们可能有事，要关闭物理机，但是，我们又不想关掉虚拟机，怎么办呢？</p>
<p>这时候，我们就可以用挂起解决问题</p>
<p>首先，我们在虚拟机的界面找虚拟机-&gt;电源-&gt;挂起虚拟机，然后单击</p>
<p><img src="https://cdn.luogu.org/upload/pic/34670.png" alt=""></p>
<p>这时系统会弹出一个加载页面，静候完成，之后界面会变成这个样子,表示挂起完成</p>
<p><img src="https://cdn.luogu.org/upload/pic/34672.png" alt=""></p>
<p>你可以干别的去了qwq，回来的时候单击“继续运行此虚拟机”即可</p>
<h2 id="VmWare的介绍到此结束，祝大家玩的愉快"><a href="#VmWare的介绍到此结束，祝大家玩的愉快" class="headerlink" title="VmWare的介绍到此结束，祝大家玩的愉快"></a>VmWare的介绍到此结束，祝大家玩的愉快</h2>]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度无符号整数算法</title>
    <url>/blog/high-precision-no/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="高精度的写法"><a href="#高精度的写法" class="headerlink" title="高精度的写法"></a>高精度的写法</h1><p>我们为了方便后来的操作，可以先使用一个struct封装内容物。<br>我们可以在声明一个struct的时候自动声明一个vector作为整体类型。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Wint</span>:</span><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们可以写一个构造函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wint(<span class="keyword">int</span> n=<span class="number">0</span>)</span><br><span class="line">   &#123;</span><br><span class="line">   	push_back(n);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>对于这个构造函数，如果我们不传n，那么默认n为0。<br>同时，我们为了方便写高精度之间的操作，我们可以先写一个check函数以帮助我们写下面的函数。我们检查下是否在非空的情况下最后一位为0，如果是我们就弹掉（如果是最后一位，额，我们在输出的时候会解决这个问题，可以提前看下怎么处理）。我们发现一位大于9，我们就进位，如果最后一位（即最高位）还大于9，我们就新建最后一位。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Wint&amp; <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!empty()&amp;&amp;!back())pop_back();</span><br><span class="line">    <span class="keyword">if</span>(empty())<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;size(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        (*<span class="keyword">this</span>)[i]+=(*<span class="keyword">this</span>)[i<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">        (*<span class="keyword">this</span>)[i<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(back()&gt;=<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        push_back(back()/<span class="number">10</span>);</span><br><span class="line">        (*<span class="keyword">this</span>)[size()<span class="number">-2</span>]%=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么整体的struct就长这样</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Wint</span>:</span><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Wint(<span class="keyword">int</span> n=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        push_back(n);</span><br><span class="line">        check();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Wint&amp; <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!empty()&amp;&amp;!back())pop_back();</span><br><span class="line">        <span class="keyword">if</span>(empty())<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            (*<span class="keyword">this</span>)[i]+=(*<span class="keyword">this</span>)[i<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">            (*<span class="keyword">this</span>)[i<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(back()&gt;=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            push_back(back()/<span class="number">10</span>);</span><br><span class="line">            (*<span class="keyword">this</span>)[size()<span class="number">-2</span>]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><strong><em>所有的运算符重载可以参见我的 重载运算符和重载函数 博客</em></strong></p>
<h2 id="输入输出运算符"><a href="#输入输出运算符" class="headerlink" title="输入输出运算符"></a>输入输出运算符</h2><p>我们不要考虑scanf这种读入<del>（因为这样的实现很复杂我不会）</del>，既然高精度的时间复杂度很大<del>（也有可能是我比较蒟蒻）</del>，我们就可以考虑流式输入输出</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is,Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    is&gt;&gt;s;</span><br><span class="line">    n.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)n.push_back(s[i]-<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os,<span class="keyword">const</span> Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n.empty())os&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)os&lt;&lt;n[i];</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至于流式输入输出的运算符写法，可以参考我的博客重载运算符。</p>
<p>对于输入流，我们先读入一串字符，然后从后向前加数（即高位在后，低位在前，这样方便我们进行加减等运算）。</p>
<p>对于输出流，我们如果发现为空（一般是只定义没有输入或计算，常用来卡高精）就输出0；然后从后往前输出就是高位到低位输出。</p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>我们不要考虑太多类型与高精度相比较，我们可以先考虑高精度间的逻辑<del>，如果我们要比较一个高精度和另一个整数，可以采用stringstream传（此条因太过毒瘤笔者被Diss到爆而去掉，感兴趣的读者可以自己了解下stringstream）</del>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.size()!=b.size())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a!=b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.size()!=b.size())<span class="keyword">return</span> a.size()&lt;b.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])<span class="keyword">return</span> a[i]&lt;b[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> b&lt;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a&gt;b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a&lt;b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于不等于，我们可以在判断完位数后挨个比较位数；对于等于，我们可以返回非不等于。</p>
<p>对于小于，我们可以比较位数，然后从高位向低位比较大小；对于大于，我们可以返回反比较的小于；对于小于等于，我们可以返回非大于；对于大于等于，我们可以返回非小于。</p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a><del>逻辑运算符</del></h2><p><del>此内容已因笔者过于蒟蒻或毒瘤而被Diss到爆炸，现已划线。</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//bool operator!(Wint &amp;n)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	n.check();</span></span><br><span class="line"><span class="comment">//	return n==0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//bool operator&amp;&amp;(Wint &amp;a,Wint &amp;b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	a.check();b.check();</span></span><br><span class="line"><span class="comment">//	if(!a)return 0;</span></span><br><span class="line"><span class="comment">//	if(!b)return 0;</span></span><br><span class="line"><span class="comment">//	return 1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//bool operator||(Wint &amp;a,Wint &amp;b)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	a.check();b.check();</span></span><br><span class="line"><span class="comment">//	if(a&gt;0)return 1;</span></span><br><span class="line"><span class="comment">//	if(b&gt;0)return 1;</span></span><br><span class="line"><span class="comment">//	return 0;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<p><del>十分的简单对不对。。。</del></p>
<h2 id="双目算术、赋值和自增自减运算符"><a href="#双目算术、赋值和自增自减运算符" class="headerlink" title="双目算术、赋值和自增自减运算符"></a>双目算术、赋值和自增自减运算符</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wint&amp; <span class="keyword">operator</span>+=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.size()&lt;b.size())a.resize(b.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i!=b.size();++i)a[i]+=b[i];</span><br><span class="line">    <span class="keyword">return</span> a.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>+(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a+=b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>++(Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    n+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>++(Wint &amp;n,<span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">    Wint tmp=n;</span><br><span class="line">    n+=<span class="number">1</span>;</span><br><span class="line">    n.check();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于加法，我们先实现+=，如果a的size小，我们就要开空间，然后依次相加最后check下即可。<br>对于+可以返回a+=b。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wint&amp; <span class="keyword">operator</span>-=(Wint &amp;a,Wint b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)swap(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i!=b.size(); a[i]-=b[i],++i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(!a[j])++j;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;i)</span><br><span class="line">            &#123;</span><br><span class="line">                --a[j];</span><br><span class="line">                a[--j]+=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> a.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>-(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a-=b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>--(Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    n-=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>--(Wint &amp;n,<span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">    Wint tmp=n;</span><br><span class="line">    n-=<span class="number">1</span>;</span><br><span class="line">    n.check();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于减法，我们先实现-=，如果a小我们就要交换a和b（我们写的是高精度无符号整数），然后后依次相加最后check下即可。<br>对于-可以返回a-=b。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wint <span class="keyword">operator</span>*(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    Wint n;</span><br><span class="line">    n.assign(a.size()+b.size()<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i!=a.size(); ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j!=b.size(); ++j)</span><br><span class="line">            n[i+j]+=a[i]*b[j];</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>*=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a=a*b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于乘法，我们需要先实现<figure class="highlight plain"><figcaption><span>* b_j$。然后对于```*</span></figcaption><table><tr><td class="code"><pre><span class="line">```cpp</span><br><span class="line">Wint divmod(Wint &amp;a,const Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    Wint ans;</span><br><span class="line">    for(int t=a.size()-b.size(); a&gt;=b; --t)</span><br><span class="line">    &#123;</span><br><span class="line">        Wint d;</span><br><span class="line">        d.assign(t+1,0);</span><br><span class="line">        d.back()=1;</span><br><span class="line">        Wint c=b*d;</span><br><span class="line">        while(a&gt;=c)</span><br><span class="line">        &#123;</span><br><span class="line">            a-=c;</span><br><span class="line">            ans+=d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">Wint operator/(Wint a,const Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    return divmod(a,b);</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; operator/=(Wint &amp;a,const Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    return a=a/b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>学过Python的读者应该知道在Python中有一个divmod函数（在Python 2.3之前不允许处理复数），这个函数在Python中把除数和余数运算结果结合起来，返回一个包含商和余数的元组(a//b,a%b)。<br>而在C++中我们写的这个函数就是除法。assign是C++string类的成员函数，用于拷贝、赋值操作，它们允许我们顺次地把一个string对象的部分内容拷贝到另一个string对象上。<br>然后写/，返回divmod(a,b)；/=返回a=a/b。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Wint&amp; <span class="keyword">operator</span>%=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    divmod(a,b);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>%(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a%=b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">Wint <span class="title">pow</span><span class="params">(<span class="keyword">const</span> Wint &amp;n,<span class="keyword">const</span> Wint &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k.empty())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">2</span>)<span class="keyword">return</span> n*n;</span><br><span class="line">    <span class="keyword">if</span>(k.back()%<span class="number">2</span>)<span class="keyword">return</span> n*<span class="built_in">pow</span>(n,k<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(n,k/<span class="number">2</span>),<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面是非递归写法</span></span><br><span class="line"><span class="function">Wint <span class="title">pow</span><span class="params">(Wint n,Wint k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Wint <span class="title">ans</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span>(k&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k%<span class="number">2</span>&gt;<span class="number">0</span>)</span><br><span class="line">            ans*=n;</span><br><span class="line">        n*=n;</span><br><span class="line">        k/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实快速幂实现的思想非常好想，所以就这么写了出来。</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>那么整体的写法如下</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Wint</span>:</span><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Wint(<span class="keyword">int</span> n=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        push_back(n);</span><br><span class="line">        check();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Wint&amp; <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!empty()&amp;&amp;!back())pop_back();</span><br><span class="line">        <span class="keyword">if</span>(empty())<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            (*<span class="keyword">this</span>)[i]+=(*<span class="keyword">this</span>)[i<span class="number">-1</span>]/<span class="number">10</span>;</span><br><span class="line">            (*<span class="keyword">this</span>)[i<span class="number">-1</span>]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(back()&gt;=<span class="number">10</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            push_back(back()/<span class="number">10</span>);</span><br><span class="line">            (*<span class="keyword">this</span>)[size()<span class="number">-2</span>]%=<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is,Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    is&gt;&gt;s;</span><br><span class="line">    n.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)n.push_back(s[i]-<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os,<span class="keyword">const</span> Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n.empty())os&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)os&lt;&lt;n[i];</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.size()!=b.size())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a!=b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.size()!=b.size())<span class="keyword">return</span> a.size()&lt;b.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=a.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]!=b[i])<span class="keyword">return</span> a[i]&lt;b[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> b&lt;a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a&gt;b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> !(a&lt;b);</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>+=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.size()&lt;b.size())a.resize(b.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i!=b.size(); ++i)a[i]+=b[i];</span><br><span class="line">    <span class="keyword">return</span> a.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>+(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a+=b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>++(Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    n+=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>++(Wint &amp;n,<span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">    Wint tmp=n;</span><br><span class="line">    n+=<span class="number">1</span>;</span><br><span class="line">    n.check();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>-=(Wint &amp;a,Wint b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&lt;b)swap(a,b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i!=b.size(); a[i]-=b[i],++i)</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;b[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(!a[j])++j;</span><br><span class="line">            <span class="keyword">while</span>(j&gt;i)</span><br><span class="line">            &#123;</span><br><span class="line">                --a[j];</span><br><span class="line">                a[--j]+=<span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> a.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>-(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a-=b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>--(Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    n-=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>--(Wint &amp;n,<span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">    Wint tmp=n;</span><br><span class="line">    n-=<span class="number">1</span>;</span><br><span class="line">    n.check();</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>*(<span class="keyword">const</span> Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    Wint n;</span><br><span class="line">    n.assign(a.size()+b.size()<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i!=a.size(); ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j!=b.size(); ++j)</span><br><span class="line">            n[i+j]+=a[i]*b[j];</span><br><span class="line">    <span class="keyword">return</span> n.check();</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>*=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a=a*b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Wint <span class="title">divmod</span><span class="params">(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Wint ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=a.size()-b.size(); a&gt;=b; --t)</span><br><span class="line">    &#123;</span><br><span class="line">        Wint d;</span><br><span class="line">        d.assign(t+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        d.back()=<span class="number">1</span>;</span><br><span class="line">        Wint c=b*d;</span><br><span class="line">        <span class="keyword">while</span>(a&gt;=c)</span><br><span class="line">        &#123;</span><br><span class="line">            a-=c;</span><br><span class="line">            ans+=d;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>/(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> divmod(a,b);</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>/=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a=a/b;</span><br><span class="line">&#125;</span><br><span class="line">Wint&amp; <span class="keyword">operator</span>%=(Wint &amp;a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    divmod(a,b);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line">Wint <span class="keyword">operator</span>%(Wint a,<span class="keyword">const</span> Wint &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> a%=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Wint <span class="title">pow</span><span class="params">(<span class="keyword">const</span> Wint &amp;n,<span class="keyword">const</span> Wint &amp;k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(k.empty())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">2</span>)<span class="keyword">return</span> n*n;</span><br><span class="line">    <span class="keyword">if</span>(k.back()%<span class="number">2</span>)<span class="keyword">return</span> n*<span class="built_in">pow</span>(n,k<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(<span class="built_in">pow</span>(n,k/<span class="number">2</span>),<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">////下面是非递归写法</span></span><br><span class="line"><span class="comment">//Wint pow(Wint n,Wint k)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	Wint ans(1);</span></span><br><span class="line"><span class="comment">//	while(k&gt;0)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		if(k%2&gt;0)</span></span><br><span class="line"><span class="comment">//			ans*=n;</span></span><br><span class="line"><span class="comment">//		n*=n;</span></span><br><span class="line"><span class="comment">//		k/=2;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	return ans;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br></pre></td></tr></table></figure>

<h1 id="高精度的用法"><a href="#高精度的用法" class="headerlink" title="高精度的用法"></a>高精度的用法</h1><p>我们在之前的定义写法中写的方式可以方便的帮助我们写。<br>例如洛谷高精度算法试炼场中的几道题<br>我们在main函数中这么写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Wint a,b;</span><br><span class="line">    <span class="comment">//可以把b改成int型，仍能正常使用（题切不了）</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="comment">//LuoguP1601 cout&lt;&lt;a+b&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//LuoguP2142 if(a-b&lt;0)cout&lt;&lt;"-";cout&lt;&lt;a-b&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">//LuoguP1303 cout&lt;&lt;a*b&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//LuoguP1255</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    Wint f[<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>]=(Wint)<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">1</span>]=(Wint)<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i%<span class="number">3</span>]=f[(i<span class="number">-1</span>)%<span class="number">3</span>]+f[(i<span class="number">-2</span>)%<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f[n%<span class="number">3</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//LuoguP1604</span></span><br><span class="line"><span class="comment">//我们先定义一个进制，然后修改check和输入输出即可</span></span><br><span class="line"><span class="keyword">int</span> jz;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Wint</span>:</span><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function">Wint&amp; <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!empty()&amp;&amp;!back())pop_back();</span><br><span class="line">        <span class="keyword">if</span>(empty())<span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;size(); ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            (*<span class="keyword">this</span>)[i]+=(*<span class="keyword">this</span>)[i<span class="number">-1</span>]/jz;</span><br><span class="line">            (*<span class="keyword">this</span>)[i<span class="number">-1</span>]%=jz;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(back()&gt;=jz)</span><br><span class="line">        &#123;</span><br><span class="line">            push_back(back()/jz);</span><br><span class="line">            (*<span class="keyword">this</span>)[size()<span class="number">-2</span>]%=jz;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;is,Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    is&gt;&gt;s;</span><br><span class="line">    n.clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">if</span>(s[i]&gt;=<span class="string">'A'</span>)n.push_back(s[i]-<span class="string">'A'</span>+<span class="number">10</span>);</span><br><span class="line">    	<span class="keyword">else</span> n.push_back(s[i]-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp;os,<span class="keyword">const</span> Wint &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n.empty())os&lt;&lt;<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n.size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; --i)</span><br><span class="line">    &#123;</span><br><span class="line">    	<span class="keyword">char</span> tmp;</span><br><span class="line">    	<span class="keyword">if</span>(n[i]&gt;<span class="number">9</span>)tmp=<span class="string">'A'</span>+n[i]<span class="number">-10</span>;</span><br><span class="line">        <span class="keyword">else</span> tmp=n[i]+<span class="string">'0'</span>;</span><br><span class="line">        os&lt;&lt;tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最后main函数里</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Wint a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;jz;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>STL的一些总结</title>
    <url>/blog/Standard-Template-Library/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="stdC-STL-C-标准STL"><a href="#stdC-STL-C-标准STL" class="headerlink" title="stdC++ STL|C++标准STL"></a>stdC++ STL|C++标准STL</h1><h2 id="Containers-容器"><a href="#Containers-容器" class="headerlink" title="Containers|容器"></a>Containers|容器</h2><h3 id="简单容器"><a href="#简单容器" class="headerlink" title="简单容器"></a>简单容器</h3><h4 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h4><p>定义于&lt;stl_pair.h&gt;中，需要使用命名空间std。</p>
<p>pair是一个 对 ，用于存储一对类型可能不同的量。</p>
<p><strong>使用方法</strong>是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B&gt;p;<span class="comment">//即定义了一个拥有两个可以不同类型的对</span></span><br></pre></td></tr></table></figure>

<p>相当于定义了一个p[2]，其中p[0]的类型为A，p[1]的类型为B。</p>
<p><strong>访问方式</strong>是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">p.first p.second</span><br></pre></td></tr></table></figure>

<p>p.first相当于p[0]，p.second相当于p[1]。</p>
<p><strong>赋值方式</strong>是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">typename</span> A,<span class="keyword">typename</span> B&gt;p(a,b);</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">p=make_pair(a,b);</span><br><span class="line"><span class="comment">//或</span></span><br><span class="line">p.first=a;</span><br><span class="line">p.second=b;</span><br></pre></td></tr></table></figure>

<p>这样就相当于把一个类型为A的量a赋值到p.first，把一个类型为B的量b复制到p.second。</p>
<p><strong>其他</strong></p>
<p>pair间支持逻辑运算符（两个pair的A、B类型必须对应相同）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">!= &lt; &lt;= == &gt; &gt;=</span><br></pre></td></tr></table></figure>

<p>支持函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> swap</span><br></pre></td></tr></table></figure>

<p>swap可以交换两个pair（两个pair的A、B类型必须对应相同），是将两个pair中的first互换，second互换。</p>
<p>写到其他的类型里（不过此时要注意两个’&gt;’不要挨着否则会被判CE），例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; &gt;v;</span><br><span class="line"><span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;q;</span><br></pre></td></tr></table></figure>

<p>而且，pair也支持写到pair的类型A、B里，例如：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">pair&lt;<span class="keyword">int</span>,pair&lt;pair&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt; &gt;p;</span><br></pre></td></tr></table></figure>

<h3 id="序列式容器"><a href="#序列式容器" class="headerlink" title="序列式容器"></a>序列式容器</h3><h4 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h4><p>定义于&lt;stl_vector.h&gt;中，需要使用命名空间std。</p>
<p>vector的实质就是一个数组，下标从0开始，只不过这个数组是一个空间动态的数组，一个空的vector当插入第一个数时空间为1，插入第二个数时空间为2，插入第三个数时空间为4，插入第四个数时空间为4，插入第五个数时空间为8……其空间每次需要开新的空间时倍增，所以不能直接访问无空间缓存的下标，但是可以通过初始化直接开对应大小，向后插入需要新空间时倍增。</p>
<p><strong>使用方法</strong>是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">typename</span> A&gt;v;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">typename</span> A&gt;v();</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">typename</span> A&gt;v(size);<span class="comment">//定义了一个大小为size，存储类型为A的vector（相当于v[size]）</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">typename</span> A&gt;v(size,a);<span class="comment">//定义了一个大小为size，存储类型为A，初始值为a的vector（相当于v[size]并且fill了）</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">typename</span> A&gt;v(_v);<span class="comment">//是将_v这个vector复制到v里（A必须统一）</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">typename</span> A&gt;v(begin,end);<span class="comment">//是将_v中的[begin,end)区间复制到v里，注意不是(begin,end]，begin和end都是iterator</span></span><br></pre></td></tr></table></figure>

<p>首先的一个是定义了一个存储类型为A的空vector。</p>
<p><strong>访问方式</strong>是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v[i]</span><br></pre></td></tr></table></figure>

<p>对，就是这样，不是说了就是一个数组么。。。</p>
<p><strong>插值方式</strong>是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.push_back(a);<span class="comment">//向数组末尾插入一个a</span></span><br><span class="line">v.insert(it,a);<span class="comment">//向数组it位置前插入一个a</span></span><br><span class="line">v.insert(it,n,a);<span class="comment">//向数组it位置前插入n个a</span></span><br><span class="line">v.insert(it,begin,end);<span class="comment">//向数组it位置前插入[begin,end)区间的值</span></span><br></pre></td></tr></table></figure>

<p><strong>删值方式</strong>是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.pop_back();<span class="comment">//将数组末尾数删除</span></span><br><span class="line">v.clear();<span class="comment">//将数组清空</span></span><br><span class="line">v.erase(it);<span class="comment">//将数组it位置的数删除</span></span><br><span class="line">v.erase(begin,end);<span class="comment">//将数组[begin,end)区间的数删除</span></span><br></pre></td></tr></table></figure>

<p><strong>遍历方式</strong>是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.at(pos);<span class="comment">//返回pos位置的数</span></span><br><span class="line">v.front();<span class="comment">//返回首位数</span></span><br><span class="line">v.back();<span class="comment">//返回末尾数</span></span><br><span class="line">v.begin();<span class="comment">//返回首位位置</span></span><br><span class="line">v.end();<span class="comment">//返回末尾位置</span></span><br><span class="line">v.rbegin();<span class="comment">//反向迭代器，相当于返回末尾位置</span></span><br><span class="line">v.rend();<span class="comment">//反向迭代器，相当于返回首位位置</span></span><br></pre></td></tr></table></figure>

<p><strong>其他</strong></p>
<p>如何判断一个vector是否为空？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.empty();<span class="comment">//空则返回true，非空则返回false</span></span><br></pre></td></tr></table></figure>

<p>vector的大小？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.size();<span class="comment">//返回已有元素个数</span></span><br><span class="line">v.capacity();<span class="comment">//当前vector的最大元素值</span></span><br><span class="line">v.max_size();<span class="comment">//返回最大容量</span></span><br></pre></td></tr></table></figure>

<p>另：重新分配函数：（Cr.<a href="https://blog.csdn.net/q_l_s/article/details/52946769" target="_blank" rel="noopener">剑西楼</a>）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v.resize(n);</span><br><span class="line">v.resize(n,a);</span><br><span class="line">v.reserve(n);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>resize重新分配大小，改变容器大小，并且创建对象。<br>当n小于当前size()值时候，vector首先会减少size()值 保存前n个元素，然后将超出n的元素删除(remove and destroy)。<br>当n大于当前size()值时候，vector会插入相应数量的元素，使得size()值达到n，并对这些元素进行初始化，如果调用上面的第二个resize函数，指定a，vector会用a来初始化这些新插入的元素。<br>当n大于capacity()值的时候，会自动分配重新分配内存存储空间。</p>
<p>reserver函数用来给vector预分配存储区大小，即capacity的值，但是没有&gt; 给这段内存进行初始化。reserve的参数n是推荐预分配内存的大小，实际分&gt; 配的可能等于或大于这个值，即n大于capacity的值，就会reallocate内存 capacity的值会大于或者等于n。这样，当ector调用push_back函数使得size 超过原来的默认分配的capacity值时 避免了内存重分配开销。<br>需要注意的是：reserve 函数分配出来的内存空间，只是表示vector可以利用这部分内存，但vector不能有效地访问这些内存空间，访问的时候就会出现越界现象，导致程序崩溃。</p>
</blockquote>
<p>vector间支持逻辑运算符（两个vector的A类型必须对应相同）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">!= &lt; &lt;= == &gt; &gt;=</span><br></pre></td></tr></table></figure>

<p>支持函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> swap</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(n,a)</span><span class="comment">//设置vector中第n个元素的值为a</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">assign</span><span class="params">(begin,end)</span><span class="comment">//将vector中[begin,end)中元素设置成当前vector元素</span></span></span><br></pre></td></tr></table></figure>

<p>swap可以交换两个vector（两个vector的A类型必须对应相同），是将两个vector所有数互换。</p>
<p>二维或更多维</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;v(r,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(c,<span class="number">0</span>));</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;v;</span><br><span class="line">v.resize(r);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;r;k++)</span><br><span class="line">    v[k].resize(c);</span><br></pre></td></tr></table></figure>

<p>这便定义了一个r行$\times$c列大小的v数组。</p>
<h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>定义于&lt;stl_list.h&gt;中，需要使用命名空间std。</p>
<p><strong>使用方法</strong>是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">typename</span> A&gt;l;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">typename</span> A&gt;l(size);<span class="comment">//定义了一个大小为size，存储类型为A的list（相当于l[size]）</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">typename</span> A&gt;l(size,a);<span class="comment">//定义了一个大小为size，存储类型为A，初始值为a的list（相当于l[size]并且fill了）</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">typename</span> A&gt;l(_l);<span class="comment">//是将_l这个list复制到l里（A必须统一）</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">typename</span> A&gt;l(begin,end);<span class="comment">//是将_l中的[begin,end)区间复制到l里，注意不是(begin,end]，begin和end都是iterator</span></span><br></pre></td></tr></table></figure>

<p><strong>其他</strong></p>
<p>list间支持逻辑运算符（两个list的A类型必须相同）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">!= &lt; &lt;= == &gt; &gt;=</span><br></pre></td></tr></table></figure>

<p>list的iterator（迭代器）间支持逻辑运算符（两个list的A类型必须相同）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">!= ==</span><br></pre></td></tr></table></figure>

<p>支持函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> swap</span><br></pre></td></tr></table></figure>

<p>swap可以交换两个list（两个list的A类型必须相同），是将两个list互换。</p>
<h4 id="slist"><a href="#slist" class="headerlink" title="slist"></a>slist</h4><h4 id="deque-double-ended-queue"><a href="#deque-double-ended-queue" class="headerlink" title="deque(double-ended queue)"></a>deque(double-ended queue)</h4><h3 id="适配器容器"><a href="#适配器容器" class="headerlink" title="适配器容器"></a>适配器容器</h3><h4 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h4><h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><h4 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h4><h3 id="关联式容器"><a href="#关联式容器" class="headerlink" title="关联式容器"></a>关联式容器</h3><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><h4 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h4><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><h4 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h4><h4 id="hash-set"><a href="#hash-set" class="headerlink" title="hash_set"></a>hash_set</h4><h4 id="hash-multiset"><a href="#hash-multiset" class="headerlink" title="hash_multiset"></a>hash_multiset</h4><h4 id="hash-map"><a href="#hash-map" class="headerlink" title="hash_map"></a>hash_map</h4><h4 id="hash-multimap"><a href="#hash-multimap" class="headerlink" title="hash_multimap"></a>hash_multimap</h4><h3 id="其他类型容器"><a href="#其他类型容器" class="headerlink" title="其他类型容器"></a>其他类型容器</h3><h4 id="bitset"><a href="#bitset" class="headerlink" title="bitset"></a>bitset</h4><h4 id="valarray"><a href="#valarray" class="headerlink" title="valarray"></a>valarray</h4><h2 id="Iterators-迭代器"><a href="#Iterators-迭代器" class="headerlink" title="Iterators|迭代器"></a>Iterators|迭代器</h2><h3 id="utility"><a href="#utility" class="headerlink" title="utility"></a>utility</h3><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator"></a>iterator</h3><h3 id="memory"><a href="#memory" class="headerlink" title="memory"></a>memory</h3><h2 id="Allocator-空间配置器"><a href="#Allocator-空间配置器" class="headerlink" title="Allocator|空间配置器"></a>Allocator|空间配置器</h2><h2 id="Adapters-配接器"><a href="#Adapters-配接器" class="headerlink" title="Adapters|配接器"></a>Adapters|配接器</h2><h2 id="Algorithms-算法"><a href="#Algorithms-算法" class="headerlink" title="Algorithms|算法"></a>Algorithms|算法</h2><h3 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h3><h3 id="numeric"><a href="#numeric" class="headerlink" title="numeric"></a>numeric</h3><h3 id="functional"><a href="#functional" class="headerlink" title="functional"></a>functional</h3><h2 id="Functors-仿函数"><a href="#Functors-仿函数" class="headerlink" title="Functors|仿函数"></a>Functors|仿函数</h2><h1 id="extC-STL-C-扩展STL"><a href="#extC-STL-C-扩展STL" class="headerlink" title="extC++ STL|C++扩展STL"></a>extC++ STL|C++扩展STL</h1><hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>Cena和Lemon下的AC自动机</title>
    <url>/blog/cena-or-lemon-ac-automation/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>C++:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c,id,n,m,l;</span><br><span class="line">    freopen(<span class="string">"**.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"**.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;l);</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(s,<span class="string">"..\\..\\data\\**\\**%d.in"</span>,i);</span><br><span class="line">        freopen(s,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">        <span class="keyword">if</span>(a==n&amp;&amp;b==m&amp;&amp;c==l)</span><br><span class="line">        &#123;</span><br><span class="line">            id=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sprintf</span>(s,<span class="string">"..\\..\\data\\**\\**%d.out"</span>,id);</span><br><span class="line">    freopen(s,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">string</span> ans;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;ans;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Pascal:</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Program</span> Captain; </span><br><span class="line"><span class="keyword">Var</span> a,b,c,id,n,m,l,i:longint;<span class="comment">//搜索到想要的答案</span></span><br><span class="line">s:<span class="keyword">string</span>;<span class="comment">//用来保存打开输出答案的文件名这里写代码片这里写代码片  </span></span><br><span class="line">ans:ansistring;<span class="comment">//读入应该输出的答案</span></span><br><span class="line"><span class="keyword">Begin</span></span><br><span class="line">  Assign(input,<span class="string">'*****.in'</span>); Reset(input);</span><br><span class="line">  Assign(output,<span class="string">'*****.out'</span>);<span class="comment">//星号是题目名，out可以改成ans</span></span><br><span class="line">  Rewrite(output);</span><br><span class="line">  Readln(n,m,l);<span class="comment">//读入3个输出文件的前3个数字，可以酌情改成字符串，或者4个5个 </span></span><br><span class="line">  <span class="keyword">For</span> i:=<span class="number">1</span> <span class="keyword">to</span> <span class="number">10</span> <span class="keyword">do</span> <span class="keyword">begin</span><span class="comment">//1-10测试点，酌情改成0-9或  1-20，考试不知道是0-9还是1-10看人品        </span></span><br><span class="line">    Str(i,s);<span class="comment">//搜索输入数据</span></span><br><span class="line">    Assign(input,<span class="string">'..\\..\\data\\*****\\*****'</span>+s+<span class="string">'.in'</span>);</span><br><span class="line">    Reset(input);<span class="comment">//打开输入数据</span></span><br><span class="line">    Readln(a,b,c);<span class="comment">//开始读入输入数据进行校验    </span></span><br><span class="line">    <span class="keyword">If</span> (a=n)<span class="keyword">and</span>(b=m)<span class="keyword">and</span>(c=l) <span class="keyword">then</span> <span class="keyword">begin</span><span class="comment">//校验成功 </span></span><br><span class="line">      id:=i;<span class="comment">//保存地址      </span></span><br><span class="line">      <span class="keyword">Break</span>;<span class="comment">//跳出循环  </span></span><br><span class="line">    <span class="keyword">End</span>;        </span><br><span class="line">    Close(input);</span><br><span class="line">  <span class="keyword">End</span>; </span><br><span class="line">  Str(id,s);<span class="comment">//找到保存地址所在的输出数据</span></span><br><span class="line">  Assign(input,<span class="string">'..\\..\\data\\*****\\*****'</span>+s+<span class="string">'.out'</span>);</span><br><span class="line">  Reset(input);<span class="comment">//读入输出数据</span></span><br><span class="line">  Readln(ans);</span><br><span class="line">  Writeln(ans);<span class="comment">//复制输出数据并输出，成功得分</span></span><br><span class="line">Close(input);Close(output);<span class="comment">//关闭文件，结束</span></span><br><span class="line"><span class="keyword">End</span>.</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】C++中偷懒利器——宏</title>
    <url>/blog/lgrb-tou-lan-li-qi-hong/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="OI中可以用到的Linux基础教程"><a href="#OI中可以用到的Linux基础教程" class="headerlink" title="OI中可以用到的Linux基础教程"></a>OI中可以用到的Linux基础教程</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://www.luogu.org/blog/two-three-three/tou-lan-li-qi-hong" target="_blank" rel="noopener">洛谷日报#NAN</a>，原作者为木木小胖。</p>
</blockquote>
<hr>
<p>提到C++宏，大多数人想到的就是宏函数和宏常量，如<figure class="highlight plain"><figcaption><span>MAXN 500```和```#define max(a,b) ((a)>(b)?(a):(b))```这种宏应用。</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">其实宏还有很多很多更能发挥它威力的应用。宏的用途可不仅限于```constexpr```。几乎任何有重复代码的地方都能用宏大幅度简化，从而节省工作量。</span><br><span class="line"></span><br><span class="line">在继续学习之前，先了解一下C++的宏机制。</span><br><span class="line"></span><br><span class="line">## C++的宏机制</span><br><span class="line"></span><br><span class="line">![C++编译流程 图片来源于网络，侵权删。](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1534684146526&amp;di=a6171b22cb2f4d3370d965160b7c582f&amp;imgtype=0&amp;src=http%3A%2F%2Ftxt25-2.book118.com%2F2017%2F0905%2Fbook132081%2F132080656.jpg)。</span><br><span class="line"></span><br><span class="line">众所周知，C++的编译流程主要分为预处理、编译、汇编、链接等步骤，其中宏展开在预处理步骤中进行。预处理步骤主要处理预处理指令。（如宏所用的```#define```以及头文件用的```#include```）</span><br><span class="line"></span><br><span class="line">因此，宏在预处理过程中就全部展开，这时候预处理器执行的只是简单的字符串替换。</span><br><span class="line"></span><br><span class="line">具体到每个宏，预处理器若识别出一个符号为宏名，就执行宏展开。对于每一个宏名后面的括号里的内容，预处理器根据且只根据逗号分割参数(但是有一个例外，括号内的逗号不会被当作分割符)，也就是说你能写出这样的宏调用：```bxy(q.push, n, ;)```。</span><br><span class="line"></span><br><span class="line">如果参数中含有宏，编译器不会在传入宏之前进行宏展开。如果展开式中含有宏，编译器会展开它。但是，如果展开式中含有宏调用且参数中含有宏，编译器会先展开参数中的宏。</span><br><span class="line"></span><br><span class="line">上面一段文字太抽象，我就写一个样例示范一下。</span><br><span class="line">```cpp</span><br><span class="line">#define macro(x) (1+mmacro(x)) //由于这里专门讲宏所以就不把宏名全大写了</span><br><span class="line">#define mmacro(x) (2+x)</span><br><span class="line"></span><br><span class="line">#define macroexpand(x) x</span><br><span class="line">#define expand(x) macroexpand(x)</span><br><span class="line"></span><br><span class="line">expand(macro(1)) //macroexpand的参数将是(1+(2+1))</span><br><span class="line">//展开过程如下：</span><br><span class="line">//expand(macro(1))</span><br><span class="line">//macroexpand(macro(1))</span><br><span class="line">//macroexpand((1+mmacro(1)))</span><br><span class="line">//macroexpand((1+(2+1)))</span><br><span class="line">//(1+(2+1))</span><br></pre></td></tr></table></figure></p>
<h2 id="宏中的特殊符号"><a href="#宏中的特殊符号" class="headerlink" title="宏中的特殊符号"></a>宏中的特殊符号</h2><p>这些符号是宏独有的功能，其作用相当于直接沟通神灵。【能改变编译器看到的东西</p>
<h3 id="井号（-）"><a href="#井号（-）" class="headerlink" title="井号（#）"></a>井号（#）</h3><p>单个井号表示将该参数左右加上双引号。</p>
<p>宏被人们所诟病的理由之一就是不能看到宏的展开式进行调试。实际上，只利用我们现在所学的知识，我们是能够看到宏的展开式的。</p>
<p>以下便是一个输出宏展开式的例子</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> macroexpand(x) #x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> expand(x) macroexpand(x)</span></span><br><span class="line"><span class="comment">//expand函数接受一个宏，返回一个字符串，字符串内容即其展开式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> expand_andprint(x) printf(<span class="meta-string">"%s\n"</span>,macroexpand(x))</span></span><br><span class="line"><span class="comment">//expand_andprint函数接受一个宏，将其展开式输出</span></span><br></pre></td></tr></table></figure>

<h3 id="双井号（-）"><a href="#双井号（-）" class="headerlink" title="双井号（##）"></a>双井号（##）</h3><p>双井号表示拼接左右两边的内容生成新的<strong>合法字面常量或标识符</strong></p>
<p>比如说，我们可以用双井号生成标识符（即变量名）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> connect(x,y) x##y</span></span><br><span class="line">expand_andprint(connect(a,b))</span><br><span class="line"><span class="comment">//输出 ab</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connect</span><span class="params">(a,b)</span></span>=<span class="number">3</span>; <span class="comment">//真的能过系列，展开为int ab=3</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,connect(a,b)); <span class="comment">//输出3</span></span><br></pre></td></tr></table></figure>

<p>但是这个看起来十分厉害的功能却没有多少实际应用。因为宏在预处理期就已经展开，宏所能执行的功能只是简单的字符串拼接，于是在大多数情况下，这个功能只是一种语法糖。</p>
<p>双井号还能连接生成数字常量</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> oct(x) 0##x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> hex(y) 0x##y</span></span><br><span class="line"></span><br><span class="line">hex(<span class="number">7f</span>7f7f7f) <span class="comment">//真的能过系列，展开为0x7f7f7f7f</span></span><br></pre></td></tr></table></figure>

<p>这个就更没用了【逃</p>
<h3 id="井号-at号（-）"><a href="#井号-at号（-）" class="headerlink" title="井号-at号（#@）"></a>井号-at号（#@）</h3><p>#@表示将参数加上单引号</p>
<p>与单井号类似，就不多说了</p>
<p>注意，这是微软家编译器（VS）专用的符号，不是语言标准内容，在其他编译器上会报错</p>
<p>如果想用字符，可以使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 应用</span><br><span class="line"></span><br><span class="line">### 例1：switch-case</span><br><span class="line"></span><br><span class="line">原代码：</span><br><span class="line">```cpp</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char c;</span><br><span class="line">    int a,b;</span><br><span class="line">    scanf(&quot;%d%c%d&quot;,&amp;a,&amp;c,&amp;b);</span><br><span class="line">    switch(c)</span><br><span class="line">    &#123;</span><br><span class="line">        case &apos;+&apos;:</span><br><span class="line">            printf(&quot;%d\n&quot;,a+b);</span><br><span class="line">            return 0;</span><br><span class="line">        case &apos;-&apos;:</span><br><span class="line">            printf(&quot;%d\n&quot;,a-b);</span><br><span class="line">            return 0;</span><br><span class="line">        case &apos;*&apos;:</span><br><span class="line">            printf(&quot;%d\n&quot;,a*b);</span><br><span class="line">            return 0;</span><br><span class="line">        case &apos;/&apos;:</span><br><span class="line">            printf(&quot;%d\n&quot;,a/b);</span><br><span class="line">            return 0; </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>加入宏之后</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> charcase(ch,x) case ch: printf(<span class="meta-string">"%d\n"</span>, a x b); return 0;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%c%d"</span>,&amp;a,&amp;c,&amp;b);</span><br><span class="line">    <span class="keyword">switch</span>(c)</span><br><span class="line">    &#123;</span><br><span class="line">        charcase(<span class="string">'+'</span>,+);</span><br><span class="line">        charcase(<span class="string">'-'</span>,-);</span><br><span class="line">        charcase(<span class="string">'*'</span>,*);</span><br><span class="line">        charcase(<span class="string">'/'</span>,/);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="例2：双井号的使用"><a href="#例2：双井号的使用" class="headerlink" title="例2：双井号的使用"></a>例2：双井号的使用</h3><p>在BFS走迷宫的时候，经常遇到同样的代码片段出现两次，一次针对x一次针对y。那么有没有办法只写一次呢</p>
<p>原代码（代码片段）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; xq;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; yq;</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">q.push(xb);</span><br><span class="line">q.push(yb);</span><br></pre></td></tr></table></figure>

<p>加入宏之后（等效代码片段）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> xy(a,sy,b) a x##sy b a y##sy b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> bxy(a,sy,b) a ( x##sy ) b a ( y##sy ) b</span></span><br><span class="line"></span><br><span class="line">xy(<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;, q, ;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">bxy(q.push, b, ;)</span><br></pre></td></tr></table></figure>

<p>宏xy将参数中三部分连接在一起并重复两遍，第一遍中间一个参数前面连接上x，第二遍则连接上y。</p>
<p>宏bxy在中间参数左右加上括号。</p>
<h2 id="拓展：宏和lambda表达式"><a href="#拓展：宏和lambda表达式" class="headerlink" title="拓展：宏和lambda表达式"></a>拓展：宏和lambda表达式</h2><p>观看本节前，建议阅读参考文献中的《编程利器-lambda表达式》。</p>
<p>lambda表达式是闭包的基础，同时也是函数式编程的基础。来个最贴近生活的应用。<del>（来源于《编程利器-lambda表达式》）</del></p>
<p>假设有一道毒瘤题，让你定义一个结构体people，然后先根据age字段排序，然后再根据chengji字段排序，最后根据RP字段排序。使用lambda表达式，我们可以免于写cmp1、cmp2、cmp3，可以写成这样：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//input</span></span><br><span class="line">sort(peoples,peoples+n,[](people a,people b)&#123;<span class="keyword">return</span> a.age&gt;b.age;&#125;);</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">sort(peoples,peoples+n,[](people a,people b)&#123;<span class="keyword">return</span> a.chengji&gt;b.chengji;&#125;);</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">sort(peoples,peoples+n,[](people a,people b)&#123;<span class="keyword">return</span> a.RP&gt;b.RP;&#125;);</span><br><span class="line"><span class="comment">//do something</span></span><br></pre></td></tr></table></figure>

<p>我们发现这三行重复特多，打起来特烦，但是没有多少不同的地方。于是，我们就可以利用宏做到打一遍抵三遍的效果。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> arrsort(arr,len,pre) sort(arr,arr+(len),pre)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stru_op_pre(stru,fie,oper) [](stru a,stru b)&#123;return a.fie oper b.fie;&#125;</span></span><br><span class="line"><span class="comment">//将stru的fie字段按op排序的lambda表达式</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sortp(fie) arrsort(peoples,n,stru_op_pre(people,fie,&gt;))</span></span><br><span class="line"></span><br><span class="line">sortp(age);</span><br><span class="line">sortp(chengji);</span><br><span class="line">sortp(RP);</span><br></pre></td></tr></table></figure>

<h2 id="结论：宏可以和lambda表达式结合起来食用，并且更美味。"><a href="#结论：宏可以和lambda表达式结合起来食用，并且更美味。" class="headerlink" title="结论：宏可以和lambda表达式结合起来食用，并且更美味。"></a>结论：宏可以和lambda表达式结合起来食用，并且更美味。</h2><p>以下是更多相似的宏：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> op_pre(type,oper) [](type a,type b)&#123;return a oper b;&#125;</span></span><br><span class="line"><span class="comment">//返回接受两个类型为type的参数，根据oper排序的lambda函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stru_op_pre(stru,fie,oper) [](stru a,stru b)&#123;return a.fie oper b.fie;&#125;</span></span><br><span class="line"><span class="comment">//返回用stru的fie字段根据oper排序的lambda函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int_op_pre(oper) op_pre(int,oper)</span></span><br><span class="line"><span class="comment">//返回接受两个类型为int的参数，根据oper排序的lambda函数</span></span><br></pre></td></tr></table></figure>

<h2 id="拓展：Lisp中的宏"><a href="#拓展：Lisp中的宏" class="headerlink" title="拓展：Lisp中的宏"></a>拓展：Lisp中的宏</h2><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1534680673556&di=f91835f22e409a077bda599de1eb8614&imgtype=0&src=http%3A%2F%2Fimg1.ph.126.net%2FoqDn20qmITe937LN4heWsQ%3D%3D%2F6597278673866412250.png" alt="Lisp编译流程。图片来源于网络，侵权删。"></p>
<p>C++的宏都是简单的字符串拼接，导致它们只能实现一些很基础的功能。</p>
<p>但是如果C++的宏是C++代码呢？</p>
<p>Lisp的宏就是Lisp在编译时运行的程序，能将表达式变形成Lisp编译器能够接受的形式。</p>
<p>利用宏，我们甚至可以做出内嵌语言，将Lisp改造成一个完全不同的形式。比如，在Lisp里面使用指针，或者使用Brainf**k的语法写程序。</p>
<p>由于Lisp宏的强大一大部分来源于Lisp语法结构（S-expression）的古怪，因此即使是用伪代码，我也很难在C++上将Lisp的宏的强大展示给读者。参考文献中《Lisp的本质》一文对此有通俗易懂的论述，有兴趣的读者可以去看看。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>感谢以下作者辛勤的劳作</p>
<ul>
<li><a href="https://www.cnblogs.com/dongdongweiwu/p/4743709.html" target="_blank" rel="noopener">C++编译过程简介-from 云东</a></li>
<li><a href="http://blog.chinaunix.net/uid-21372424-id-119797.html" target="_blank" rel="noopener">C++宏定义详解-from dongfs_love</a></li>
<li><a href="https://www.luogu.org/blog/64456/bian-cheng-li-qi-lambda-biao-da-shi" target="_blank" rel="noopener">编程利器——lambda表达式-from colazcy</a></li>
<li><a href="https://blog.csdn.net/d603010999/article/details/48155837" target="_blank" rel="noopener">Lisp的本质-from Slava Akhmechet，译者Alec Jang</a></li>
</ul>
<h2 id="版权信息"><a href="#版权信息" class="headerlink" title="版权信息"></a>版权信息</h2><p>本文可任意转载或改编，但须署原作者姓名及原文地址，并且应携带此版权信息。由此改编的文章也应携带此版权信息，以及原文作者姓名及地址。</p>
]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>数据构造与对拍程序</title>
    <url>/blog/data-construction-and-beat-program/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数据构造"><a href="#数据构造" class="headerlink" title="数据构造"></a>数据构造</h1><p>作为一个<del>毒瘤</del>出题人，我们要学着出<del>毒瘤</del>数据<del>卡做题人</del>；作为一个<del>蒟蒻</del>做题人，我们要学着出<del>毒瘤</del>数据尝试<del>卡自己的程序并</del>调试，下面简单介绍出数据的一些方法。</p>
<h2 id="总程序的写法"><a href="#总程序的写法" class="headerlink" title="总程序的写法"></a>总程序的写法</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T=<span class="number">10</span>,L=<span class="number">200</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* problemname=<span class="string">""</span>;<span class="comment">//your problem's name</span></span><br><span class="line"><span class="keyword">char</span> buf[L]=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randomint</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (rand()+rand()*<span class="number">32768</span>)%(r-l+<span class="number">1</span>)+l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_data</span><span class="params">(<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=T;++t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">"start time="</span>&lt;&lt;clock()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">sprintf</span>(buf,<span class="string">"%s%d.in"</span>,problemname,t);</span><br><span class="line">        freopen(buf,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">        </span><br><span class="line">        make_data(t);</span><br><span class="line">        </span><br><span class="line">        fclose(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">"t1="</span>&lt;&lt;clock()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">sprintf</span>(buf,<span class="string">"copy %s%d.in %s.in &gt;nul"</span>,problemname,t,problemname);</span><br><span class="line">        system(buf);</span><br><span class="line">        <span class="built_in">sprintf</span>(buf,<span class="string">"\"%s.exe\""</span>,problemname);</span><br><span class="line">        system(buf);</span><br><span class="line">        <span class="built_in">sprintf</span>(buf,<span class="string">"copy %s.out %s%d.ans &gt;nul"</span>,problemname,problemname,t);</span><br><span class="line">        system(buf);</span><br><span class="line">        <span class="built_in">sprintf</span>(buf,<span class="string">"del %s.in"</span>,problemname);</span><br><span class="line">        system(buf);</span><br><span class="line">        <span class="built_in">sprintf</span>(buf,<span class="string">"del %s.out"</span>,problemname);</span><br><span class="line">        system(buf);</span><br><span class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">"data "</span>&lt;&lt;t&lt;&lt;<span class="string">" has been made."</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cerr</span>&lt;&lt;<span class="string">"end time="</span>&lt;&lt;clock()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面对上面的程序做出详细解释：</p>
<p><strong>请在主程序中写上函数srand，否则会导致每次制造出来的数据都一样！</strong><br>T为你要生成的数据组数，L是操作用字符串buf的长度。<br>problemname即为你题目的名称。<br>buf是操作用字符串。<br>C++中的rand()函数可以随机生成一个$[-2^{15},2^{15})$以内的整数，利用组合我们便可以生成一个。randomint是生成一个int范围（$[-2^{31},2^{31})$）内的整数。如果你需要生成一个long long范围（$[-2^{63},2^{63})$）的整数，你可以使用下面的函数：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">randomlonglong</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (rand()*<span class="number">1l</span>l+rand()*<span class="number">32768l</span>l+rand()*<span class="number">2147483648l</span>l+rand()*<span class="number">140737488355328l</span>l)%(r-l+<span class="number">1l</span>l)+l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>make_data函数是你需要修改的函数，你在这里输出数据，直接使用标准输出即可，如果你需要按数据点生成，可以使用传过来的t，对于一个随机数可以采用randomint函数实现。<br>最后是主函数，这里面写的是操作，你可以在运行程序时看到程序的运行时间，可以简单检验std的时限。</p>
<p>这里讲解三个函数的使用方法：</p>
<ol>
<li>system用途为执行传过来的参数的字符串内容。例如：system(“pause”)执行的结果为DOS命令中执行pause指令的结果，即“请按任意键继续. . . ”；</li>
<li>sprintf用法基本同printf，只不过printf是经过缓存区向标准输出输出内容，而sprintf是向第一参数传过来的字符串中写入内容。</li>
<li>cerr用法同cout，作用是不经过缓存区直接向标准输出输出内容，只会在显示区输出而不会向重定向文件中输出。</li>
</ol>
<p><strong>生成时需要注意要把和题目名称相同的标程cpp（例如program.cpp）放在和datamaker同一个文件夹下，同时要注意标程需要写文件输入输出。</strong></p>
<p>如果在system函数行编译错误，请手动引用&lt;windows.h&gt;库。</p>
<h2 id="简单数据生成"><a href="#简单数据生成" class="headerlink" title="简单数据生成"></a>简单数据生成</h2><h3 id="1-n的随机排列"><a href="#1-n的随机排列" class="headerlink" title="1~n的随机排列"></a>1~n的随机排列</h3><p>方法一：<br>利用STL库中的next_permutation函数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=randomint(<span class="number">1</span>,<span class="number">1e5</span>);</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)a[i]=i;</span><br><span class="line"><span class="keyword">int</span> T=randomint(<span class="number">1</span>,n<span class="comment">/*或者XJB写的一个数，反正要小于n!*/</span>);</span><br><span class="line"><span class="keyword">while</span>(T--)next_permutation(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：写着简单。</li>
<li>缺点：next_permutation返回的其实是一个bool，当数列排序到最后一组排列时便不可再次排列，一般是n比较小的时候会出现。</li>
</ul>
<p>方法二：<br>利用bool数组判断是否出现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=randomint(<span class="number">1</span>,<span class="number">1e5</span>);</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">bool</span> b[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span>(b[l])l++;</span><br><span class="line">    <span class="keyword">while</span>(b[r])r--;</span><br><span class="line">    <span class="keyword">do</span>&#123;x=randomint(l,r);&#125;<span class="keyword">while</span>(b[x]);b[x]=<span class="number">1</span>;</span><br><span class="line">    a[i]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>优点：可以算是完全随机的排列。</li>
<li>缺点：写着没那么简单，刚开始这样写可能不会写l和r，这时就会使程序运行时间在某些时候极长（这时候建议srand(19260817)）。</li>
</ul>
<h3 id="字符（串）生成"><a href="#字符（串）生成" class="headerlink" title="字符（串）生成"></a>字符（串）生成</h3><p><img src="/pic/0-127.jpg" alt="0-127">)<img src="/pic/128-255.jpg" alt="128-255"></p>
<p>正如上表所示，我们要生成字符串的时候需要注意范围（0<del>127，128</del>255实际有问题），并且33~126的值才有实际意义。<br>实际我们写的时候需要写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c=randomint(<span class="number">33</span>,<span class="number">126</span>);</span><br></pre></td></tr></table></figure>

<p>同时，如果你需要一个字符串，可以直接写</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">    s+=(<span class="keyword">char</span>)randomint(<span class="number">33</span>,<span class="number">126</span>);</span><br></pre></td></tr></table></figure>

<h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><h3 id="n个点m条边的图"><a href="#n个点m条边的图" class="headerlink" title="n个点m条边的图"></a>n个点m条边的图</h3><p>方法是每次随机选择两个点，并连接一条边。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=randomint(<span class="number">1</span>,<span class="number">1e5</span>),m=randomint(<span class="number">1</span>,<span class="number">1e5</span>);</span><br><span class="line"><span class="keyword">int</span> bian[<span class="number">100005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">    x=randomint(<span class="number">1</span>,n);</span><br><span class="line">    y=randomint(<span class="number">1</span>,n);</span><br><span class="line">    bian[i][<span class="number">0</span>]=x;</span><br><span class="line">    bian[i][<span class="number">1</span>]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,n,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,bian[i][<span class="number">0</span>],bian[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="无自环？"><a href="#无自环？" class="headerlink" title="无自环？"></a>无自环？</h3><p>只需将</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">y=randomint(<span class="number">1</span>,n);</span><br></pre></td></tr></table></figure>

<p>替换成</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(x==y);</span><br></pre></td></tr></table></figure>

<p>即可。</p>
<h3 id="无重边？"><a href="#无重边？" class="headerlink" title="无重边？"></a>无重边？</h3><p>增加map判重即可，但是要注意你的m限制。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无向无重边</span></span><br><span class="line">    <span class="keyword">int</span> n=randomint(<span class="number">1</span>,<span class="number">1e5</span>),m;</span><br><span class="line">    <span class="keyword">int</span> bian[<span class="number">100005</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt;ma;</span><br><span class="line">    <span class="keyword">do</span>&#123;m=randomint(<span class="number">1</span>,<span class="number">1e5</span>);&#125;<span class="keyword">while</span>(m*<span class="number">2</span>&gt;n*(n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=randomint(<span class="number">1</span>,n);</span><br><span class="line">            <span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(x==y);</span><br><span class="line">        &#125;<span class="keyword">while</span>(ma.count(make_pair(min(x,y),max(x,y))));</span><br><span class="line">        ma.insert(make_pair(make_pair(min(x,y),max(x,y)),i));</span><br><span class="line">        bian[i][<span class="number">0</span>]=x;</span><br><span class="line">        bian[i][<span class="number">1</span>]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,bian[i][<span class="number">0</span>],bian[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//有向无重边</span></span><br><span class="line">    <span class="keyword">int</span> n=randomint(<span class="number">1</span>,<span class="number">1e5</span>),m;</span><br><span class="line">    <span class="keyword">int</span> bian[<span class="number">100005</span>][<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt;ma;</span><br><span class="line">    <span class="keyword">do</span>&#123;m=randomint(<span class="number">1</span>,<span class="number">1e5</span>);&#125;<span class="keyword">while</span>(m&gt;n*(n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            x=randomint(<span class="number">1</span>,n);</span><br><span class="line">            <span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(x==y);</span><br><span class="line">        &#125;<span class="keyword">while</span>(ma.count(make_pair(x,y));</span><br><span class="line">        ma.insert(make_pair(make_pair(x,y),i));</span><br><span class="line">        bian[i][<span class="number">0</span>]=x;</span><br><span class="line">        bian[i][<span class="number">1</span>]=y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,n,m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,bian[i][<span class="number">0</span>],bian[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="一棵树？"><a href="#一棵树？" class="headerlink" title="一棵树？"></a>一棵树？</h3><p>每次选择已经连接的一个节点和没连接的一个节点建边即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=randomint(<span class="number">1</span>,<span class="number">1e5</span>);</span><br><span class="line"><span class="keyword">int</span> bian[<span class="number">100005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> dian[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> x=randomint(<span class="number">1</span>,n),y;</span><br><span class="line"><span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(x==y);</span><br><span class="line">bian[<span class="number">1</span>][<span class="number">0</span>]=x;</span><br><span class="line">bian[<span class="number">1</span>][<span class="number">1</span>]=y;</span><br><span class="line">dian[x]=<span class="number">1</span>;</span><br><span class="line">dian[y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;x=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(!dian[x]);</span><br><span class="line">    <span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(dian[y]);</span><br><span class="line">    bian[i][<span class="number">0</span>]=x;</span><br><span class="line">    bian[i][<span class="number">1</span>]=y;</span><br><span class="line">    dian[x]=<span class="number">1</span>;</span><br><span class="line">    dian[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,bian[i][<span class="number">0</span>],bian[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一条链？"><a href="#一条链？" class="headerlink" title="一条链？"></a>一条链？</h3><p>树的特殊情况，加上每个点访问次数即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=randomint(<span class="number">1</span>,<span class="number">1e5</span>);</span><br><span class="line"><span class="keyword">int</span> bian[<span class="number">100005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> dian[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">int</span> x=randomint(<span class="number">1</span>,n),y;</span><br><span class="line"><span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(x==y);</span><br><span class="line">bian[<span class="number">1</span>][<span class="number">0</span>]=x;</span><br><span class="line">bian[<span class="number">1</span>][<span class="number">1</span>]=y;</span><br><span class="line">dian[x]=<span class="number">1</span>;</span><br><span class="line">dian[y]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;x=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(!dian[x]||dian[x]==<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(dian[y]);</span><br><span class="line">    bian[i][<span class="number">0</span>]=x;</span><br><span class="line">    bian[i][<span class="number">1</span>]=y;</span><br><span class="line">    dian[x]=<span class="number">2</span>;</span><br><span class="line">    dian[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,bian[i][<span class="number">0</span>],bian[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="菊花图？"><a href="#菊花图？" class="headerlink" title="菊花图？"></a>菊花图？</h3><p>树的特殊情况。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=randomint(<span class="number">1</span>,<span class="number">1e5</span>),s=randomint(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">int</span> bian[<span class="number">100005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> dian[<span class="number">100005</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x,y;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    x=s;</span><br><span class="line">    <span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(dian[y]);</span><br><span class="line">    bian[i][<span class="number">0</span>]=x;</span><br><span class="line">    bian[i][<span class="number">1</span>]=y;</span><br><span class="line">    dian[x]=<span class="number">2</span>;</span><br><span class="line">    dian[y]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,bian[i][<span class="number">0</span>],bian[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="蒲公英？"><a href="#蒲公英？" class="headerlink" title="蒲公英？"></a>蒲公英？</h3><p>菊花图+一条链即可。</p>
<h3 id="连通无向图？"><a href="#连通无向图？" class="headerlink" title="连通无向图？"></a>连通无向图？</h3><p>在树的基础上连边即可</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> n=randomint(<span class="number">1</span>,<span class="number">5</span>),m;</span><br><span class="line"><span class="keyword">int</span> bian[<span class="number">100005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">bool</span> dian[<span class="number">100005</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,<span class="keyword">int</span>&gt;ma;</span><br><span class="line"><span class="keyword">do</span>&#123;m=randomint(<span class="number">1</span>,<span class="number">1e5</span>);&#125;<span class="keyword">while</span>(m*<span class="number">2</span>&gt;n*(n<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">int</span> x=randomint(<span class="number">1</span>,n),y;</span><br><span class="line"><span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(x==y);</span><br><span class="line">bian[<span class="number">1</span>][<span class="number">0</span>]=x;</span><br><span class="line">bian[<span class="number">1</span>][<span class="number">1</span>]=y;</span><br><span class="line">dian[x]=<span class="number">1</span>;</span><br><span class="line">dian[y]=<span class="number">1</span>;</span><br><span class="line">ma.insert(make_pair(make_pair(min(x,y),max(x,y)),<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span>&#123;x=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(!dian[x]);</span><br><span class="line">    <span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(dian[y]);</span><br><span class="line">    bian[i][<span class="number">0</span>]=x;</span><br><span class="line">    bian[i][<span class="number">1</span>]=y;</span><br><span class="line">    dian[x]=<span class="number">1</span>;</span><br><span class="line">    dian[y]=<span class="number">1</span>;</span><br><span class="line">    ma.insert(make_pair(make_pair(min(x,y),max(x,y)),i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        x=randomint(<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">do</span>&#123;y=randomint(<span class="number">1</span>,n);&#125;<span class="keyword">while</span>(x==y);</span><br><span class="line">    &#125;<span class="keyword">while</span>(ma.count(make_pair(min(x,y),max(x,y))));</span><br><span class="line">    ma.insert(make_pair(make_pair(min(x,y),max(x,y)),i));</span><br><span class="line">    bian[i][<span class="number">0</span>]=x;</span><br><span class="line">    bian[i][<span class="number">1</span>]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,n,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,bian[i][<span class="number">0</span>],bian[i][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="对拍程序"><a href="#对拍程序" class="headerlink" title="对拍程序"></a>对拍程序</h1><p>在考场上，一般会写一个正确的暴力和自己尝试写的正解，为了校验自己程序的正确性，我们可以利用上面所述的数据构造程序并写一个对拍程序来校验程序的正确性。</p>
<h2 id="使用bat文件校验"><a href="#使用bat文件校验" class="headerlink" title="使用bat文件校验"></a>使用bat文件校验</h2><p>我们知道Windows系统自带的DOS命令可以很方便的帮助我们完成校验任务，我们不妨学着写一个简单的bat文件方便快捷地进行我们的对拍。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:again</span><br><span class="line">data.exe &gt; problemname.in</span><br><span class="line">force.exe &lt; problemname.in &gt; problemname.ans</span><br><span class="line">program.exe &lt; problemname.in &gt; problemname.out</span><br><span class="line">fc problemname.ans problemname.out</span><br><span class="line">if not errorlevel 1 goto again</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<p>下面对上面的bat文件做出详细解释：</p>
<p>@echo off的作用是关闭无关显示，如果没有这行，你会看到一堆提示，这都是毫无必要的信息。<br>:again这里是声明一个again名称的运行节点，使执行命令时能够跳转到这行。<br>下面三行分别是 数据生成器 暴力程序 你的程序 三个<strong>已经编译过</strong>的程序。如果你的程序已经写了文件输入输出，请将这三行替换成下面的三行即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data.exe</span><br><span class="line">force.exe</span><br><span class="line">program.exe</span><br></pre></td></tr></table></figure>

<p>fc是文件比较命令，如果文件比较不出差异会返回0，否则会返回1。<br>if not errorlevel 1 goto again是指如果没有返回1则执行跳转至again运行节点。<br>pause就是暂停程序。</p>
<p>如果我们的程序已经拍出了不同，我们就应该暂停并查看数据进行调试。</p>
<p><strong>需要注意的一点是，对拍的时候，需要把已经编译过的数据生成器、暴力程序、你的程序和对拍bat放到同一个文件夹下。</strong></p>
<h2 id="使用C-写法校验"><a href="#使用C-写法校验" class="headerlink" title="使用C++写法校验"></a>使用C++写法校验</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">"data.exe &gt; problemname.in"</span>);</span><br><span class="line">        system(<span class="string">"force.exe &lt; problemname.in &gt; problemname.ans"</span>);</span><br><span class="line">        system(<span class="string">"program.exe &lt; problemname.in &gt; problemname.out"</span>);</span><br><span class="line">        <span class="keyword">if</span>(system(<span class="string">"fc problemname.ans problemname.out"</span>))<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同bat的写法，其实就是用C++的system函数执行那些命令而已，但是与bat不同的是此处fc命令的返回值会直接给执行该条命令的system函数，所以不用再写if指令。这样的好处是节省了大脑记忆if命令的空间<del>（当然我作为一个修计算机的肯定是会这条指令的）</del>。</p>
<p>另外，同bat写法一样，如果你的程序已经写了文件输入输出，请将这三行替换成下面的三行即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">system(<span class="string">"data.exe"</span>);</span><br><span class="line">system(<span class="string">"force.exe"</span>);</span><br><span class="line">system(<span class="string">"program.exe"</span>);</span><br></pre></td></tr></table></figure>

<p>如果在system函数行编译错误，请手动引用&lt;windows.h&gt;库。</p>
<h2 id="次数的显示"><a href="#次数的显示" class="headerlink" title="次数的显示"></a>次数的显示</h2><h3 id="bat"><a href="#bat" class="headerlink" title="bat"></a>bat</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">set t=0</span><br><span class="line">:again</span><br><span class="line">set /a t+=1</span><br><span class="line">echo times: %t%</span><br><span class="line">data.exe &gt; problemname.in</span><br><span class="line">force.exe &lt; problemname.in &gt; problemname.ans</span><br><span class="line">program.exe &lt; problemname.in &gt; problemname.out</span><br><span class="line">fc problemname.ans problemname.out</span><br><span class="line">if not errorlevel 1 goto again</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"times: %d\n"</span>,t);</span><br><span class="line">        system(<span class="string">"data.exe &gt; problemname.in"</span>);</span><br><span class="line">        system(<span class="string">"force.exe &lt; problemname.in &gt; problemname.ans"</span>);</span><br><span class="line">        system(<span class="string">"program.exe &lt; problemname.in &gt; problemname.out"</span>);</span><br><span class="line">        <span class="keyword">if</span>(system(<span class="string">"fc problemname.ans problemname.out"</span>))<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="时间的显示"><a href="#时间的显示" class="headerlink" title="时间的显示"></a>时间的显示</h2><h3 id="bat-1"><a href="#bat-1" class="headerlink" title="bat"></a>bat</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo off</span><br><span class="line">:again</span><br><span class="line">set t1=%time:~0,2%%time:~3,2%%time:~6,2%</span><br><span class="line">data.exe &gt; problemname.in</span><br><span class="line">set t2=%time:~0,2%%time:~3,2%%time:~6,2%</span><br><span class="line">set /a t3=%t2%-%t1%</span><br><span class="line">echo data	time=%t3% ms</span><br><span class="line">set t1=%time:~0,2%%time:~3,2%%time:~6,2%</span><br><span class="line">force.exe &lt; problemname.in &gt; problemname.ans</span><br><span class="line">set t2=%time:~0,2%%time:~3,2%%time:~6,2%</span><br><span class="line">set /a t3=%t2%-%t1%</span><br><span class="line">echo force	time=%t3% ms</span><br><span class="line">set t1=%time:~0,2%%time:~3,2%%time:~6,2%</span><br><span class="line">program.exe &lt; problemname.in &gt; problemname.out</span><br><span class="line">set t2=%time:~0,2%%time:~3,2%%time:~6,2%</span><br><span class="line">set /a t3=%t2%-%t1%</span><br><span class="line">echo program	time=%t3% ms</span><br><span class="line">fc problemname.ans problemname.out</span><br><span class="line">if not errorlevel 1 goto again</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>

<h3 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> t1=clock(),t2,t3;</span><br><span class="line">        system(<span class="string">"data.exe &gt; problemname.in"</span>);</span><br><span class="line">        t2=clock();</span><br><span class="line">        t3=t2-t1;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"data	time=%u ms\n"</span>,t3);</span><br><span class="line">        t1=clock();</span><br><span class="line">        system(<span class="string">"force.exe &lt; problemname.in &gt; problemname.ans"</span>);</span><br><span class="line">        t2=clock();</span><br><span class="line">        t3=t2-t1;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"force   time=%u ms\n"</span>,t3);</span><br><span class="line">        t1=clock();</span><br><span class="line">        system(<span class="string">"program.exe &lt; problemname.in &gt; problemname.out"</span>);</span><br><span class="line">        t2=clock();</span><br><span class="line">        t3=t2-t1;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"program time=%u ms\n"</span>,t3);</span><br><span class="line">        <span class="keyword">if</span>(system(<span class="string">"fc problemname.ans problemname.out"</span>))<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>文件输入输出时替换模式参照上文。</p>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>一些奇奇怪怪的计算机知识</title>
    <url>/blog/strange-computer-knowledge/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="时间复杂度符号"><a href="#时间复杂度符号" class="headerlink" title="时间复杂度符号"></a>时间复杂度符号</h1><ul>
<li>Θ，读音：theta、西塔；既是上界也是下界(tight)，等于的意思。</li>
<li>Ο，读音：big-oh、欧米可荣（大写）；表示上界(tightness unknown)，小于等于的意思。</li>
<li>ο，读音：small-oh、欧米可荣（小写）；表示上界(not tight)，小于的意思。</li>
<li>Ω，读音：big omega、欧米伽（大写）；表示下界(tightness unknown)，大于等于的意思。</li>
<li>ω，读音：small omega、欧米伽（小写）；表示下界(not tight)，大于的意思。</li>
</ul>
<p>Ο是渐进上界，Ω是渐进下界。Θ需同时满足大Ο和Ω，故称为确界（必须同时符合上界和下界）。Ο极其有用，因为它表示了最差性能。</p>
<h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><ul>
<li>1226563rd prime is 19260803</li>
<li><strong>1226564th prime is 19260817</strong></li>
<li>1226565th prime is 19260823</li>
<li>1240302nd prime is 19490963</li>
<li><strong>1240303rd prime is 19491001</strong></li>
<li>1240304th prime is 19491007</li>
<li>19260802nd prime is 359003321</li>
<li>19260803rd prime is 359003327</li>
<li>19260804th prime is 359003401</li>
<li>19260816th prime is 359003639</li>
<li><strong>19260817th prime is 359003647</strong></li>
<li>19260818th prime is 359003669</li>
<li>19260822nd prime is 359003737</li>
<li>19260823rd prime is 359003747</li>
<li>19260824th prime is 359003753</li>
<li>19490962nd prime is 363541751</li>
<li>19490963rd prime is 363541781</li>
<li>19490964th prime is 363541807</li>
<li>19491000th prime is 363542381</li>
<li><strong>19491001st prime is 363542383</strong></li>
<li>19491002nd prime is 363542411</li>
<li>19491006th prime is 363542461</li>
<li>19491007th prime is 363542477</li>
<li>19491008th prime is 363542503</li>
</ul>
<h1 id="编译错误？"><a href="#编译错误？" class="headerlink" title="编译错误？"></a>编译错误？</h1><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">fatal error: XXX: No such file <span class="literal">or</span> directory <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;XXX&gt;</span></span></span><br><span class="line">^ compilation terminated.</span><br></pre></td></tr></table></figure>

<p>上述的编译错误是指编译器由于没有发现XXX这个库所以终止了编译，这时候需要检查编译终止的库文件名的拼写是否有问题。</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">error: <span class="string">'XXX'</span> was <span class="keyword">not</span> declared <span class="keyword">in</span> this scope XXX<span class="comment">(***)</span>;</span><br><span class="line">^</span><br></pre></td></tr></table></figure>

<p>上述的编译错误是指编译器没有发现你定义的XXX这个函数，这时候需要检查你定义的函数名和使用时的是否一致。</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">error: </span>expected ',' or ';' before 'XXX' XXX</span><br><span class="line">^</span><br></pre></td></tr></table></figure>

<p>上述的编译错误是指编译器在编译XXX和上一条语句是没有发现语句分隔符’,’和’;’，你需要检查上一条语句并添加分隔符。</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">error: </span>'XXX' was not declared in this scope ***</span><br><span class="line">^</span><br></pre></td></tr></table></figure>

<p>上述的编译错误是指编译器在编译<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"> Can&apos;t compile file: AAA.cpp: In function &apos;BBB&apos;:</span><br><span class="line"> AAA.cpp:7:20: error: expected &apos;:&apos; before &apos;;&apos; token</span><br><span class="line"> CCC?DDD;:EEE;</span><br><span class="line"> ^</span><br><span class="line"> AAA.cpp:7:20: error: expected primary-expression before &apos;;&apos; token</span><br><span class="line"> AAA.cpp:7:21: error: expected primary-expression before &apos;:&apos; token</span><br><span class="line"> CCC?DDD;:EEE;</span><br><span class="line"> ^</span><br></pre></td></tr></table></figure></p>
<p>这个错误是我这个大蒟蒻以前犯下的一个错误，这个错误是由于三目运算符的位置中不能有语句分隔符’,’和’;’。</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">error: expected primary-expression before <span class="string">'XXX'</span> scanf<span class="comment">(***)</span>,XXX;</span><br><span class="line">^</span><br></pre></td></tr></table></figure>

<p>这个错误是因为scanf不能使用’,’分隔的关系。</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">error: </span>lvalue required as increment operand i=++j++;</span><br><span class="line">^</span><br></pre></td></tr></table></figure>

<p>这个错误真的是我当时不知道为啥脑子抽掉写的，我也不知道别的运算符使用错误是否会这样提示，但是++只能用在前或后不能同时用。</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">error: </span>expected unqualified-id before ',' token typename AAA,,BBB;</span><br><span class="line">^</span><br></pre></td></tr></table></figure>

<p>这个错误是因为定义类型的时候不能空一个。</p>
<figure class="highlight scilab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">error</span>：conflicting declaration ‘<span class="built_in">typename</span> AAA[***]’ <span class="built_in">typename</span> AAA[***]; ^ note：previous declaration as ‘<span class="built_in">typename</span> AAA’ <span class="built_in">typename</span> AAA;</span><br></pre></td></tr></table></figure>

<p>这个错误的实质是AAA重复定义，然后会产生很多错误信息。</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line">Can<span class="symbol">'t</span> compile <span class="keyword">file</span>: AAA.cpp:<span class="number">3</span>:<span class="number">1</span>: <span class="literal">error</span>: <span class="symbol">'XXX</span>' does <span class="keyword">not</span> name a <span class="keyword">type</span></span><br><span class="line">XXX BBB;</span><br><span class="line">^</span><br></pre></td></tr></table></figure>

<p>这是由于类型定义错误产生的错误。</p>
<figure class="highlight vhdl"><table><tr><td class="code"><pre><span class="line"><span class="literal">error</span>：name lookup <span class="keyword">of</span> <span class="symbol">'i</span>' changed <span class="keyword">for</span> ISO <span class="symbol">'for</span>' scoping [-fpermissive] i ^</span><br><span class="line"><span class="literal">note</span>：<span class="keyword">if</span> you <span class="keyword">use</span> ‘-fpermissive’ G++ will accept your code </span><br><span class="line"><span class="literal">warning</span>：right operand <span class="keyword">of</span> comma operator has no effect [-Wunused-value] i ^</span><br></pre></td></tr></table></figure>

<p>这是由于之前定义的局部变量被重新使用导致的，其本质是未定义。</p>
<p><strong><em>注：由于洛谷第4代评测机已经推出了中文编译信息，因此上帖可能暂时停止更新</em></strong></p>
<h1 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h1><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">cpp：c <span class="keyword">plus</span> <span class="keyword">plus</span> C++</span><br><span class="line">io(或I<span class="regexp">/O)：Input/</span>Output 输入输出</span><br><span class="line">std：standard 标准</span><br><span class="line"><span class="keyword">int</span>：integer 整型（在C++中也可定义为<span class="keyword">long</span>，其实质为<span class="keyword">long</span> <span class="keyword">int</span>）</span><br><span class="line">shrt：<span class="keyword">short</span> 短整型</span><br></pre></td></tr></table></figure>

<h1 id="数字-1"><a href="#数字-1" class="headerlink" title="数字"></a>数字</h1><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">2147483648</span>：<span class="number">2</span>的<span class="number">31</span>次方，其负数是int类型的数据最小值</span><br><span class="line"><span class="number">2147483647</span>：<span class="number">2</span>的<span class="number">31</span>次方减<span class="number">1</span>，是int类型的数据最大值</span><br><span class="line"><span class="number">536870911</span>：int数组下标乘积之和最大值</span><br><span class="line"><span class="number">33554432</span>：<span class="number">128</span>MB空间最大可开的int数</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> isspace(a)<span class="comment">//用于判断字符a是否为分隔符，这包括' '(32)、'\t'(9)、'\n'(10)、'\v'(11)、'\f'(12)和'\r'(13)</span></span><br><span class="line"><span class="keyword">int</span> isprint(a)<span class="comment">//用于判断字符a是否为可打印字符，这包括所有具有占位功能的字符</span></span><br><span class="line"><span class="keyword">int</span> iscntrl(a)<span class="comment">//用于判断字符a是否为控制字符，这除去了上文所述的可打印字符</span></span><br><span class="line"><span class="keyword">int</span> isupper(a)<span class="comment">//用于判断字符a是否为大写字母</span></span><br><span class="line"><span class="keyword">int</span> islower(a)<span class="comment">//用于判断字符a是否为小写字母</span></span><br><span class="line"><span class="keyword">int</span> isalpha(a)<span class="comment">//用于判断字符a是否为字母</span></span><br><span class="line"><span class="keyword">int</span> isdigit(a)<span class="comment">//用于判断字符a是否为数字</span></span><br><span class="line"><span class="keyword">int</span> ispunct(a)<span class="comment">//用于判断字符a是否为标点符号</span></span><br><span class="line"><span class="keyword">int</span> isxdigit(a)<span class="comment">//用于判断字符a是否为十六进制数字，这包括'0'(48)-'9'(57)、'a'(97)-'f'(102)和'A'(65)-'F'(70)</span></span><br><span class="line"><span class="keyword">int</span> isalnum(a)<span class="comment">//用于判断字符a是否为字母或数字</span></span><br><span class="line"><span class="keyword">int</span> isgragh(a)<span class="comment">//用于判断字符a是否为图形表示的字符，这包括上文所说的可打印字符中除去分隔符的部分</span></span><br><span class="line"><span class="comment">/*C++11警告*/</span><span class="keyword">int</span> blank(a)<span class="comment">//用途同isspace</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">toupper</span>(a)<span class="comment">//当字符a是小写字母时,改为大写,其余情况不变</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">tolower</span>(a)<span class="comment">//当字符a是大写字母时,改为小写,其余情况不变</span></span><br></pre></td></tr></table></figure>

<h1 id="这一波优化我看着都怕"><a href="#这一波优化我看着都怕" class="headerlink" title="这一波优化我看着都怕"></a>这一波优化我看着都怕</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fgcse-lm"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fipa-sra"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-pre"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-vrp"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpeephole2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ffast-math"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-spec"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"unroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-labels"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdevirtualize"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcaller-saves"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcrossjumping"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fthread-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fwhole-program"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-tail-merge"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fschedule-insns2"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-aliasing"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fstrict-overflow"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-falign-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-skip-blocks"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fcse-follow-jumps"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fsched-interblock"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fpartial-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"no-stack-protector"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-freorder-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-findirect-inlining"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fhoist-adjacent-loads"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-frerun-cse-after-loop"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-finline-small-functions"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-ftree-switch-conversion"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-foptimize-sibling-calls"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fexpensive-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-funsafe-loop-optimizations"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"inline-functions-called-once"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-fdelete-null-pointer-checks"</span>)</span></span><br></pre></td></tr></table></figure>

<h1 id="101条计算机经典名言（英汉对照版）"><a href="#101条计算机经典名言（英汉对照版）" class="headerlink" title="101条计算机经典名言（英汉对照版）"></a>101条计算机经典名言（英汉对照版）</h1><blockquote>
<p>“People always fear change. People feared electricity when it was invented, didn’t they? People feared coal, they feared gas-powered engines. There will always be ignorance, and ignorance leads to fear. But with time, people will come to accept their silicon masters.”<br>As Bill Gates once warned, computers have indeed become our silicon masters, pervading nearly every aspect of our modern lives. As a result, some of the greatest minds of our time have pondered the significance of computers and software on the human condition. Following are 101 great quotes about computers, with an emphasis on programming, since after all this is a software development site.<br>“人们总是害怕改变。电被发明出来的时候他们害怕电，是不是？他们害怕煤，害怕蒸汽机车。无知无所不在，并导致恐惧。但随着时间推移，人们终究会接受最新的科技。”<br>正如比尔盖茨曾经警告过一样，计算机已经真正成为我们的最新科技，几乎遍布我们日常生活的每一方面。所以，我们这个时代的某些最伟大的头脑开始思索起计算机和软件对于人类的重要性来了。以下就是101条有关计算机的伟大名言，并且，既然我们这个网站是一个软件开发网站，我们尤其关注编程方面的。  </p>
<h2 id="Computers计算机"><a href="#Computers计算机" class="headerlink" title="Computers计算机"></a>Computers计算机</h2><ol>
<li>“Computers are useless. They can only give you answers.”<br>(Pablo Picasso)<br>“计算机没什么用。他们只会告诉你答案。”<br>(巴勃罗·毕加索，画家)  </li>
<li>“Computers are like bikinis. They save people a lot of guesswork.”<br>(Sam Ewing)<br>“计算机就跟比基尼一样，省去了人们许多的胡思乱想。”<br>(萨姆·尤因，作家)  </li>
<li>“They have computers, and they may have other weapons of mass destruction.”<br>(Janet Reno)<br>“他们拥有计算机，他们也还可能拥有其他的大规模杀伤性武器。”<br>(珍内特·雷诺，美国前女司法部长)  </li>
<li>“That’s what’s cool about working with computers. They don’t argue, they remember everything, and they don’t drink all your beer.”<br>(Paul Leary)<br>“跟计算机工作酷就酷在这里，它们不会生气，能记住所有东西，还有，它们不会喝光你的啤酒。”<br>(保罗·利里，吉他手)  </li>
<li>“If the automobile had followed the same development cycle as the computer, a Rolls-Royce would today cost $100, get a million miles per gallon, and explode once a year, killing everyone inside.”<br>(Robert X. Cringely)<br>“如果汽车能赶上计算机的发展周期的话，一辆今天的劳斯莱斯仅值100美元，每加仑要跑100万英里，每年还得爆炸一次，把里面的人杀个精光。”<br>(Robert X. Cringely，技术作家)  </li>
</ol>
<h2 id="Computer-Intelligence计算机智能"><a href="#Computer-Intelligence计算机智能" class="headerlink" title="Computer Intelligence计算机智能"></a>Computer Intelligence计算机智能</h2><ol>
<li>“Computers are getting smarter all the time. Scientists tell us that soon they will be able to talk to us. (And by ‘they’, I mean ‘computers’. I doubt scientists will ever be able to talk to us.)”<br>(Dave Barry)<br>“计算机总是越来越智能的。科学家告诉我们说不久它们就能跟我们对话了。（这里的“它们”，我指的是“计算机”。我怀疑科学家永远都不能跟我们对话。）”<br>(Dave Barry，幽默作家)  </li>
<li>“I’ve noticed lately that the paranoid fear of computers becoming intelligent and taking over the world has almost entirely disappeared from the common culture. Near as I can tell, this coincides with the release of MS-DOS.”<br>(Larry DeLuca)<br>“我最近注意到，在共同文化中，那种对计算机变得智能化并最终掌控世界的妄想恐惧症几乎彻底消失了。据我所知，这跟MS-DOS的发布基本是同步的。”<br>(Larry DeLuca)  </li>
<li>“The question of whether computers can think is like the question of whether submarines can swim.”<br>(Edsger W. Dijkstra)<br>“计算机会不会思考这个问题就像问潜水艇会不会游泳一样。”<br>(Edsger W. Dijkstra，图灵奖获得者)  </li>
<li>“It’s ridiculous to live 100 years and only be able to remember 30 million bytes. You know, less than a compact disc. The human condition is really becoming more obsolete every minute.”<br>(Marvin Minsky)<br>“活了一百年却只能记住30M字节是荒谬的。你知道，这比一张压缩盘还要少。人类境况正在变得日趋退化。”<br>(Marvin Minsky，人工智能研究的奠基人)  </li>
</ol>
<h2 id="Trust信任"><a href="#Trust信任" class="headerlink" title="Trust信任"></a>Trust信任</h2><ol>
<li>“The city’s central computer told you? R2D2, you know better than to trust a strange computer!”<br>(C3PO)<br>“这座城市的中央计算机告诉你的？R2D2，你不该相信一台陌生的计算机！”<br>(C3PO，星球大战中的翻译机器人)  </li>
<li>“Never trust a computer you can’t throw out a window.”<br>(Steve Wozniak)<br>“永远不要相信一台不能扔掉一扇窗户的计算机”<br>(斯蒂夫·沃兹尼亚克，苹果联合创始人)<br>译者：暗指微软的WINDOWS操作系统  </li>
</ol>
<h2 id="Hardware硬件"><a href="#Hardware硬件" class="headerlink" title="Hardware硬件"></a>Hardware硬件</h2><ol>
<li>“Hardware: The parts of a computer system that can be kicked.”<br>(Jeff Pesis)<br>“硬件:计算机系统中可被踢的部分。”<br>(Jeff Pesis)  </li>
</ol>
<h2 id="Software软件"><a href="#Software软件" class="headerlink" title="Software软件"></a>Software软件</h2><ol>
<li>“Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves.”<br>(Alan Kay)<br>“今天大部分的软件都很像上百万块砖堆叠在一起组成的埃及金字塔，缺乏结构完整性，只能靠强力和成千上万的奴隶完成。”<br>(阿伦·凯，图灵奖获得者，面向对象创始人)  </li>
<li>“I’ve finally learned what ‘upward compatible’ means. It means we get to keep all our old mistakes.”<br>(Dennie van Tassel)<br>“我终于明白‘向上兼容性’是怎么回事了。这是指我们得保留所有原有错误。”<br>(Dennie van Tassel)  </li>
</ol>
<h2 id="Operating-Systems操作系统"><a href="#Operating-Systems操作系统" class="headerlink" title="Operating Systems操作系统"></a>Operating Systems操作系统</h2><ol>
<li>“There are two major products that come out of Berkeley: LSD and UNIX. We don’t believe this to be a coincidence.”<br>(Jeremy S. Anderson)<br>“有两样重要产品出自伯克利：LSD和BSD。我们不相信这是个巧合。”<br>(Jeremy S. Anderson)<br>译者：LSD是一种药力至强的迷幻剂，BSD-BSD（Berkeley Software Distribution，伯克利软件套件）是Unix的衍生系统  </li>
<li>“19 Jan 2038 at 3:14:07 AM”<br>(End of the word according to Unix–2^32 seconds after January 1, 1970)<br>“2038年1月19日，凌晨3点14分07秒”<br>(UNIX中的世界末日–1970年1月1号之后的2^32秒)<br>译者：word跟world同音，UNIX用有符号整形数（WORD）表示时间，所以最多只能计时2^31秒，原文的2^32应为错误。  </li>
<li>“Every operating system out there is about equal… We all suck.”<br>(Microsoft senior vice president Brian Valentine describing the state of the art in OS security, 2003)<br>“每个操作系统都差不多… 我们都一样的烂。”<br>(微软的高级副总裁布莱恩·瓦伦蒂尼这样描述操作系统的安全状况，2003)  </li>
<li>“Microsoft has a new version out, Windows XP, which according to everybody is the ‘most reliable Windows ever.’ To me, this is like saying that asparagus is ‘the most articulate vegetable ever.’ ”<br>(Dave Barry)<br>“微软有出了个新版本，Windows XP,据大家说是‘有史以来最稳定的Windows’， 对我而言, 这就好像是在说芦笋是‘有史以来发音最清脆的蔬菜一样’ ”<br>(Dave Barry)  </li>
</ol>
<h2 id="Internet互联网"><a href="#Internet互联网" class="headerlink" title="Internet互联网"></a>Internet互联网</h2><ol>
<li>“The Internet? Is that thing still around?”<br>(Homer Simpson)<br>“互联网？那个东西还在吗？”<br>(Homer Simpson)  </li>
<li>“The Web is like a dominatrix. Everywhere I turn, I see little buttons ordering me to Submit.”<br>(Nytwind)<br>“网络就像是个母夜叉。我每转到一处都会看见小个的按钮命令我提交。”<br>(Nytwind)<br>译者注：Submit：提交，另一层意思是要求屈服  </li>
<li>“Come to think of it, there are already a million monkeys on a million typewriters, and Usenet is nothing like Shakespeare.”<br>(Blair Houghton)<br>“想想看吧，已经有一百万只猴子坐在一百万台打字机旁，可Usenet就是比不上莎士比亚。”<br>(Blair Houghton)  </li>
</ol>
<h2 id="Software-Industry软件产业"><a href="#Software-Industry软件产业" class="headerlink" title="Software Industry软件产业"></a>Software Industry软件产业</h2><ol>
<li>“The most amazing achievement of the computer software industry is its continuing cancellation of the steady and staggering gains made by the computer hardware industry.”<br>(Henry Petroski)<br>“计算机软件产业最为惊人的成就，是其持续不断地放弃硬件产业的惊人成果和稳定性。”<br>(Henry Petroski)  </li>
<li>“True innovation often comes from the small startup who is lean enough to launch a market but lacks the heft to own it.”<br>(Timm Martin)<br>“真正的创新经常来自于那些贴近市场、但无力拥有市场的的小型初创公司。”<br>(Timm Martin)  </li>
<li>“It has been said that the great scientific disciplines are examples of giants standing on the shoulders of other giants. It has also been said that the software industry is an example of midgets standing on the toes of other midgets.”<br>(Alan Cooper)<br>“人们常说，伟大的科学学科就像是站在其它巨人肩膀上的巨人。人们也说过，软件产业正如站在其他侏儒脚上的侏儒。”<br>(Alan Cooper，交互设计之父)  </li>
<li>“It is not about bits, bytes and protocols, but profits, losses and margins.”<br>(Lou Gerstner)<br>“这无关比特、字节和协议，而关乎利润和损益。”<br>(郭士纳，IBM前CEO)  </li>
<li>“We are Microsoft. Resistance Is Futile. You Will Be Assimilated.”<br>(Bumper sticker)<br>“我们是微软。反抗是徒劳的。你会被同化的。”<br>(保险杠贴纸)  </li>
</ol>
<h2 id="Software-Demos软件演示"><a href="#Software-Demos软件演示" class="headerlink" title="Software Demos软件演示"></a>Software Demos软件演示</h2><ol>
<li>“No matter how slick the demo is in rehearsal, when you do it in front of a live audience, the probability of a flawless presentation is inversely proportional to the number of people watching, raised to the power of the amount of money involved.”<br>(Mark Gibbs)<br>“不管演示在彩排的时候有多好，一旦在观众面前展示时，演示不出错的几率与观众人数成反比，与投入的金钱总额成正比。”<br>(Mark Gibbs)  </li>
</ol>
<h2 id="Software-Patents软件专利"><a href="#Software-Patents软件专利" class="headerlink" title="Software Patents软件专利"></a>Software Patents软件专利</h2><ol>
<li>“The bulk of all patents are crap. Spending time reading them is stupid. It’s up to the patent owner to do so, and to enforce them.”<br>(Linus Torvalds)<br>“专利大多数都是垃圾。浪费时间去阅读这些专利是愚蠢的。只有专利持有人才会这么干，还得强迫自己才会看。”<br>(Linus Torvalds，LINUX创始人)  </li>
</ol>
<h2 id="Complexity复杂性"><a href="#Complexity复杂性" class="headerlink" title="Complexity复杂性"></a>Complexity复杂性</h2><ol>
<li>“Controlling complexity is the essence of computer programming.”<br>(Brian Kernigan)<br>“控制复杂性是计算机编程的本质。”<br>(Brian Kernigan)  </li>
<li>“Complexity kills. It sucks the life out of developers, it makes products difficult to plan, build and test, it introduces security challenges, and it causes end-user and administrator frustration.”<br>(Ray Ozzie)<br>“复杂性杀死一切。它把程序员的生活给搞砸了，它令产品难以规划、创建和测试，带来了安全挑战，并导致最终用户和管理员沮丧不已。”<br>(Ray Ozzie)  </li>
<li>“There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies.”<br>(C.A.R. Hoare)<br>“进行软件设计有两种方式。一种是让它尽量简单，让人看不出明显的不足。另一种是弄得尽量复杂，让人看不出明显的缺陷。”<br>(C.A.R. Hoare)  </li>
<li>“The function of good software is to make the complex appear to be simple.”<br>(Grady Booch)<br>“好的软件的作用是让复杂的东西看起来简单。”<br>(Grady Booch，UML创始人之一)  </li>
</ol>
<h2 id="Ease-of-Use易用性"><a href="#Ease-of-Use易用性" class="headerlink" title="Ease of Use易用性"></a>Ease of Use易用性</h2><ol>
<li>“Just remember: you’re not a ‘dummy,’ no matter what those computer books claim. The real dummies are the people who–though technically expert–couldn’t design hardware and software that’s usable by normal consumers if their lives depended upon it.”<br>(Walter Mossberg)<br>“不管那些计算机书籍如何宣称，只需记住，你并非‘傀儡’。真正的傀儡是那些无法设计出易于使用的硬件和软件的那些人，尽管他们是技术专家，因为这是普通消费者赖以生活的东西。”<br>(Walter Mossberg，科技专栏记者)  </li>
<li>“Software suppliers are trying to make their software packages more ‘user-friendly’… Their best approach so far has been to take all the old brochures and stamp the words ‘user-friendly’ on the cover.”<br>(Bill Gates)<br>“软件供应商在努力尝试让他们的软件更‘易于操作’… 迄今为止，他们最好的办法就是翻出所有的老手册，然后在封面盖上‘易于操作’这几个字。”<br>(比尔·盖茨)  </li>
<li>“There’s an old story about the person who wished his computer were as easy to use as his telephone. That wish has come true, since I no longer know how to use my telephone.”<br>(Bjarne Stroustrup)<br>“有个老套的故事说有人希望他的计算机能像他的电话机一样好用。他的愿望实现了，因为我已经不知道该如何使用自己的电话了。”<br>(Bjarne Stroustrup，C++之父)  </li>
</ol>
<h2 id="Users用户"><a href="#Users用户" class="headerlink" title="Users用户"></a>Users用户</h2><ol>
<li>“Any fool can use a computer. Many do.”<br>(Ted Nelson)<br>“任何一个傻瓜都会用电脑。很多都会。”<br>(Ted Nelson)  </li>
<li>“There are only two industries that refer to their customers as ‘users’.”<br>(Edward Tufte)<br>“只有两个行业把客户称为‘用户’。”<br>(Edward Tufte，信息设计大师)<br>译者注：一个是计算机设计，另一个是毒品交易，computer design and drug dealing  </li>
</ol>
<h2 id="Programmers程序员"><a href="#Programmers程序员" class="headerlink" title="Programmers程序员"></a>Programmers程序员</h2><ol>
<li>“Programmers are in a race with the Universe to create bigger and better idiot-proof programs, while the Universe is trying to create bigger and better idiots. So far the Universe is winning.”<br>(Rich Cook)<br>“程序员在跟宇宙赛跑，他们在努力开发出更大更好的傻瓜程序，而宇宙则努力培养出更大更好的白痴。到目前为止，宇宙领先。”<br>(Rich Cook)  </li>
<li>“Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris.”<br>(Larry Wall)<br>“你们当中很多人都知道程序员的美德。当然啦，有三种：那就是懒惰、急躁以及傲慢。”<br>(Larry Wall，Perl发明者)  </li>
<li>“The trouble with programmers is that you can never tell what a programmer is doing until it’s too late.”<br>(Seymour Cray)<br>“程序员的问题是你无法预料他在做什么，直到为时已晚。”<br>(Seymour Cray，超级计算机之父)  </li>
<li>“That’s the thing about people who think they hate computers. What they really hate is lousy programmers.”<br>(Larry Niven)<br>“那就是这些自认为痛恨计算机的人的真实面目。他们实际上真正痛恨的是糟糕的程序员。”<br>(拉瑞·尼文，科幻作家)  </li>
<li>“For a long time it puzzled me how something so expensive, so leading edge, could be so useless. And then it occurred to me that a computer is a stupid machine with the ability to do incredibly smart things, while computer programmers are smart people with the ability to do incredibly stupid things. They are, in short, a perfect match.”<br>(Bill Bryson)<br>“很长时间以来我一直困惑不已，为什么一些又贵又先进的东西会一点用都没有。直到我突然想起，计算机不就是一台愚蠢之至却拥有难以置信的做聪明事能力的机器嘛，而程序员不就是聪明绝顶却拥有难以置信的干蠢事的能力的人嘛。一句话，他们简直就是天生绝配。”<br>(比尔·布莱森，旅游文学作家)  </li>
<li>“Computer science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.”<br>(Eric Raymond)<br>“不像学学涂涂画画也能让某人成为专家级画家，计算机科学教育不会让任何人成为一名编程大师。”<br>(埃里克·雷蒙，开源运动领袖)  </li>
<li>“A programmer is a person who passes as an exacting expert on the basis of being able to turn out, after innumerable punching, an infinite series of incomprehensive answers calculated with micrometric precisions from vague assumptions based on debatable figures taken from inconclusive documents and carried out on instruments of problematical accuracy by persons of dubious reliability and questionable mentality for the avowed purpose of annoying and confounding a hopelessly defenseless department that was unfortunate enough to ask for the information in the first place.”<br>(IEEE Grid newsmagazine)<br>“一个程序员是经历以下事情后仍能证明自己是严格的专家的人：他可以历经数不清的捶打，可取材于无关紧要的文档，用上面的争议数据作出模糊假设，并以此计算出测微精度的无数片面理解的答案,并由一个不可靠、脑袋充满质疑、公开宣称要让一个倒霉透顶、没有指望、毫无防备,要求第一时间获得信息的部门狼狈不堪、令人生厌的人使用一台准确度有问题的仪器去实施。”<br>(IEEE网格新闻杂志)  </li>
<li>“A hacker on a roll may be able to produce–in a period of a few months–something that a small development group (say, 7-8 people) would have a hard time getting together over a year. IBM used to report that certain programmers might be as much as 100 times as productive as other workers, or more.”<br>(Peter Seebach)<br>“运气好的黑客能用几个月的时间 - 生产出一个小规模的开发团体（比如说，7-8人）历尽艰辛一起工作了一年多才能做出来的东西。IBM经常报告说某些程序员的生产力要比其它工人高百倍，甚至更多。”<br>(Peter Seebach，黑客)  </li>
<li>“The best programmers are not marginally better than merely good ones. They are an order-of-magnitude better, measured by whatever standard: conceptual creativity, speed, ingenuity of design, or problem-solving ability.”<br>(Randall E. Stross)<br>“最好的程序员跟好的程序员相比可不止好那么一点点。这种好不是一个数量级的，取决于标准怎么定：概念创造性、速度、设计的独创性或者解决问题的能力。”<br>(兰德尔·E·斯特劳斯，科技作家)  </li>
<li>“A great lathe operator commands several times the wage of an average lathe operator, but a great writer of software code is worth 10,000 times the price of an average software writer.”<br>(Bill Gates)<br>“伟大的车工值得给他几倍于普通车工的薪水，但一个伟大的软件代码作家，其价值则要等同于一个普通的软件写手的价格的1万倍。”<br>(比尔·盖茨)  </li>
</ol>
<h2 id="Programming编程"><a href="#Programming编程" class="headerlink" title="Programming编程"></a>Programming编程</h2><ol>
<li>“Don’t worry if it doesn’t work right. If everything did, you’d be out of a job.”<br>(Mosher’s Law of Software Engineering)<br>“就算它工作不正常也别担心。如果一切正常，你早该失业了。”<br>(Mosher的软件工程定律)  </li>
<li>“Measuring programming progress by lines of code is like measuring aircraft building progress by weight.”<br>(Bill Gates)<br>“靠代码行数来衡量开发进程就好比用重量来衡量飞机制造的进度。”<br>(比尔·盖茨)  </li>
<li>“Writing code has a place in the human hierarchy worth somewhere above grave robbing and beneath managing.”<br>(Gerald Weinberg)<br>“写代码的社会地位比盗墓的高，比管理的低。”<br>(杰拉尔·德温伯格，软件与系统思想家)  </li>
<li>“First learn computer science and all the theory. Next develop a programming style. Then forget all that and just hack.”<br>(George Carrette)<br>“首先学习计算机科学及理论。接着形成自己编程的风格。然后把这一切都忘掉，尽管改程序就是了。”<br>(George Carrette，杰出软件工程师,开源推广者)  </li>
<li>“First, solve the problem. Then, write the code.”<br>(John Johnson)<br>“先解决问题再写代码。”<br>(John Johnson)  </li>
<li>“Optimism is an occupational hazard of programming; feedback is the treatment.”<br>(Kent Beck)<br>“乐观主义是编程行业的职业病；用户反馈则是治疗方法。”<br>(Kent Beck)  </li>
<li>“To iterate is human, to recurse divine.”<br>(L. Peter Deutsch)<br>“迭代者为人，递归者为神。”<br>(L. Peter Deutsch)  </li>
<li>“The best thing about a boolean is even if you are wrong, you are only off by a bit.”<br>(Anonymous)<br>“布尔值最好的一点是，就算你错了，也顶多错了一位而已。”<br>(无名氏)  </li>
<li>“Should array indices start at 0 or 1? My compromise of 0.5 was rejected without, I thought, proper consideration.”<br>(Stan Kelly-Bootle)<br>“数组的下标是从0开始好还是从1开始好呢？我的0.5的折衷方案，以我之见，没有经过适当考虑就被否决掉了。”<br>(Stan Kelly-Bootle)  </li>
</ol>
<h2 id="Programming-Languages编程语言"><a href="#Programming-Languages编程语言" class="headerlink" title="Programming Languages编程语言"></a>Programming Languages编程语言</h2><ol>
<li>“There are only two kinds of programming languages: those people always bitch about and those nobody uses.”<br>(Bjarne Stroustrup)<br>“只有两种编程语言：一种是天天挨骂的，另一种是没人用的。”<br>(Bjarne Stroustrup，C++之父)  </li>
<li>“PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil perpetrated by skilled but perverted professionals.”<br>(Jon Ribbens)<br>“PHP是不合格的业余爱好者创建的，他们犯做了个小恶；Perl是娴熟而堕落的专家创建的，他们犯了阴险狡诈的大恶。”<br>(Jon Ribbens)  </li>
<li>“The use of COBOL cripples the mind; its teaching should therefore be regarded as a criminal offense.”<br>(E.W. Dijkstra)<br>“COBOL的使用摧残大脑；其教育应被视为刑事犯罪。”<br>(E.W. Dijkstra)</li>
<li>“It is practically impossible to teach good programming style to students that have had prior exposure to BASIC. As potential programmers, they are mentally mutilated beyond hope of regeneration.”<br>(E. W. Dijkstra)<br>“把良好的编程风格教给那些之前曾经接触过BASIC的学生几乎是不可能的。作为可能的程序员，他们已精神残废，无重塑的可能了。”<br>(E. W. Dijkstra)  </li>
<li>“I think Microsoft named .Net so it wouldn’t show up in a Unix directory listing.”<br>(Oktal)<br>“我想微软之所以把它叫做.Net，是因为这样它就不会在Unix的目录里显示出来了。”<br>(Oktal)  </li>
<li>“There is no programming language–no matter how structured–that will prevent programmers from making bad programs.”<br>(Larry Flon)<br>“没有一种编程语言能阻止程序员写出糟糕的程序来，不管这种语言结构有多良好。”<br>(Larry Flon)  </li>
<li>“Computer language design is just like a stroll in the park. Jurassic Park, that is.”<br>(Larry Wall)<br>“计算机语言设计犹如在公园里漫步。我是说侏罗纪公园。”<br>(Larry Wall)  </li>
</ol>
<h2 id="C-C"><a href="#C-C" class="headerlink" title="C/C++"></a>C/C++</h2><ol>
<li>“Fifty years of programming language research, and we end up with C++?”<br>(Richard A. O’Keefe)<br>“搞了50年的编程语言的研究，我们难道就以C++告终啦？”<br>(Richard A. O’Keefe)  </li>
<li>“Writing in C or C++ is like running a chain saw with all the safety guards removed.”<br>(Bob Gray)<br>“写C或者C++就像是在用一把卸掉所有安全防护装置的链锯。”<br>(Bob Gray)  </li>
<li>“In C++ it’s harder to shoot yourself in the foot, but when you do, you blow off your whole leg.”<br>(Bjarne Stroustrup)<br>“在C++里你想搬起石头砸自己的脚更为困难了，不过一旦你真的做了，整条腿都要报销。”<br>(Bjarne Stroustrup)  </li>
<li>“C++ : Where friends have access to your private members.”<br>(Gavin Russell Baker)<br>“C++ : 友人可造访你的私有成员之地也。”<br>(Gavin Russell Baker)<br>译者：Friends：C++的友元，是一种定义在类外部的普通函数，但它需要在类体内进行说明，为了与该类的成员函数加以区别，在说明时前面加以关键字friend。友元不是成员函数，但是它可以访问类中的私有成员。友元的作用在于提高程序的运行效率，但是，它破坏了类的封装性和隐藏性，使得非成员函数可以访问类的私有成员。 </li>
<li>“One of the main causes of the fall of the Roman Empire was that–lacking zero–they had no way to indicate successful termination of their C programs.”<br>(Robert Firth)<br>“罗马帝国灭亡的其中一个主要原因是他们没有0 - 这样他们就没法给自己的C程序指明成功退出的路径了。”<br>(Robert Firth)  </li>
</ol>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><ol>
<li>“Java is, in many ways, C++–.”<br>(Michael Feldman)<br>“Java从许多方面来说就是C++–。”<br>(Michael Feldman)  </li>
<li>“Saying that Java is nice because it works on all OSes is like saying that anal sex is nice because it works on all genders.”<br>(Alanna)<br>“说Java好就好在运行于多个操作系统之上，就好像说肛交好就好在不管男女都行。”<br>(Alanna)  </li>
<li>“Fine, Java MIGHT be a good example of what a programming language should be like. But Java applications are good examples of what applications SHOULDN’T be like.”<br>(pixadel)<br>“好吧，Java也许是编程语言的好榜样。但Java应用则是应用程序的坏榜样。”<br>(pixadel)  </li>
<li>“If Java had true garbage collection, most programs would delete themselves upon execution.”<br>(Robert Sewell)<br>“要是Java真的有垃圾回收的话，大部分程序在执行的时候就会把自己干掉了。”<br>(Robert Sewell)<br>##Open Source开源  </li>
<li>“Software is like sex: It’s better when it’s free.”<br>(Linus Torvalds)<br>“软件就像性事：免费/自由更好。”<br>(Linus Torvalds)  </li>
<li>“The only people who have anything to fear from free software are those whose products are worth even less.”<br>(David Emery)<br>“唯一对免费软件感到害怕的人，是自己的产品还要不值钱的人。”<br>(David Emery)  </li>
</ol>
<h2 id="Code代码"><a href="#Code代码" class="headerlink" title="Code代码"></a>Code代码</h2><ol>
<li>“Good code is its own best documentation.”<br>(Steve McConnell)<br>“好代码本身就是最好的文档。”<br>(Steve McConnell)  </li>
<li>“Any code of your own that you haven’t looked at for six or more months might as well have been written by someone else.”<br>(Eagleson’s Law)<br>“你自己的代码如果超过6个月不看，再看的时候也一样像是别人写的。”<br>(伊格尔森定律)  </li>
<li>“The first 90% of the code accounts for the first 90% of the development time. The remaining 10% of the code accounts for the other 90% of the development time.”<br>(Tom Cargill)<br>“前面90%的代码要占用开发时间的前90%。剩下的10%的代码要占用开发时间的另一90%。”<br>(Tom Cargill)  </li>
</ol>
<h2 id="Software-Development软件开发"><a href="#Software-Development软件开发" class="headerlink" title="Software Development软件开发"></a>Software Development软件开发</h2><ol>
<li>“Good programmers use their brains, but good guidelines save us having to think out every case.”<br>(Francis Glassborow)<br>“好的程序员会用脑，但是好的向导救我们于样样都要想到。”<br>(Francis Glassborow)  </li>
<li>“In software, we rarely have meaningful requirements. Even if we do, the only measure of success that matters is whether our solution solves the customer’s shifting idea of what their problem is.”<br>(Jeff Atwood)<br>“在软件里面，我们鲜有有意义的需求。就算有，衡量成功的唯一尺度也取决于我们的解决方案是否解决了客户对问题是什么的观念的转变。”<br>(Jeff Atwood)  </li>
<li>“Considering the current sad state of our computer programs, software development is clearly still a black art, and cannot yet be called an engineering discipline.”<br>(Bill Clinton)<br>“想想我们计算机程序的糟糕现状吧，很显然软件开发仍是黑箱艺术，还不能称之为工程学科。”<br>(Bill Clinton，前美国总统)  </li>
<li>“You can’t have great software without a great team, and most software teams behave like dysfunctional families.”<br>(Jim McCarthy)<br>“没有伟大的团队就没有伟大的软件，可大部分的软件团队举止就像是支离破碎的家庭。”<br>(吉姆·麦卡锡，微软VC++总监)  </li>
</ol>
<h2 id="Debugging调试"><a href="#Debugging调试" class="headerlink" title="Debugging调试"></a>Debugging调试</h2><ol>
<li>“As soon as we started programming, we found to our surprise that it wasn’t as easy to get programs right as we had thought. Debugging had to be discovered. I can remember the exact instant when I realized that a large part of my life from then on was going to be spent in finding mistakes in my own programs.”<br>(Maurice Wilkes discovers debugging, 1949)<br>“一旦我们开始编程，就会惊讶地发现让程序正常没想象中那么简单。调试不可避免。那一刻我认记忆犹新，当时我就意识到，从今往后我生活的大部分时间都要花在寻找自己程序的错误上面了。”<br>(莫里斯·威尔克斯 调试探索, 1949)  </li>
<li>“Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are–by definition–not smart enough to debug it.”<br>(Brian Kernighan)<br>“调试难度本来就是写代码的两倍。因此，如果你写代码的时候聪明用尽，根据定义，你就没有能耐去调试它了。”<br>(Brian Kernighan)  </li>
<li>“If debugging is the process of removing bugs, then programming must be the process of putting them in.”<br>(Edsger W. Dijkstra)<br>“如果调试是除虫的过程，那么编程就一定是把臭虫放进来的过程。”<br>(Edsger W. Dijkstra)  </li>
</ol>
<h2 id="Quality质量"><a href="#Quality质量" class="headerlink" title="Quality质量"></a>Quality质量</h2><ol>
<li>“I don’t care if it works on your machine! We are not shipping your machine!”<br>(Vidiu Platon)<br>“我才不管它能不能在你的机器上运行呢！我们又没装到你的机器上！”<br>(Vidiu Platon，罗马尼亚的微软最佳学生合作伙伴MSP)  </li>
<li>“Programming is like sex: one mistake and you’re providing support for a lifetime.”<br>(Michael Sinz)<br>“编程就像性一样：一时犯错，终生维护。”<br>(Michael Sinz)  </li>
<li>“There are two ways to write error-free programs; only the third one works.”<br>(Alan J. Perlis)<br>“有两种写出无错程序的办法；只有第三种有用。”<br>(Alan J. Perlis)  </li>
<li>“You can either have software quality or you can have pointer arithmetic, but you cannot have both at the same time.”<br>(Bertrand Meyer)<br>“软件质量与指针算法不可兼得。”<br>(Bertrand Meyer)  </li>
<li>“If McDonalds were run like a software company, one out of every hundred Big Macs would give you food poisoning, and the response would be, ‘We’re sorry, here’s a coupon for two more.’ “<br>(Mark Minasi)<br>“如果麦当劳像软件公司那样运作的话，每一百个巨无霸就会有一个令你食物中毒，而他们的回应是，‘真对不起，这是一张额外附送两个的赠券。’ ”<br>(Mark Minasi)  </li>
<li>“Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.”<br>(Martin Golding)<br>“永远要这样写代码，好像最终维护你代码的人是个狂暴的、知道你住在哪里的精神病患者。”<br>(Martin Golding)  </li>
<li>“To err is human, but to really foul things up you need a computer.”<br>(Paul Ehrlich)<br>“是人都会犯错，不过要想把事情彻底搞砸还得请电脑出马。”<br>(Paul Ehrlich)  </li>
<li>“A computer lets you make more mistakes faster than any invention in human history–with the possible exceptions of handguns and tequila.”<br>(Mitch Radcliffe)<br>“计算机比人类历史上的任何发明都更快速地导致你犯更多的错误–可能除了手枪和龙舌兰酒是例外。”<br>(Mitch Radcliffe)  </li>
</ol>
<h2 id="Predictions预测"><a href="#Predictions预测" class="headerlink" title="Predictions预测"></a>Predictions预测</h2><ol>
<li>“Everything that can be invented has been invented.”<br>(Charles H. Duell, Commissioner, U.S. Office of Patents, 1899)<br>“能发明的东西都发明出来了。”<br>(查尔斯·杜埃尔, 美国专利局局长，1899年)  </li>
<li>“I think there’s a world market for about 5 computers.”<br>(Thomas J. Watson, Chairman of the Board, IBM, circa 1948)<br>“我认为全球市场约需5台计算机。”<br>(托马斯·沃森, IBM董事长, 约1948年)  </li>
<li>“It would appear that we have reached the limits of what it is possible to achieve with computer technology, although one should be careful with such statements, as they tend to sound pretty silly in 5 years.”<br>(John Von Neumann, circa 1949)<br>“看上去我们已经到达了利用计算机技术可能获得的极限了，尽管下这样的结论得小心，因为不出五年这听起来就会相当愚蠢。”<br>(约翰·冯·诺伊曼,约1949年)  </li>
<li>“But what is it good for?”<br>(Engineer at the Advanced Computing Systems Division of IBM, commenting on the microchip, 1968)<br>“但这又有什么好处呢？”<br>(IBM先进计算机系统部的工程师对微芯片的评论, 1968年)  </li>
<li>“There is no reason for any individual to have a computer in his home.”<br>(Ken Olson, President, Digital Equipment Corporation, 1977)<br>“我们没有理由让每一个人在家都拥有一台电脑。”<br>(肯·奥尔森,数据设备公司（DEC）总裁，1977年)  </li>
<li>“640K ought to be enough for anybody.”<br>(Bill Gates, 1981)<br>“640K对每一个人来说都已足够。”<br>(比尔·盖茨,1981年)  </li>
<li>“Windows NT addresses 2 Gigabytes of RAM, which is more than any application will ever need.”<br>(Microsoft, on the development of Windows NT, 1992)<br>“Windows NT的RAM寻址空间可达2G，这比任何应用程序所需都要多。”<br>(微软, 谈及Windows NT的开发时所言, 1992年)  </li>
<li>“We will never become a truly paper-less society until the Palm Pilot folks come out with WipeMe 1.0.”<br>(Andy Pierson)<br>“我们永远也无法真正成为无纸化社会，直到掌上电脑一族发布擦我1.0（WipeMe 1.0）为止。”<br>(安迪•皮尔逊，商界领袖)<br>译者注：意思是说难道你大便不用纸吗？</li>
<li>“If it keeps up, man will atrophy all his limbs but the push-button finger.”<br>(Frank Lloyd Wright)<br>“长此以往，除了按键的手指外，人类的肢体将全部退化。”<br>(弗兰克•劳埃德•赖特，建筑师)</li>
</ol>
</blockquote>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>不知道什么东西</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】比STL还STL？——平板电视</title>
    <url>/blog/lgrb-gnu-pbds/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="比STL还STL？——平板电视"><a href="#比STL还STL？——平板电视" class="headerlink" title="比STL还STL？——平板电视"></a>比STL还STL？——平板电视</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://www.luogu.org/blog/Chanis/gnu-pbds" target="_blank" rel="noopener">洛谷日报#39</a>，原作者为Chanis。</p>
</blockquote>
<hr>
<h2 id="gnu-pbds食用教程"><a href="#gnu-pbds食用教程" class="headerlink" title="__gnu_pbds食用教程"></a>__gnu_pbds食用教程</h2><p>●QQ826755370</p>
<h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>某P党：“你们C++的STL库真<del>恶心</del>强大，好多数据结构和算法都不用手打。”</p>
<p>C党1：“STL能省下的代码量又不多，平衡树多难调啊。”</p>
<p>C党2：“欸？__gnu_pbds库就可以做到啊，它封装了hash,tree,trie,priority_queue这四种数据结构。”</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>介绍</p>
<p>什么是__gnu_pbds?Policy based data structures！简称<del>平板电视</del>pbds。在使用pbds前，你需要：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;//用tree</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;//用hash</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/trie_policy.hpp&gt;//用trie</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;//用priority_queue</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br></pre></td></tr></table></figure>

<p>woc，真<del>jb</del>烦，有没有什么简单的方法？当然有：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="comment">//bits/extc++.h与bits/stdc++.h类似，bits/extc++.h是所有拓展库，bits/stdc++.h是所有标准库</span></span><br></pre></td></tr></table></figure>

<p>但是在dev c++里如果这样写，会提示少一个文件，出各种莫名奇妙的锅，其它的IDE请自行尝试，我的linux是deepin的，装了NOI Linux的dalao帮忙测一下。</p>
<p>hash</p>
<p>该引用的头文件和命名空间都讲过了，直接进入正题。</p>
<p>hash_table的用法与map类似，它是这么定义的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">cc_hash_table&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; h;</span><br><span class="line">gp_hash_table&lt;<span class="keyword">int</span>,<span class="keyword">bool</span>&gt; h;</span><br></pre></td></tr></table></figure>

<p>其中cc开头为拉链法，gp开头为探测法，个人实测探测法稍微快一些。</p>
<p>啥？操作？其实就和map差不多，支持[ ]和find。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line">gp_hash_table&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt; h;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">judge</span><span class="params">(<span class="built_in">string</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h.find(s)!=h.end())</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"orz %%%"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"tan90"</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    h[<span class="string">"Ican'tAKIOI"</span>]=<span class="number">1</span>;</span><br><span class="line">    h.insert(make_pair(<span class="string">"UAKIOI"</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;str)</span><br><span class="line">        judge(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.luogu.org/upload/pic/27115.png" alt="运行图"></p>
<p>等一等？和map一样，那不如直接用map了。不不不，map的总时间复杂度是O(nlogn)O(nlogn)的，而hash_table的总时间复杂度仅为O(n)O(n)！所以我们可以用这个特性来做<a href="https://www.luogu.org/problemnew/show/P1333" target="_blank" rel="noopener">洛谷P1333 瑞瑞的木棍</a>。前置知识：<a href="https://www.luogu.org/blog/41785/jian-yi-bing-zha-ji" target="_blank" rel="noopener">并查集</a> <a href="https://www.luogu.org/blog/lzhbigbird/zong-qi-qiao-wen-ti-dao-ou-la-lu" target="_blank" rel="noopener">欧拉路</a>。</p>
<p>感谢<a href="https://www.luogu.org/space/show?uid=7035" target="_blank" rel="noopener">Great_Influence</a>的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/hash_policy.hpp&gt;//pb_ds库</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,a,b) for(i=(a);i&lt;=(b);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Forward(i,a,b) for(i=(a);i&gt;=(b);--i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;<span class="comment">//命名空间</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    T s=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> k=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(k)&amp;&amp;k^<span class="string">'-'</span>)k=getchar();</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">isdigit</span>(k))&#123;f=<span class="number">-1</span>;k=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(k))&#123;s=s*<span class="number">10</span>+(k^<span class="number">48</span>);k=getchar();&#125;</span><br><span class="line">    x=s*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">file</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"P1333.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"P1333.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">250050</span>;</span><br><span class="line"><span class="keyword">char</span> l[<span class="number">15</span>],r[<span class="number">15</span>];</span><br><span class="line"><span class="keyword">int</span> e,f[MAXN];</span><br><span class="line"><span class="keyword">bool</span> in[MAXN];</span><br><span class="line">gp_hash_table&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;G;<span class="comment">//hash_table定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t=f[x],d;<span class="keyword">while</span>(t!=f[t])t=f[t];</span><br><span class="line">    <span class="keyword">while</span>(f[x]!=t)&#123;d=f[x];f[x]=t;x=d;&#125;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,l,r)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!G[l])G[l]=++e,f[e]=e;</span><br><span class="line">        <span class="keyword">if</span>(!G[r])G[r]=++e,f[e]=e;</span><br><span class="line">        <span class="keyword">if</span>(e&gt;<span class="number">250010</span>)<span class="comment">//如果点数超过n+1的话，一定不存在通路，直接返回。</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        in[G[l]]^=<span class="number">1</span>;<span class="comment">//修改奇偶情况</span></span><br><span class="line">        in[G[r]]^=<span class="number">1</span>;</span><br><span class="line">        f[find(G[l])]=find(G[r]);<span class="comment">//合并并查集</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    For(i,<span class="number">1</span>,e)<span class="keyword">if</span>(in[i])<span class="comment">//判断奇点个数是否超过2</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ++flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> father=find(<span class="number">1</span>);</span><br><span class="line">    For(i,<span class="number">2</span>,e)<span class="keyword">if</span>(find(i)^father)<span class="comment">//判断是否连通</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Impossible\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Possible\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    file();</span><br><span class="line">    work();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>tree</p>
<p>pbds里面的tree都是平衡树，其中有rb_tree,splay_tree,ov_tree（后两种都容易超时，所以请不要用它们）。需要的头文件与命名空间也讲了，下面我们来看它的食用方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pii pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp(x,y) make_pair(x,y) </span></span><br><span class="line">tree&lt;pii,null_type,less&lt;pii&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; tr;</span><br><span class="line">pii <span class="comment">//存储的类型</span></span><br><span class="line">null_type <span class="comment">//无映射(低版本g++为null_mapped_type)</span></span><br><span class="line">less&lt;pii&gt; <span class="comment">//从小到大排序</span></span><br><span class="line">rb_tree_tag <span class="comment">//红黑树</span></span><br><span class="line">tree_order_statistics_node_update <span class="comment">//更新方式 </span></span><br><span class="line">tr.insert(mp(x,y)); <span class="comment">//插入;</span></span><br><span class="line">tr.erase(mp(x,y)); <span class="comment">//删除;</span></span><br><span class="line">tr.order_of_key(pii(x,y)); <span class="comment">//求排名 </span></span><br><span class="line">tr.find_by_order(x); <span class="comment">//找k小值，返回迭代器 </span></span><br><span class="line">tr.join(b); <span class="comment">//将b并入tr，前提是两棵树类型一样且没有重复元素 </span></span><br><span class="line">tr.split(v,b); <span class="comment">//分裂，key小于等于v的元素属于tr，其余的属于b</span></span><br><span class="line">tr.lower_bound(x); <span class="comment">//返回第一个大于等于x的元素的迭代器</span></span><br><span class="line">tr.upper_bound(x); <span class="comment">//返回第一个大于x的元素的迭代器</span></span><br><span class="line"><span class="comment">//以上所有操作的时间复杂度均为O(logn)</span></span><br></pre></td></tr></table></figure>

<p>下面我们来试一试<a href="https://www.luogu.org/problemnew/show/P3369" target="_blank" rel="noopener">洛谷P3369 普通平衡树</a>（感谢<a href="https://www.cnblogs.com/shenben/p/6243846.html" target="_blank" rel="noopener">shenben的代码</a>）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//by shenben</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">tree&lt;ll,null_type,less&lt;ll&gt;,rb_tree_tag,tree_order_statistics_node_update&gt; bbt;</span><br><span class="line"><span class="keyword">int</span> n;ll k,ans;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=read();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt;i&lt;=n;i++)&#123;</span><br><span class="line">        opt=read();k=read();</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>) bbt.insert((k&lt;&lt;<span class="number">20</span>)+i);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>) bbt.erase(bbt.lower_bound(k&lt;&lt;<span class="number">20</span>));</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,bbt.order_of_key(k&lt;&lt;<span class="number">20</span>)+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">4</span>) ans=*bbt.find_by_order(k<span class="number">-1</span>),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans&gt;&gt;<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">5</span>) ans=*--bbt.lower_bound(k&lt;&lt;<span class="number">20</span>),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans&gt;&gt;<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">6</span>) ans=*bbt.upper_bound((k&lt;&lt;<span class="number">20</span>)+n),<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans&gt;&gt;<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="前方高能！前方高能！前方高能！"><a href="#前方高能！前方高能！前方高能！" class="headerlink" title="前方高能！前方高能！前方高能！"></a>前方高能！前方高能！前方高能！</h3><p>在看这里之前，你需要熟练地掌握c++的特性。如果看不懂我也没有办法，你可以跳过这一部分。</p>
<p>你以为pbds种的tree只能实现这些功能？不不不，你可以自定义它，我们需要写一个自己的node_update，它是长这样的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Node_CItr</span>,<span class="title">class</span> <span class="title">Node_Itr</span>,<span class="title">class</span> <span class="title">Cmp_Fn</span>,<span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">my_node_update</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> my_type metadata_type;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Node_Itr it, Node_CItr end_it)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们先解释一下这个类是如何工作的。节点更新的tree都会保存一个my_type类型的变量。当我们修改这棵树的时候，会从叶子节点开始修改，并且每次都会调用operator()，我们来看一下这个函数的两个参数：</p>
<p>Node_Itr it为调用该函数的元素的迭代器，Node_CItr end_it可以const到叶子节点的迭代器，Node_Itr有以下的操作：</p>
<ol>
<li><p>get_l_child()，返回其左孩子的迭代器，没有则返回node_end；</p>
</li>
<li><p>get_r_child()，同get_l_child()；</p>
</li>
<li><p>get_metadata()，返回其在树中维护的数据；</p>
</li>
<li><p>**it可以获取it的信息。</p>
</li>
</ol>
<p>为了详细讲解，我们举一个更新子树大小的例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Node_Itr it, Node_CItr end_it)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node_Itr l=it.get_l_child();</span><br><span class="line">    Node_Itr r=it.get_r_child();</span><br><span class="line">    <span class="keyword">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l!=end_it) left=l.get_metadata();</span><br><span class="line">    <span class="keyword">if</span>(r!=end_it) right=r.get_metadata();</span><br><span class="line">    <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>&amp;&gt;(it.get_metadata())=left+right+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在我们学会了更新，那么我们该如何自己写操作呢？node_update所有public方法都会在树中公开。如果我们在node_update中将它们声明为virtual，则可以访问基类中的所有virtual。所以，我们在类里添加以下内容：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> Node_CItr <span class="title">node_begin</span><span class="params">()</span> <span class="keyword">const</span></span>=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Node_CItr <span class="title">node_end</span><span class="params">()</span> <span class="keyword">const</span></span>=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p>这样我们就能直接访问树了，还有，node_begin指向树根，node_end指向最后一个叶子节点的后一个地址，下面这个就是查排名的操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myrank</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    Node_CItr it=node_begin();</span><br><span class="line">    <span class="keyword">while</span>(it!=node_end())</span><br><span class="line">    &#123;</span><br><span class="line">        Node_CItr l=it.get_l_child();</span><br><span class="line">        Node_CItr r=it.get_r_child();</span><br><span class="line">        <span class="keyword">if</span>(Cmp_Fn()(x,**it))</span><br><span class="line">            it=l;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            <span class="keyword">if</span>(l!=node_end()) ans+=l.get_metadata();</span><br><span class="line">            it=r;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面我们来看<a href="https://www.luogu.org/problemnew/show/CF459D" target="_blank" rel="noopener">CF459D</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/tree_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">Node_CItr</span>,<span class="title">class</span> <span class="title">Node_Itr</span>,<span class="title">class</span> <span class="title">Cmp_Fn</span>,<span class="title">class</span> _<span class="title">Alloc</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">my_node_update</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span> metadata_type;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">order_of_key</span><span class="params">(pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        Node_CItr it=node_begin();</span><br><span class="line">        <span class="keyword">while</span>(it!=node_end())</span><br><span class="line">        &#123;</span><br><span class="line">            Node_CItr l=it.get_l_child();</span><br><span class="line">            Node_CItr r=it.get_r_child();</span><br><span class="line">            <span class="keyword">if</span>(Cmp_Fn()(x,**it))</span><br><span class="line">                it=l;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">if</span>(l!=node_end()) ans+=l.get_metadata();</span><br><span class="line">                it=r;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Node_Itr it, Node_CItr end_it)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Node_Itr l=it.get_l_child();</span><br><span class="line">        Node_Itr r=it.get_r_child();</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l!=end_it) left =l.get_metadata();</span><br><span class="line">        <span class="keyword">if</span>(r!=end_it) right=r.get_metadata();</span><br><span class="line">        <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span>&amp;&gt;(it.get_metadata())=left+right+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Node_CItr <span class="title">node_begin</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Node_CItr <span class="title">node_end</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line">tree&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,null_type,less&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;,rb_tree_tag,my_node_update&gt; me;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; cnt[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pre(n),suf(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i]=cnt[<span class="number">0</span>][a[i]]++;</span><br><span class="line">        suf[n-i<span class="number">-1</span>]=cnt[<span class="number">1</span>][a[n-i<span class="number">-1</span>]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        me.insert(&#123;pre[i<span class="number">-1</span>],i<span class="number">-1</span>&#125;);</span><br><span class="line">        ans+=i-me.order_of_key(&#123;suf[i],i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>trie</p>
<p>trie即为字典树，我们先看如何定义一个trie与它的操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> trie&lt;<span class="built_in">string</span>,null_type,trie_string_access_traits&lt;&gt;,pat_trie_tag,trie_prefix_search_node_update&gt; tr;</span><br><span class="line"><span class="comment">//第一个参数必须为字符串类型，tag也有别的tag，但pat最快，与tree相同，node_update支持自定义</span></span><br><span class="line">tr.insert(s); <span class="comment">//插入s </span></span><br><span class="line">tr.erase(s); <span class="comment">//删除s </span></span><br><span class="line">tr.join(b); <span class="comment">//将b并入tr </span></span><br><span class="line">pair<span class="comment">//pair的使用如下：</span></span><br><span class="line">pair&lt;tr::iterator,tr::iterator&gt; range=base.prefix_range(x);</span><br><span class="line"><span class="keyword">for</span>(tr::iterator it=range.first;it!=range.second;it++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">' '</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//pair中第一个是起始迭代器，第二个是终止迭代器，遍历过去就可以找到所有字符串了。</span></span><br></pre></td></tr></table></figure>

<p>现在我们来看<a href="http://acm.timus.ru/problem.aspx?space=1&num=1414" target="_blank" rel="noopener">Astronomical Database</a>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/assoc_container.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/trie_policy.hpp&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> __gnu_pbds; </span><br><span class="line"><span class="keyword">typedef</span> trie&lt;<span class="built_in">string</span>,null_type,trie_string_access_traits&lt;&gt;,pat_trie_tag,trie_prefix_search_node_update&gt;pref_trie;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pref_trie base;</span><br><span class="line">    base.insert(<span class="string">"sun"</span>);</span><br><span class="line">    <span class="built_in">string</span> x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(x[<span class="number">0</span>]==<span class="string">'?'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;x.substr(<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">auto</span> range=base.prefix_range(x.substr(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> it=range.first;t&lt;<span class="number">20</span> &amp;&amp; it!=range.second;it++,t++)</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"  "</span>&lt;&lt;*it&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            base.insert(x.substr(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>priority_queue</p>
<p>priority_queue为优先队列，用堆实现，priority_queue的定义与操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">int</span>,greater&lt;<span class="keyword">int</span>&gt;,TAG&gt; Q;<span class="comment">//小根堆，大根堆写less&lt;int&gt;</span></span><br><span class="line"><span class="comment">/*其中的TAG为类型，有以下几种：</span></span><br><span class="line"><span class="comment">pairing_heap_tag</span></span><br><span class="line"><span class="comment">thin_heap_tag</span></span><br><span class="line"><span class="comment">binomial_heap_tag</span></span><br><span class="line"><span class="comment">rc_binomial_heap_tag </span></span><br><span class="line"><span class="comment">binary_heap_tag</span></span><br><span class="line"><span class="comment">其中pairing_help_tag最快*/</span></span><br><span class="line">Q.push(x);</span><br><span class="line">Q.pop();</span><br><span class="line">Q.top();</span><br><span class="line">Q.join(b);</span><br><span class="line">Q.empty();</span><br><span class="line">Q.size(); </span><br><span class="line">Q.modify(it,<span class="number">6</span>);</span><br><span class="line">Q.erase(it);</span><br><span class="line"><span class="comment">//以上操作我都不讲了，pbds里的优先队列还可以用迭代器遍历</span></span><br></pre></td></tr></table></figure>

<p>时间复杂度：</p>
<p><img src="https://cdn.luogu.org/upload/pic/27149.png" alt="时间复杂度"></p>
<p><a href="https://www.luogu.org/problemnew/show/P4779" target="_blank" rel="noopener">堆优化dijkstra</a>（感谢<a href="https://www.luogu.org/space/show?uid=7035" target="_blank" rel="noopener">Great_Influence</a>的代码）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ext/pb_ds/priority_queue.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Rep(i,a,b) for(register int i=(a),i##end=(b);i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Repe(i,a,b) for(register int i=(a),i##end=(b);i&gt;=i##end;--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> For(i,a,b) for(i=(a),i&lt;=(b);++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Forward(i,a,b) for(i=(a),i&gt;=(b);--i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Chkmax(a,b) a=a&gt;b?a:b</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span>(c=getchar();!<span class="built_in">isdigit</span>(c);c=getchar())<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;<span class="built_in">isdigit</span>(c);c=getchar())x=x*<span class="number">10</span>+(c^<span class="number">48</span>);</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x)&#123;<span class="built_in">putchar</span>(<span class="number">48</span>);<span class="built_in">putchar</span>(<span class="string">'\n'</span>);<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sta[<span class="number">45</span>],tp;</span><br><span class="line">    <span class="keyword">for</span>(tp=<span class="number">0</span>;x;x/=<span class="number">10</span>)sta[++tp]=x%<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(;tp;<span class="built_in">putchar</span>(sta[tp--]^<span class="number">48</span>));</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">file</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> ONLINE_JUDGE</span></span><br><span class="line">    freopen(<span class="string">"water.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"water.out"</span>,<span class="string">"w"</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">7</span>,MAXM=<span class="number">4e5</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">edg</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w,h;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(edg a,edg b)&#123;<span class="keyword">return</span> a.h&gt;b.h;&#125;</span><br><span class="line">&#125;EDG[MAXM];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w,nxt;</span><br><span class="line">&#125;P[MAXM&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> head[MAXN],e;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;P[++e]=(edge)&#123;v,w,head[u]&#125;;head[u]=e;&#125;</span><br><span class="line"></span><br><span class="line">__gnu_pbds::priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &gt;G;</span><br><span class="line"></span><br><span class="line">__gnu_pbds::priority_queue&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;,greater&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &gt;::point_iterator its[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">2e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dijkst</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    G.clear();</span><br><span class="line">    its[s]=G.push(make_pair(<span class="number">0</span>,s));dis[s]=<span class="number">0</span>;</span><br><span class="line">    Rep(i,<span class="number">2</span>,n)dis[i]=INF,its[i]=G.push(make_pair(INF,i));</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">while</span>(!G.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        u=G.top().second;G.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> v=head[u];v;v=P[v].nxt)</span><br><span class="line">            <span class="keyword">if</span>(dis[P[v].v]&gt;dis[u]+P[v].w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[P[v].v]=dis[u]+P[v].w;</span><br><span class="line">                G.modify(its[P[v].v],make_pair(dis[u]+P[v].w,P[v].v));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    read(n);read(m);read(s);</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> u,v,w;</span><br><span class="line">    Rep(i,<span class="number">1</span>,m)read(u),read(v),read(w),add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dijkst(s);</span><br><span class="line">    Rep(i,<span class="number">1</span>,n)<span class="built_in">printf</span>(<span class="string">"%d "</span>,dis[i]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    file();</span><br><span class="line">    init();</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于rope</p>
<p>sorry，rope属于<strong>gnu_cxx，不属于</strong>gnu_pbds。下次讲ext中其他的内容时，我会讲rope。</p>
<p>最后</p>
<h2 id="NOIP中可以使用pbds"><a href="#NOIP中可以使用pbds" class="headerlink" title="NOIP中可以使用pbds!"></a>NOIP中可以使用pbds!</h2><h2 id="完结撒花！★-°-☆-￣▽￣-°★-。"><a href="#完结撒花！★-°-☆-￣▽￣-°★-。" class="headerlink" title="完结撒花！★,°:.☆(￣▽￣)/$:.°★ 。"></a>完结撒花！★,°:.☆(￣▽￣)/$:.°★ 。</h2>]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】C++ 迭代器，了解一下？</title>
    <url>/blog/lgrb-cpp-iterator/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="C-迭代器，了解一下？"><a href="#C-迭代器，了解一下？" class="headerlink" title="C++ 迭代器，了解一下？"></a>C++ 迭代器，了解一下？</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://poi.blog.luogu.org/cpp-iterator" target="_blank" rel="noopener">洛谷日报#34</a>，原作者为Xeonacid。</p>
</blockquote>
<hr>
<p>由于作者是个C++鶸，如果本文有任何错误，烦请不吝指出。（有的地方已知描述是不完整的，但是与指针行为一致，或鉴于多数看这篇文章的都是算法竞赛选手，抑或考虑实际，刻意忽略掉辣）</p>
<h2 id="迭代器是个啥？"><a href="#迭代器是个啥？" class="headerlink" title="迭代器是个啥？"></a>迭代器是个啥？</h2><p>迭代器(Iterator)：一种“能够迭代某序列内所有元素”的对象</p>
<p><img src="https://i.loli.net/2018/08/11/5b6ea9ab74ecb.jpg" alt=""></p>
<p>指针都知道吧？不知道的先出门左转了解一下</p>
<p>迭代器：指针的抽象，指针是迭代器的子集</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="迭代器能干啥？"><a href="#迭代器能干啥？" class="headerlink" title="迭代器能干啥？"></a>迭代器能干啥？</h2><p>所有迭代器都能做的操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * suppose:</span></span><br><span class="line"><span class="comment">    * T t;</span></span><br><span class="line"><span class="comment">    * container&lt;T&gt; v1&#123;t&#125;, v2;</span></span><br><span class="line"><span class="comment">    * container&lt;T&gt;::iterator</span></span><br><span class="line"><span class="comment">    * container&lt;T&gt;::begin()</span></span><br><span class="line"><span class="comment">    * container&lt;T&gt;::end()</span></span><br><span class="line"><span class="comment">    * have been defined here</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    container&lt;T&gt;::iterator ita = v1.begin(), itb = v2.begin();</span><br><span class="line">    *ita;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">    swap(ita, itb);</span><br><span class="line">    ++ita;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>emmmm…这些跟指针没什么差别对吧。</p>
<p><img src="http://img.uoj.ac/utility/bear-thinking.gif" alt="思考熊">真的没差别吗？</p>
<p>其实是有的…</p>
<p>指针不可能随便解引用或者交换一下，甚至你什么都没做，就非法化了对吧。但是就“迭代器”本身，不加任何限制的情况下，其只是一个可以做上述操作的类而已啦，随时有可能被非法化。</p>
<figure class="highlight plain"><figcaption><span>三去~~法，意味着在这里你可能什么也做不了2333333</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@[捂脸熊](http://img.uoj.ac/utility/bear-facepalm.jpg)那我~~咬着~~要这迭代器有何用？</span><br><span class="line"></span><br><span class="line">别急别急，迭代器还是有几个定义好的分类的，标准库内的迭代器何时会非法化也有严格限制。</span><br><span class="line"></span><br><span class="line">在说这个之前，先提一嘴迭代器的一个辅助类型```std::iterator_traits```，其一般化定义是长这个样子滴：</span><br><span class="line">```cpp</span><br><span class="line">template&lt; class Iterator &gt;</span><br><span class="line">struct iterator_traits &#123;</span><br><span class="line">    typedef typename Iterator::difference_type difference_type;</span><br><span class="line">    typedef typename Iterator::value_type value_type;</span><br><span class="line">    typedef typename Iterator::pointer pointer;</span><br><span class="line">    typedef typename Iterator::reference reference;</span><br><span class="line">    typedef typename Iterator::iterator_category iterator_category;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>很简单对吧，直接从迭代器类型本身拿来了这几个成员，标准库提供了对于指针的特化，毕竟指针没有这些成员。</p>
<p>只有使<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">什么？你问我这五个鬼东西干啥用的？~~把他们翻译成中文就好了~~ ←真的如此，STL的命名还是挺清楚的哇</span><br><span class="line"></span><br><span class="line">其中标准库自带了五个用于```iterator_category```的空类型，分别对应下方的前五种迭代器：</span><br><span class="line">```cpp</span><br><span class="line">struct output_iterator_tag &#123; &#125;;</span><br><span class="line">struct input_iterator_tag &#123; &#125;;</span><br><span class="line">struct forward_iterator_tag : public input_iterator_tag &#123; &#125;;</span><br><span class="line">struct bidirectional_iterator_tag : public forward_iterator_tag &#123; &#125;;</span><br><span class="line">struct random_access_iterator_tag : public bidirectional_iterator_tag &#123; &#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="迭代器分类"><a href="#迭代器分类" class="headerlink" title="迭代器分类"></a>迭代器分类</h2><ul>
<li>输出迭代器(OutputIterator)</li>
<li>输入迭代器(InputIterator)</li>
<li>向前迭代器(ForwardIterator)</li>
<li>双向迭代器(BidirectionalIterator)</li>
<li>随机访问迭代器(RandomAccessIterator)</li>
<li>相接迭代器(ContiguousIterator)</li>
<li>可变迭代器(MutableIterator)</li>
</ul>
<p>迭代器分类的依据是其可以进行的操作</p>
<p><img src="http://img.uoj.ac/utility/bear-applaud.gif" alt="鼓掌熊">由上至下越来越像指针，<del>越来越正常</del></p>
<h2 id="输出迭代器"><a href="#输出迭代器" class="headerlink" title="输出迭代器"></a>输出迭代器</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> output_iterator_tag iterator_category;</span><br></pre></td></tr></table></figure>

<p>可自增（前置/后置、无操作）</p>
<p>可<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">返回的还是这个迭代器本身，所以不要做出```a = *it```这种操作，~~伦家明明是输出迭代器不要把窝搞成输入嘛~~~</span><br><span class="line"></span><br><span class="line">实际上这个不是输出迭代器标准定义，但是STL中输出迭代器的实例就是这样的</span><br><span class="line"></span><br><span class="line">仅资瓷单趟算法</span><br><span class="line"></span><br><span class="line">啥是单趟算法？只需要遍历这个序列一次的算法，不需要把当前位置迭代器记存一个副本，等以后再使用。</span><br><span class="line"></span><br><span class="line">因为该序列上同一时间可能只有一个位置的迭代器是合法的</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2018/08/11/5b6ecf17aea62.jpg)输出迭代器这个名字看起来就是用于输出内容的，STL有两个小玩意叫做```std::ostream_iterator```和```std::ostreambuf_iterator```，把输出流包装了一下</span><br><span class="line">```cpp</span><br><span class="line">// 构造一个输出T类型的输出迭代器</span><br><span class="line">// 第一个参数为绑定到的流</span><br><span class="line">// 第二个参数为每次输出后输出的字符串，可省</span><br><span class="line">std::ostream_iterator&lt;T&gt; it(std::cout, &quot; &quot;);</span><br><span class="line">T t;</span><br><span class="line">it = t; //这些都等同于 std::cout &lt;&lt; t &lt;&lt; &quot; &quot;</span><br><span class="line">*it = t;</span><br><span class="line">it++ = t;</span><br><span class="line">++it = t;</span><br><span class="line">*it++ = t;</span><br><span class="line"></span><br><span class="line">// 跟上面那个一样，不过变成输出字符类型，也没有第二个参数了</span><br><span class="line">std::ostreambuf_iterator&lt;char&gt; it(std::cout);</span><br><span class="line"></span><br><span class="line">it = &apos;A&apos;; // 等同于 std::cout &lt;&lt; &apos;A&apos;</span><br><span class="line">*it = &apos;A&apos;;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>STL还有几个用于插入序列的迭代器适配器，以及配套的为了方便的函数模板</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::back_insert_iterator&lt; <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; &gt; it1(q);</span><br><span class="line"><span class="comment">// 等同于 auto it1 = std::back_inserter(q);</span></span><br><span class="line">it1 = <span class="number">1</span>; <span class="comment">// 等同于 q.push_back(1)</span></span><br><span class="line">*it1 = <span class="number">1</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::front_insert_iterator&lt; <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; &gt; it2(q);</span><br><span class="line"><span class="comment">// 等同于 auto it2 = std::front_inserter(q);</span></span><br><span class="line">it2 = <span class="number">1</span>; <span class="comment">// 等同于 q.push_front(1)</span></span><br><span class="line">*it2 = <span class="number">1</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::insert_iterator&lt; <span class="built_in">std</span>::<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; &gt; it3(q, q.begin());</span><br><span class="line"><span class="comment">// 等同于 auto it3 = std::inserter(q);</span></span><br><span class="line">it3 = <span class="number">1</span>; <span class="comment">// 等同于 q.insert(q.begin(), 1)</span></span><br><span class="line">*it3 = <span class="number">1</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>输入迭代器</p>
<p><del>这玩意从名字看上去就与上面那个有许多相似之处，实际上也是</del></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> input_iterator_tag iterator_category;</span><br></pre></td></tr></table></figure>

<p>可后置自增</p>
<p>可默认构造</p>
<p>实际上输入迭代器标准定义不可默认构造，向前迭代器才可以，但是STL中输入迭代器的实例都是可以的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">可以读取啦，但是不一定可以写入，因为返回的引用可能是```const```的（下面的输入流迭代器就如此）</span><br><span class="line"></span><br><span class="line">为什么是“可转换为```value_type```的引用”呢？</span><br><span class="line"></span><br><span class="line">~[](https://i.loli.net/2018/08/11/5b6ecf17aea62.jpg)```std::vector&lt;bool&gt;```为了节约空间，每一个 0101 位占一个bit而非一个byte，但是没有办法返回一个bit的对象，只能返回一个包装好的代理类辣，所以```std::vector&lt;bool&gt;::iterator::reference```是代理类的引用而非位引用或```bool&amp;</span><br></pre></td></tr></table></figure>

<p>PS:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">~~C++真是一门难学的语言~~![](https://i.loli.net/2018/08/11/5b6eca17075cd.jpg)</span><br><span class="line"></span><br><span class="line">可比较相等和不等</span><br><span class="line"></span><br><span class="line">```operator*```返回当前元素</span><br><span class="line"></span><br><span class="line">可使用```operator-&gt;```访问成员</span><br><span class="line"></span><br><span class="line">仅资瓷单趟算法</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2018/08/11/5b6ecf17aea62.jpg)把输出迭代器的栗子的输出改成输入就好了</span><br><span class="line"></span><br><span class="line">emmmmm...等等，那EOF咋判断？![思考熊](http://img.uoj.ac/utility/bear-thinking.gif)</span><br><span class="line"></span><br><span class="line">默认构造的输入流迭代器就代表EOF，判一下相等/不等就好了</span><br><span class="line">```cpp</span><br><span class="line">std::vector&lt;int&gt; v;</span><br><span class="line">std::istream_iterator&lt;int&gt; i1(std::cin), i2;</span><br><span class="line">while(i1 != i2) v.push_back(*i1++);</span><br></pre></td></tr></table></figure></p>
<p>同一个位置的元素可以读多次，不过不能倒回来读</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::istream_iterator&lt;<span class="keyword">int</span>&gt; i1(<span class="built_in">std</span>::<span class="built_in">cin</span>);</span><br><span class="line"><span class="keyword">int</span> a = *i1, b = *i1, c = *++i1, d = *i1++; <span class="comment">// 前提未EOF</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![](https://i.loli.net/2018/08/12/5b6fc6e27d42a.jpg)那这个输入/输出迭代器比直接用```std::cin/cout```还麻烦啊！！！有啥用啊！！！</span><br><span class="line"></span><br><span class="line">别急着骂我，主要是配合各种STL函数食用的</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2018/08/11/5b6ecf17aea62.jpg)众所周知，```std::vector```有这样一个构造函数，接收一对迭代器，将 ```[begin,end)``` 范围内元素拷贝入容器（```std::vector&lt;&gt;::assign()```也是）</span><br><span class="line"></span><br><span class="line">所以上面的代码可以改写成这样</span><br><span class="line">```cpp</span><br><span class="line">std::vector&lt;int&gt; v(std::istream_iterator&lt;int&gt;(std::cin), std::istream_iterator&lt;int&gt;());</span><br></pre></td></tr></table></figure>

<p>一行结束，简单多了对吧。输出的也同理</p>
<p><del>别问我这个在算法竞赛中的应用是什么，我知道你们都不会在比赛中用流式输入输出的</del>，但是这些都是C++这门语言的重要组成部分，毕竟C++不是只用来算法竞赛的对吧</p>
<h2 id="向前迭代器"><a href="#向前迭代器" class="headerlink" title="向前迭代器"></a>向前迭代器</h2><p><del>终于到比较正常的</del>用的比较多的了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> forward_iterator_tag iterator_category;</span><br></pre></td></tr></table></figure>

<p>是输入迭代器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">提供多趟保证</span><br><span class="line"></span><br><span class="line">可以放心地把迭代器存起来辣</span><br><span class="line"></span><br><span class="line">不会因为解引用并赋值导致迭代器非法化</span><br><span class="line"></span><br><span class="line">自增```it```的副本不改变解引用```it```得到的值</span><br><span class="line"></span><br><span class="line">保证若```ita == itb```则</span><br><span class="line"></span><br><span class="line">- 要么二者都不可解引用，要么指向同一对象</span><br><span class="line">- ```++ita == ++itb</span><br></pre></td></tr></table></figure>

<p>可以看成不可自减和随机访问的指针</p>
<p><img src="https://i.loli.net/2018/08/11/5b6ecf17aea62.jpg" alt=""><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 双向迭代器</span><br><span class="line">```cpp</span><br><span class="line">typedef bidirectional_iterator_tag iterator_category;</span><br></pre></td></tr></table></figure></p>
<p>是向前迭代器</p>
<p>可自减</p>
<p>行为与自增都类似</p>
<p>可以看成不可随机访问的指针</p>
<p><img src="https://i.loli.net/2018/08/11/5b6ecf17aea62.jpg" alt=""><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 随机访问迭代器</span><br><span class="line">```cpp</span><br><span class="line">typedef random_access_iterator_tag iterator_category;</span><br></pre></td></tr></table></figure></p>
<p>是向前迭代器</p>
<p>可以在常量时间内移动任意位置</p>
<p>可以做加减法</p>
<p>可以比较大小</p>
<p>可以使用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">指向数组元素的指针会用吧？一样的</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2018/08/11/5b6ecf17aea62.jpg)```std::vector, std::array, std::deque, std::string```的```iterator```、指向数组元素的指针</span><br><span class="line"></span><br><span class="line">## 相接迭代器</span><br><span class="line"></span><br><span class="line">是迭代器</span><br><span class="line"></span><br><span class="line">其所指向的逻辑相邻元素也在内存中物理上相邻</span><br><span class="line"></span><br><span class="line">任意合法的```*(a + n)```等价于```*(std::addressof(*a) + n)</span><br></pre></td></tr></table></figure></p>
<p>顺便提一句，为什么是<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">因为```operator&amp;```是可以重载的...它可以返回任何奇怪的东西</span><br><span class="line"></span><br><span class="line">所以C++11引入了```std::addressof```函数，专门用于返回一个对象的地址，其实现用了一些小trick，C++11及之后所有的标准库实现取地址用的都是这个函数而不是```operator&amp;</span><br></pre></td></tr></table></figure></p>
<p>那么问题来了，如何在C++11之前将一个重载了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![](https://i.loli.net/2018/08/12/5b6fd12ac0062.jpg)</span><br><span class="line"></span><br><span class="line">~~C++真是一门难学的语言~~![](https://i.loli.net/2018/08/11/5b6eca17075cd.jpg)</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2018/08/11/5b6ecf17aea62.jpg)```std::vector, std::array, std::basic_string_view```的```iterator```、指向数组元素的指针</span><br><span class="line"></span><br><span class="line">## 可变迭代器</span><br><span class="line"></span><br><span class="line">是输入迭代器</span><br><span class="line"></span><br><span class="line">是输出迭代器</span><br><span class="line"></span><br><span class="line">也就是可以读也可以写的</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2018/08/11/5b6ecf17aea62.jpg)所有STL容器的```iterator```（```const_iterator```除外）、指针（常量指针除外）</span><br><span class="line"></span><br><span class="line">## 类型总结</span><br><span class="line"></span><br><span class="line">![](https://i.loli.net/2018/08/11/5b6edd403bc5f.png)</span><br><span class="line"></span><br><span class="line">来源cppreference</span><br><span class="line"></span><br><span class="line">## 相对用的比较多的迭代器适配器</span><br><span class="line"></span><br><span class="line">```std::reverse_iterator</span><br></pre></td></tr></table></figure></p>
<p>反向迭代器，原迭代器+变-、-变+，提供原迭代器提供的所有功能</p>
<p><img src="https://i.loli.net/2018/08/11/5b6ecf17aea62.jpg" alt="">STL容器的<figure class="highlight plain"><figcaption><span>rend()```返回的就是这个</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```std::move_iterator</span><br></pre></td></tr></table></figure></p>
<p>原迭代器需至少为输入迭代器，其<code>reference</code>为右值引用</p>
<p>关于<code>std::move</code>和右值引用…那应该是另一篇文章的内容了</p>
<p>迭代器非法化</p>
<p>See <a href="https://zh.cppreference.com/w/cpp/container#.E8.BF.AD.E4.BB.A3.E5.99.A8.E9.9D.9E.E6.B3.95.E5.8C.96" target="_blank" rel="noopener">https://zh.cppreference.com/w/cpp/container#.E8.BF.AD.E4.BB.A3.E5.99.A8.E9.9D.9E.E6.B3.95.E5.8C.96</a></p>
<p>适配器均取决于其底层容器</p>
<p>（溜了溜了）</p>
<p>emmmm…还是说几个常见的吧</p>
<p>所有只读操作无</p>
<p><code>std::vector</code>扩大重分配、<code>std::deque</code>插入+扩大重分配+非首尾擦除：全部</p>
<p><code>std::vector</code>插入/擦除（无重分配）：插入位置及其后</p>
<p><code>std::deque</code>首尾擦除（无重分配）：首尾</p>
<p>链表+有序关联容器：插入无，擦除仅被擦除元素</p>
<p>（毕竟它们是节点形式出现的）</p>
<p>哈希容器：</p>
<p>插入导致重哈希：全部</p>
<p>插入未导致重哈希：无</p>
<p>擦除：仅被擦除元素</p>
<h2 id="一点废话"><a href="#一点废话" class="headerlink" title="一点废话"></a>一点废话</h2><p>在不需要返回值的情况下尽可能使用前置递增/递减，而非后置</p>
<blockquote>
<p>　后置比前置慢</p>
</blockquote>
<p>这个对于内置类型是假的，开不开优化都一样</p>
<p><img src="http://img.uoj.ac/utility/emoticon-1.jpg" alt="">但是对于非内置类型就不一定了</p>
<p>像迭代器这种实现相对比较简单的类（绝大部分容器的迭代器底层都只是一个或几个指针），开了优化可能会被优化成一样</p>
<p>但是如果是复杂一点的就不一定了2333333</p>
<p>小建议：（求不喜勿喷）干脆全改成前置好了，反正不会慢对吧，要不然写的时候还要想一下是不是内置类型，也挺麻烦的<img src="http://static.tieba.baidu.com/tb/editor/images/client/image_emoticon25.png" alt=""></p>
<p>使用<code>std::array</code>而非原生数组</p>
<p>窝个人觉得，OOP的封装性的优势在这体现地淋漓尽致，不用管底层怎么搞的，用就好辣</p>
<p>其成员函数什么的都是STL的命名格式，会用一个STL容器就会用其他的<em>(:з」∠)</em></p>
<p>一维数组还好办，二维及以上的话指针、<code>sizeof</code>什么的比封装好的麻烦多了（表喷窝TAT，再熟练也改变不了它麻烦的事实呀）</p>
<p>常数这个无需担心，<code>std::array</code>只是把原生数组封装了一下，效率没有任何差别，成员函数都是内联的<img src="http://img.uoj.ac/utility/bear-applaud.gif" alt="鼓掌熊"></p>
<p>然鹅…这个东西是C++11才有的，C++98的话也可以自己封装一下嘛，几分钟就写完了（逃）</p>
<p>参考资料</p>
<p><a href="https://www.iso.org/standard/68564.html" target="_blank" rel="noopener">ISO/IEC 14882:2017 Programming languages – C++</a>:952-986.</p>
<p><a href="https://en.cppreference.com/w/" target="_blank" rel="noopener">cppreference.com</a>.</p>
<p>（德）约祖蒂斯（Josuttis,N.M.）著；侯捷译.C++标准库：第2版[M].北京：电子工业出版社，2015.6：433-474.</p>
]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】OI中可以用到的Linux基础教程</title>
    <url>/blog/lgrb-Linux/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="OI中可以用到的Linux基础教程"><a href="#OI中可以用到的Linux基础教程" class="headerlink" title="OI中可以用到的Linux基础教程"></a>OI中可以用到的Linux基础教程</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://www.luogu.org/blog/Chanis/Linux" target="_blank" rel="noopener">洛谷日报#29</a>，原作者为Chanis。</p>
</blockquote>
<hr>
<h2 id="Linux基础教程"><a href="#Linux基础教程" class="headerlink" title="Linux基础教程"></a>Linux基础教程</h2><p>●前置系统：任意Linux(不用NOI Linux也没问题，我用的是deepin），如果没有装，而且你用的是win10，请看往期的洛谷日报：<a href="https://www.luogu.org/blog/asfr/Run-Ubuntu-On-Windows10" target="_blank" rel="noopener">练习Linux？其实你的Win10自带一个Ubuntu</a>。如果你用的不是win10，你可以装双系统或是虚拟机，这里直接给地址，不再赘述（mac os的操作类似linux，仅提供win教程）:<a href="https://jingyan.baidu.com/article/86112f135e584a273697876b.html" target="_blank" rel="noopener">虚拟机</a> <a href="https://jingyan.baidu.com/article/60ccbceb18624464cab197ea.html" target="_blank" rel="noopener">双系统</a> <a href="http://www.noi.cn/newsview.html?id=267&hash=BDBDBE&type=1" target="_blank" rel="noopener">NOI Linux下载地址</a></p>
<p>●QQ826755370</p>
<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>众所周知，NOIP复赛使用的操作系统将逐渐变为NOI Linux，湖南已经取消了windows机房，我所在的江苏今年似乎也要将win7+NOI Linux虚拟机换成NOI Linux，所以我们需要适应Linux系统，从而就有了这篇教程。</p>
<h3 id="Linux基本操作"><a href="#Linux基本操作" class="headerlink" title="Linux基本操作"></a>Linux基本操作</h3><p><img src="https://s1.ax1x.com/2018/08/01/Pw42Yn.png" alt="终端"></p>
<p>1.打开终端：直接用快捷键Ctrl+Alt+T即可。</p>
<p>2.用root（类似windows的administrator）权限运行命令：在命令的最前面加上sudo，输入完命令后输入此时登录的账号的密码，注意，输入进去的密码是隐藏的，不会显示明文或“*”，不要以为是电脑坏了。</p>
<p>3.终端内打开自己用户的文件夹（类似windows里你的用户文件夹）：cd ~</p>
<p>4.终端里打开某个文件夹：cd 路径</p>
<p>5.终端里返回上一级文件夹：cd ..</p>
<p>6.<del>与/的区别：“</del>”放在路径开头表示的是自己的文件夹目录，“/”放在路径开头表示的是根目录，放在中间表示就和普通的“/”意义相同，如果路径的开头没有这两个符号，那么表示将从你当前所在的文件夹开始查找目标文件（夹）。</p>
<p>7.安装软件：</p>
<p>(1)debian系（如debian，ubuntu，NOI Linux(这玩意儿能叫一个系统？)，deepin，elementary OS):sudo apt-get install 软件名</p>
<p>(2)arch系（如arch Linux，manjaro）：sudo pacman -S 软件名</p>
<p>(3)Redhat系（如Redhat，centos）：sudo yum install 软件名</p>
<p>8.删除文件：rm -rf 路径（这个指令爽歪歪，手动滑稽：rm -rf /）</p>
<p>9.以上就是我最常用的，其他的都不常用啊…因为Linux本身也有图形界面，所以复制粘贴，新建文件（夹），重命名之类的操作就不讲了。我讲路径和cd是因为编译时要用到，讲安装软件那是必须的，讲rm是为了某个好玩的指令，如果觉得有什么需要添加的请指出。</p>
<h3 id="使用Linux编写c-程序"><a href="#使用Linux编写c-程序" class="headerlink" title="使用Linux编写c++程序"></a>使用Linux编写c++程序</h3><p>IDE</p>
<p>(1)北航的鸡肋guide：这个NOI官网上有详细的教程<a href="http://download.noi.cn/T/noi/GUIDE_v1.1.pdf" target="_blank" rel="noopener">NOI的教程</a>，但是我不喜欢用这个弱智IDE。</p>
<p>(2)我认为比较好用的anjuta：</p>
<p>①打开之后先选择“create a new project”。</p>
<p><img src="https://cdn.luogu.org/upload/pic/26176.png" alt="anjuta1"></p>
<p>②之后弹出一个窗口，上方选择“c++”，里面选“通用c++”，之后弹出的窗口全部点击“确定”或“应用”。</p>
<p><img src="https://cdn.luogu.org/upload/pic/26178.png" alt="anjuta2"></p>
<p>③然后我们来到下图的页面，左侧按照我的目录树，打开main.cc，记得把拓展名改成“.cpp”，NOIP的c++源文件的拓展名必须是cpp。现在我们看到了hello,world的代码，直接在里面修改即可，写完之后按F9编译，F3运行。</p>
<p><img src="https://cdn.luogu.org/upload/pic/26179.png" alt="anjuta3"></p>
<p>④调试的方法与dev-c++类似，上方有个“调试”菜单，这里不再讲，后面会讲终端中使用gdb调试。</p>
<p>(3)NOI Linux不自带的Geany、Code::Blocks等：因为不自带，考试用不了，所以我也不做使用讲解。</p>
<p>文本编辑器</p>
<p>无论你是用什么编辑器（vim除外），我都建议你在目录下新建一个cpp文件。</p>
<p><img src="https://cdn.luogu.org/upload/pic/26182.png" alt="新建"></p>
<p>(1)gedit（类似windows系统的记事本，但是比记事本强大多了）</p>
<p>双击该文件，默认使用gedit打开的，写完代码后，你是不是发现贼丑？</p>
<p><img src="https://cdn.luogu.org/upload/pic/26183.png" alt="贼丑"></p>
<p>别急，我们来改一下，右下角有一行字，我们将“纯文本”改为c++，制表符宽度按个人喜欢设置，里面还可以设置自动缩进，后面一个框里可以选择显示行号，高亮当前行，右上方的菜单键（三个点）里面可以设置侧边栏，还有搜索、跳转行的功能。</p>
<p><img src="https://cdn.luogu.org/upload/pic/26184.png" alt="美化后"></p>
<p>是不是好看多了？退出之前别忘了点右上方的“保存”。</p>
<p>(2)emacs（业界有这样一句话：“emacs是神的编辑器，vim是编辑器的神。”）</p>
<p>①我们要用windows中右击选择打开方式的方法，使用emacs打开文件（你也可以设置默认打开方式），我们选择GUI版本，如果选传统版本的话，你还不如用vim。</p>
<p>②没什么想讲的了，直接放张图吧，与gedit相比，emacs支持代码补全，据说有许多强大的功能，但是我是vim选手，不是emacs选手，所以关于emacs的骚操作，请自行百度吧。</p>
<p><img src="https://cdn.luogu.org/upload/pic/26187.png" alt="emacs"></p>
<p>(3)vim，我用的就是vim，但是vim的教程都能写十篇文章，这里我并不想写啊，而且当初我听信采取他人的蛊惑建议，学vim用了一个多星期…直接扔一个链接吧：<a href="https://www.jianshu.com/p/385cb0fdc3a0" target="_blank" rel="noopener">vim教程</a>。需要注意的是，NOIP不提供vim的插件，所以不能过度依赖vim的插件，但是可以改.vimrc，NOIP发题之前给你的时间已经足够你写.vimrc了。下面fa♂一张我的vim：</p>
<p><img src="https://cdn.luogu.org/upload/pic/26190.png" alt="myvim"></p>
<p>(4)sublime等编辑器，这些NOI Linux不自带，还是不讲。</p>
<p>等一等，我们写完代码了，该怎么编译？</p>
<p>①先打开终端，在终端里打开你的源代码所在的目录。</p>
<p>②接着在终端里输：g++ 你的代码文件名.cpp -o 随便填（如果你用了cmath，那么你需要-lm，开优化你需要-O0，-O1，-O2，-O3，想用gdb调试要开-g0 -g1 -g2 -g3，建议使用-g2）。</p>
<p>③然后我们在终端里输入：./“随便填”（就是编译的时候你自己填的）。这样就亦可赛艇辣！</p>
<p><img src="https://cdn.luogu.org/upload/pic/26195.png" alt="编译运行"></p>
<h3 id="终端里使用gdb调试"><a href="#终端里使用gdb调试" class="headerlink" title="终端里使用gdb调试"></a>终端里使用gdb调试</h3><p>(1)首先用终端在存放编译好的文件的目录下运行：gdb ./你的可执行文件名（编译时必须加了-g选项）</p>
<p><img src="https://cdn.luogu.org/upload/pic/26247.png" alt="gdb"></p>
<p>(2)gdb命令小全</p>
<p>①设置断点：break（或b） 行号</p>
<p>②查看变量的值：p 变量名</p>
<p>③下一步（跳过函数）：next（或n）</p>
<p>④下一步（不会跳过函数）：step</p>
<p>⑤跳出当前函数：finish</p>
<p>⑥查看断点信息：info b</p>
<p>⑦继续运行：c</p>
<p>⑧开始运行：run</p>
<p>⑨删除某个断点：delete（或d） break 断点号（如果没有则删除所有的断点）</p>
<p>⑩删除某行断点：clear 行号</p>
<p>(3)退出gdb</p>
<p>输入quit，回车之后再输入y，这样就退出了。</p>
<p>(4)一点建议</p>
<p>不要过度依赖gdb，养成静态查错的习惯，NOIP考场上也有过gdb出锅的先例：<a href="http://tieba.baidu.com/p/4866797834" target="_blank" rel="noopener">gdb出锅</a>。</p>
<p>(5)<a href="https://www.cnblogs.com/xsln/p/gdb_instructions1.html" target="_blank" rel="noopener">gdb详细教程</a></p>
<h3 id="对拍"><a href="#对拍" class="headerlink" title="对拍"></a>对拍</h3><p>1.除了待测程序，你还需要自己写一个数据生成器和暴力程序，如果要得到一个小于n的数，可以用rand()%n得到。</p>
<p>2.你要写一个shell脚本，我们将其命名为judge.sh（其他的名字也可以，但是拓展名必须是.sh），将它与那三个程序放在同一个目录下，它的模板是下面这个样子的（#在shell里表示注释）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">#!/bin/bash #相当于c++的头文件，背下来就对了</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">./makedata&gt;in.txt #数据生成器输出数据重定向到in.txt</span><br><span class="line">./wait_judge&lt;in.txt&gt;out.txt #待测程序重定向输入输出</span><br><span class="line">./check&lt;in.txt&gt;right.txt #正确（暴力）程序</span><br><span class="line"><span class="keyword">if</span> diff out.txt right.txt; then #比较两个文件</span><br><span class="line"><span class="built_in">printf</span> AC #正确输出AC</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span> WA #错误输出WA</span><br><span class="line">#cat out.txt right.txt #显示两个文件</span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span> #退出</span><br><span class="line">fi #结束<span class="keyword">if</span></span><br><span class="line">done #结束<span class="keyword">while</span></span><br></pre></td></tr></table></figure>

<p>3.我们打开终端，进入到保存对拍程序的目录，输入：sh ./judge.sh，然后回车即可。</p>
<p><img src="https://cdn.luogu.org/upload/pic/26204.png" alt="judge"></p>
<p>4.需要注意的是，这三个程序的源代码里面都不需要重定向输入输出（加freopen之类的），但是拍完了别忘记加上。还有，如果对拍发现结果不一样，先检查你的暴力程序，防止是暴力程序写错了。</p>
<h3 id="赠品——我该如何在Linux下颓废？"><a href="#赠品——我该如何在Linux下颓废？" class="headerlink" title="赠品——我该如何在Linux下颓废？"></a>赠品——我该如何在Linux下颓废？</h3><p>1.slay.one</p>
<p>2.linux版的网易云音乐了解一下，steam for linux了解一下。</p>
<p>3.上ab站使人身心愉悦。</p>
<p>4.wine下的TIM、QQ了解一下（强势安利一波deepin、完美wine模拟）。</p>
<h3 id="完结撒花！★-°-☆-￣▽￣-°★-。"><a href="#完结撒花！★-°-☆-￣▽￣-°★-。" class="headerlink" title="完结撒花！★,°:.☆(￣▽￣)/$:.°★ 。"></a>完结撒花！★,°:.☆(￣▽￣)/$:.°★ 。</h3>]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】GCC自带位运算系列函数</title>
    <url>/blog/lgrb-gcc-hei-ke-ji-zhi-builtin-ji-lie-han-shuo/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="GCC自带位运算系列函数"><a href="#GCC自带位运算系列函数" class="headerlink" title="GCC自带位运算系列函数"></a>GCC自带位运算系列函数</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://www.luogu.org/blog/Ilovehimforever/gcc-hei-ke-ji-zhi-builtin-ji-lie-han-shuo" target="_blank" rel="noopener">洛谷日报#26</a>，原作者为I_love_him52。</p>
</blockquote>
<hr>
<p>谈到GCC的黑科技，大家想到的一定是这句：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize (3)<span class="comment">//吸氧</span></span></span><br></pre></td></tr></table></figure>

<p>抑或是这句：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC diagnostic <span class="meta-keyword">error</span> <span class="meta-string">"-std=c++11"</span><span class="comment">//C++11</span></span></span><br></pre></td></tr></table></figure>

<p>然而又有多少人知道<code>__builtin_xxx()</code>这群神奇的存在？</p>
<p>举个栗子：树状数组的核心思想就是一个叫做<code>lowbit()</code>的函数，它是这样写的：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x &amp; -x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>什么，你说长？你嫌慢？</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) ((x) &amp; -(x))</span></span><br></pre></td></tr></table></figure>

<p>什么，你还是不想自己写？非得用内置函数？</p>
<p>那么恭喜你，这是你新的出路：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">lowbit(x) == (<span class="number">1</span> &lt;&lt; __builtin_ctz(x))</span><br></pre></td></tr></table></figure>

<p>当然，对于<code>lowbit()</code>函数，大家看不到什么好处（喜欢这样用的才有问题吧(-_-)）</p>
<p>再举一个栗子：<a href="https://www.luogu.org/problemnew/show/P2704" target="_blank" rel="noopener">P2704</a>， 一道状压DP入门题目，它要求输出：</p>
<p>仅一行，包含一个整数K，表示最多能摆放的炮兵部队的数量。</p>
<p>那么，DP的时候，对于每一行的状态，若它在二进制下的第<code>i</code>位以<code>0</code>表示不放，以<code>1</code>表示放的话，我们就得统计它二进制下<code>1</code>的个数，于是考虑用一个<code>inline</code>的函数<code>count()</code>来统计：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> x)</span><span class="comment">//摘自本人AC代码</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        ret += x &amp; <span class="number">1</span>;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>统计一下，这里一共有<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">使用它的代码长这样：`sum[tot] = count(i);`，改一下，变成这样：`sum[tot] = __builtin_popcount(i);`</span><br><span class="line"></span><br><span class="line">有人又要钻牛角尖：就算你把函数定义的码量给省了，但是你每次调用函数都会增加`strlen(&quot;__builtin_pop&quot;) == 13`字节的码量啊？</span><br><span class="line"></span><br><span class="line">那还不简单`define`下就好了</span><br><span class="line"></span><br><span class="line">除了上述函数，本人另外还整理了一部分用得到的`__builtin_`系列函数：</span><br><span class="line"></span><br><span class="line">`__builtin_ffs(x)` 返回`x`的二进制下第一位`1`的位置（从`1`开始）</span><br><span class="line">`__builtin_clz(x) `返回`x`二进制下最高有效位到最高位的`1`上一位的长度（即最高位开始连续`0`的个数）</span><br><span class="line">`__builtin_ctz(x)` 与上一个函数相反，返回`x`的二进制下最低位开始连续`0`的个数（即第一个函数 - 1）</span><br><span class="line">`__builtin_parity(x) `返回`x`二进制下`1`的个数的奇偶性</span><br><span class="line">`__builtin_popcount(x) `返回`x`二进制下`1`的个数</span><br><span class="line">另外以上函数的唯一参数都为`unsigned int`类型，并且都有`unsigned long long`版本，即在函数名后面加上`ll`，Like` __builtin_popcountll(x)`。</span><br><span class="line"></span><br><span class="line">对于其他的`__builtin_`系列函数，可以自行查阅`GNU C`所提供的文档</span><br><span class="line"></span><br><span class="line">又双叒叕及：感谢[@ComeIntoPower](https://www.luogu.org/space/show?uid=11751) 管理员大大普及：可以在程序开头加入这样一行：</span><br><span class="line">```cpp</span><br><span class="line">#pragma GCC target (&quot;popcnt&quot;)</span><br></pre></td></tr></table></figure></p>
<p>根据大大的说法，这条<code>GCC</code>指令可以让<code>__builtin_popcount</code>被编译器识别为一条指令。</p>
<p>什么用呢？就是加速！时 间 减 半！它本身就够快了，还可以加速%%%，鄙人真是孤陋寡闻。</p>
<p>注意：有些计算机可能不支持<code>popcnt</code>指令，然后<code>GCC</code>就会<code>GG</code>。（大部分计算机都有）</p>
<p>还有一点注意，有一种说法是NOI系列赛事中禁止使用以下划线开头的函数，因此在NOI系列比赛中使用有风险，这只是给平时做题提供一些便利</p>
<p>此外，既然是<code>黑科技</code>自然有地方不给用，我已经测试了各大<code>OJ</code>对于该系列函数的支持情况：（务必选用<code>G++/GCC</code>作为编译器）</p>
<p>洛谷: OJBK</p>
<p>Poj: OJBK</p>
<p>Lydsy: OJBK</p>
<p>Hdu: A+B 莫名WA，但是编译应该OJBK</p>
<p>CodeVS: OJBK</p>
<p>Vijos: OJBK</p>
<p>Uoj: OJBK</p>
<p>Codeforces: OJBK</p>
<p>JoyOI: 评测机炸了，待更新</p>
<p>ContestHunter: OJBK</p>
<p>Zoj: 编译过了，也是莫名WA</p>
<p>SPOJ: OJBK</p>
<p>UVa: OJBK</p>
<p>AtCoder: OJBK</p>
<p>LibreOJ: OJBK</p>
<p>比赛: 这个请问官方</p>
<p>…待补充</p>
]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】你不知道的C++11新语法</title>
    <url>/blog/lgrb-ni-fou-zhi-dao-di-c-yu-fa/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="你不知道的C-11新语法"><a href="#你不知道的C-11新语法" class="headerlink" title="你不知道的C++11新语法"></a>你不知道的C++11新语法</h1><hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://www.luogu.org/blog/64456/ni-fou-zhi-dao-di-c-yu-fa" target="_blank" rel="noopener">洛谷日报#21</a>，原作者为colazcy。</p>
</blockquote>
<hr>
<p>随着C++11的发布，C++这门语言有了本质上的提升。C++14,C++17的相继推出，更是让C++这门语言达到了一个新高度。新的标准库设施，新的语法，让我们得以书写更加安全、便捷、高效的程序。</p>
<p>2018年6月编程语言排行榜：<br><img src="https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=3957929647,686454819&fm=173&app=25&f=JPEG?w=640&h=561&s=4CA23472990FD54F0EFDE1DA0000F0B2" alt="2018年6月编程语言排行榜"></p>
<p>那么这些新的语法究竟是什么？它们如何使用？能为我们编程带来哪些便利？这便是本文所探讨的。</p>
<p>本文参考部分资料，文末已给出原文章地址。</p>
<h2 id="新的空指针类型——nullptr"><a href="#新的空指针类型——nullptr" class="headerlink" title="新的空指针类型——nullptr"></a>新的空指针类型——nullptr</h2><p>适用度:★★★★★</p>
<p>nullptr是一种特殊的字面值，它可以转化为任意一种指针类型。 原来我们初始化一个空指针都是直接将他赋值为NULL，但NULL实际上是一个宏,其值相当于0。</p>
<p>编译器是这么定义NULL的:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus <span class="comment">//如果定义__cplusplus宏，说明正在编译C++语言</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUll 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL ((void *)0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<p>也许你会想“我们用NULL还不是照样<del>吊打集训队</del>”，nullptr好像并没有什么用。</p>
<p>考虑这样一段代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> *x)</span></span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    f(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很显然，编译失败，对f的调用有二义性。因为NULL相当于0，既可转化为指针，也可转化为整形。将NULL换做nullptr即可，nullptr便是为了解决这种二义性的问题而诞生的。</p>
<p>条件允许的前提下，尽量使用nullptr，它比NULL更加安全， 原来这样写:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> *b = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>现在应该这样写:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> *b = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure>

<h2 id="避免奇葩错误——constexpr变量"><a href="#避免奇葩错误——constexpr变量" class="headerlink" title="避免奇葩错误——constexpr变量"></a>避免奇葩错误——constexpr变量</h2><p>适用度:★★★★☆</p>
<p>在编程中，我们经常遇到需要定义常量的情况，但有些常量却并不是你所想的“常量”。因而会引发一些意想不到的错误。</p>
<p>例如:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> b = a + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> c[b];<span class="comment">//错误，b不是一个常量表达式，它的值每次运行都有可能不一样。</span></span><br></pre></td></tr></table></figure>

<p>b的确是一个常量——它的值在程序的执行期间不会被修改，但是它并不是常量表达式——每次执行程序时都为同一个值，且程序执行期间无法被修改。</p>
<p>使用constexpr而非const来声明常量，让编译器来帮你检查常量是不是每次程序执行都为同一个值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">constexpr</span> b = a + <span class="number">10</span>;<span class="comment">//错误！a不是常量表达式!</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> b = a + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> c = b + <span class="number">10</span>;<span class="comment">//错误，b为常量，但不是常量表达式！</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> b = a + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> c = b + <span class="number">10</span>;<span class="comment">//正确</span></span><br></pre></td></tr></table></figure>

<h2 id="省事好帮手——auto类型指示符"><a href="#省事好帮手——auto类型指示符" class="headerlink" title="省事好帮手——auto类型指示符"></a>省事好帮手——auto类型指示符</h2><p>适用度:★★★★★</p>
<p>有些类型名字太长，难以拼写，浪费时间。怎么办？</p>
<p>知道函数的作用，却无法拼写其返回类型，无法保存其返回值。怎么办？</p>
<p>这个时候auto类型指示符就能够助我们一臂之力了。</p>
<p>原来我们这么写:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = vec.begin();it != vec.end();it++)<span class="comment">//Do something</span></span><br></pre></td></tr></table></figure>

<p>现在可以简单的这么写:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = vec.begin();it != vec.end();it++)<span class="comment">//Do something</span></span><br></pre></td></tr></table></figure>

<p>怎么样？程序瞬间清爽了许多有木有。而且还可以节约大量宝贵的时间</p>
<p>因为编译器是依靠初始值来推断auto变量的类型的，所以auto变量必须要有初始值。</p>
<p>即使是这样也不行:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> a;</span><br><span class="line">a = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>当然，也不能用auto来定义数组</p>
<p>auto和引用一起会产生一些奇怪的问题:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>,&amp;r = i;<span class="comment">//定义变量i,r为i的引用</span></span><br><span class="line"><span class="keyword">auto</span> p = r;<span class="comment">//没错,p的值为int，其值为1</span></span><br></pre></td></tr></table></figure>

<p>为什么？因为引用即别名。正如我们熟知的，使用引用其实是使用引用的对象，特别当引用被用作初始值的时候，真正参与初始化的其实是引用对象的值。此时编译器以引用对象的类型作为auto的类型。</p>
<h2 id="自动类型推断——decltype类型指示符"><a href="#自动类型推断——decltype类型指示符" class="headerlink" title="自动类型推断——decltype类型指示符"></a>自动类型推断——decltype类型指示符</h2><p>适用度:★★★★☆</p>
<p>上文提到了auto的用法，有时候我们想要用表达式的类型初始化一个变量，却并不想用表达式的值初始化这个变量。这个时候decltype类型指示符就可以派上用场了。</p>
<p>剧透：下文位置返回类型配合decltype类型指示符有惊喜</p>
<p>我们可以这样用decltype类型指示符来定义变量:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">decltype</span>(a) b;</span><br><span class="line">b = <span class="number">20</span>;</span><br></pre></td></tr></table></figure>

<p>但是要注意，decltype只会用表达式的返回值进行推断，并不会执行表达式。例如:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello decltype!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">decltype</span>(f()) i = <span class="number">123</span>;<span class="comment">//i的值为123</span></span><br><span class="line"><span class="comment">//程序运行并不会有任何输出，因为f函数并没有实际执行。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">decltype</span>(i = <span class="number">123</span>) b = i;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出1，因为i = 42表达式并未实际执行</span></span><br></pre></td></tr></table></figure>

<p>decltype和auto都可以完成类型推断的任务，那么它们有什么不同呢？<br>1.处理引用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>,&amp;r = i;<span class="comment">//定义int型变量i,r为i的引用。</span></span><br><span class="line"><span class="keyword">auto</span> a = r;<span class="comment">//此时a的类型为int</span></span><br><span class="line"><span class="keyword">decltype</span>(r) b = r;<span class="comment">//此时b的类型为int&amp;,即为int的引用。</span></span><br></pre></td></tr></table></figure>

<p>2.处理顶层const</p>
<p>这里引入一个概念：</p>
<p>1.底层const，对象所指向的对象是const的。 2.顶层const，对象本身是const的。</p>
<p>auto会忽略掉顶层const和引用，但是会保留底层const。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ci = i,&amp;cr = ci;</span><br><span class="line"><span class="keyword">auto</span> a = ci;<span class="comment">//a为int，顶层const被忽略</span></span><br><span class="line"><span class="keyword">auto</span> b = cr;<span class="comment">//b为int，顶层const和引用均被忽略</span></span><br><span class="line"><span class="keyword">auto</span> c = &amp;ci;<span class="comment">//c为指向常量int的指针，保留底层const</span></span><br></pre></td></tr></table></figure>

<p>如果要使auto类型为顶层const:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">auto</span> a = i;<span class="comment">//a为const int 类型</span></span><br></pre></td></tr></table></figure>

<p>如果decltype使用的表达式是一个变量，decltype会返回该变量的类型（包括引用和顶层const)。</p>
<h2 id="循环宏的优秀替代品——范围for语句"><a href="#循环宏的优秀替代品——范围for语句" class="headerlink" title="循环宏的优秀替代品——范围for语句"></a>循环宏的优秀替代品——范围for语句</h2><p>适用度:★★★★★</p>
<p>什么？就算有了auto类型指示符，遍历容器/数组每一个元素你还是嫌麻烦？没事，让范围for语句来帮你。</p>
<p>原来这么遍历容器/数组每一个元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it = vec.begin();it != vec.end();it++)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br></pre></td></tr></table></figure>

<p>现在这么写:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it : vec)</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; it &lt;&lt; <span class="string">" "</span>;</span><br></pre></td></tr></table></figure>

<p>注意，范围for语句只能遍历每一个元素，所以像遍历1到10这种操作还是得自己乖乖写for循环:)。</p>
<h2 id="复杂返回值必备——尾置返回类型"><a href="#复杂返回值必备——尾置返回类型" class="headerlink" title="复杂返回值必备——尾置返回类型"></a>复杂返回值必备——尾置返回类型</h2><p>适用度:★★★★☆</p>
<p>普通函数完全不必要尾置返回类型，但是当函数返回类型复杂起来时，尾置返回类型就很有用了。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> (*func(<span class="keyword">int</span> i))[<span class="number">10</span>]&#123;</span><br><span class="line">    <span class="comment">//Do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//func(int i)表示调用函数时，需要一个int类型的参数；</span></span><br><span class="line"><span class="comment">//(*func(int i))表示对调用func的结果执行解引用的操作；</span></span><br><span class="line"><span class="comment">//(*func(int i))[10]表示解引用之后得到一个维度为10的数组；</span></span><br><span class="line"><span class="comment">//int (*func(int i))[10]表示数组的数据类型为int；</span></span><br></pre></td></tr></table></figure>

<p>很复杂，对吧？（<del>当然对于dalao来说小菜一碟</del>）当返回类型更加复杂时，常规写法将会成为Debug噩梦。（话说Markdown好像识别不了尾置返回类型诶）。</p>
<p>//返回一维数组</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">auto func(int i) -&gt; int(*)[10]&#123;</span><br><span class="line">    <span class="comment">//Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有更复杂的（<del>我太蒻了给不出常规写法了</del>）</p>
<p>二维数组:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">auto func(int i) -&gt; int(*)[10][10]&#123;</span><br><span class="line">    <span class="comment">//Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二重指针:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">auto func(int i) -&gt; int **&#123;</span><br><span class="line">    <span class="comment">//Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>除了数组特殊一些以外，平时定义变量怎么写，尾置返回类型就怎么写。程序瞬间清爽了许多有木有。</p>
<p>如果返回值更加复杂，连尾置返回类型的作用都显得微乎其微了怎么办？这时候——</p>
<p>配合decltype食用效果更佳</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">auto func(int a,int b) -&gt; decltype(a+b)&#123;</span><br><span class="line">    <span class="comment">//Do something</span></span><br><span class="line">    <span class="keyword">return</span> a+b;<span class="comment">//函数的返回类型即为int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>什么？你连尾置返回类型都嫌麻烦？C++14可以满足你的需求。没错，连尾置返回类型都可以省了，直接返回类型auto就可以了Orz。</p>
<h2 id="命名困难户-装逼者的宠儿——Lambda表达式"><a href="#命名困难户-装逼者的宠儿——Lambda表达式" class="headerlink" title="命名困难户/装逼者的宠儿——Lambda表达式"></a>命名困难户/<del>装逼者的宠儿</del>——Lambda表达式</h2><p>适用度:★★★☆☆</p>
<p>假如遇到一道<del>毒瘤</del>题，既需要从小到大排序，也需要从大到小排序，甚至还要给自己定义的结构体排序。难道排序函数依次叫做cmp1,cmp2,cmp3?<del>太没有逼格了吧</del></p>
<p>一个完整的Lambda表达式由以下几个部分构成：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">[capture <span class="built_in">list</span>] (params <span class="built_in">list</span>) <span class="keyword">mutable</span> exception-&gt; <span class="keyword">return</span> type &#123; function body &#125;</span><br></pre></td></tr></table></figure>

<p>各项具体含义如下</p>
<ol>
<li>capture list：捕获外部变量列表 可以为空，但是不可以省略</li>
<li>params list：形参列表 可以为空，但是不可以省略</li>
<li>mutable指示符：用来说用是否可以修改捕获的变量 可以省略</li>
<li>exception：异常设定 可以省略</li>
<li>return type：返回类型 可以省略</li>
<li>function body：函数体 可以为空，但是不可以省略</li>
</ol>
<p>太复杂了，对吧？实际上，OI中我们使用Lambda表达式主要是用于STL的谓词（比如排序），因而我们可以省略很多不必要的部分。</p>
<p>该省略的省略后就十分简单了: 比如从大到小排序:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">sort(vec.begin(),vec.end(),[](<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Lambda表达式看似复杂，却能在许多时候为我们提供不小便利。它也是函数式编程的基石。</p>
<p>因考虑篇幅，Lambda表达式并未详细介绍。想要知道更多关于Lambda表达式的内容，可以看看我的另一篇文章。<a href="https://www.luogu.org/blog/zcy/bian-cheng-li-qi-lambda-biao-da-shi" target="_blank" rel="noopener">传送门</a></p>
<p>鸣谢:</p>
<p>本文参考了以下资料，感谢作者的辛劳付出：</p>
<p><a href="https://www.jianshu.com/p/2d44dae53910" target="_blank" rel="noopener">https://www.jianshu.com/p/2d44dae53910</a></p>
<p><a href="https://blog.csdn.net/zdy0_2004/article/details/69934828" target="_blank" rel="noopener">https://blog.csdn.net/zdy0_2004/article/details/69934828</a></p>
<p><a href="https://www.cnblogs.com/DswCnblog/p/5629165.html" target="_blank" rel="noopener">https://www.cnblogs.com/DswCnblog/p/5629165.html</a></p>
<p><a href="https://blog.csdn.net/y1196645376/article/details/51441503" target="_blank" rel="noopener">https://blog.csdn.net/y1196645376/article/details/51441503</a></p>
<p>注:因C++11语法繁杂，有些高级特性只为大型工程而设计，对OI并无太大帮助，因而未能出现在文章中（如继承，多态，泛型编程）等等。本人水平有限，文章难免有错误，望读者多多海涵，可以评论指出错误，一定尽力修正。</p>
]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>Adobe Flash Player离线安装包</title>
    <url>/blog/AdobeFlashPlayerOfflineInstaller/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="中国特供版-32-0-0-156"><a href="#中国特供版-32-0-0-156" class="headerlink" title="中国特供版 (32.0.0.156)"></a>中国特供版 (32.0.0.156)</h1><p>Flash Player NPAPI <a href="https://www.flash.cn/flashplayer/3200156/install_flash_player_cn.exe" target="_blank" rel="noopener">https://www.flash.cn/flashplayer/3200156/install_flash_player_cn.exe</a></p>
<p>Flash Player PPAPI <a href="https://www.flash.cn/flashplayer/3200156/install_flash_player_ppapi_cn.exe" target="_blank" rel="noopener">https://www.flash.cn/flashplayer/3200156/install_flash_player_ppapi_cn.exe</a></p>
<p>Flash Player ActiveX <a href="https://www.flash.cn/flashplayer/3200156/install_flash_player_ax_cn.exe" target="_blank" rel="noopener">https://www.flash.cn/flashplayer/3200156/install_flash_player_ax_cn.exe</a></p>
<h1 id="国际版-exe-格式-32-0-0-156"><a href="#国际版-exe-格式-32-0-0-156" class="headerlink" title="国际版 (exe 格式, 32.0.0.156)"></a>国际版 (exe 格式, 32.0.0.156)</h1><p>Flash Player NPAPI <a href="https://fpdownload.macromedia.com/pub/flashplayer/latest/help/install_flash_player.exe" target="_blank" rel="noopener">https://fpdownload.macromedia.com/pub/flashplayer/latest/help/install_flash_player.exe</a></p>
<p>Flash Player PPAPI <a href="https://fpdownload.macromedia.com/pub/flashplayer/latest/help/install_flash_player_ppapi.exe" target="_blank" rel="noopener">https://fpdownload.macromedia.com/pub/flashplayer/latest/help/install_flash_player_ppapi.exe</a></p>
<p>Flash Player ActiveX <a href="https://fpdownload.macromedia.com/pub/flashplayer/latest/help/install_flash_player_ax.exe" target="_blank" rel="noopener">https://fpdownload.macromedia.com/pub/flashplayer/latest/help/install_flash_player_ax.exe</a></p>
<p>Flash Player 独立播放器 (Standalone Projector) <a href="https://fpdownload.macromedia.com/pub/flashplayer/updaters/32/flashplayer_32_sa.exe" target="_blank" rel="noopener">https://fpdownload.macromedia.com/pub/flashplayer/updaters/32/flashplayer_32_sa.exe</a></p>
<h1 id="国际版-Windows-Installer-格式-32-0-0-156"><a href="#国际版-Windows-Installer-格式-32-0-0-156" class="headerlink" title="国际版 (Windows Installer 格式, 32.0.0.156)"></a>国际版 (Windows Installer 格式, 32.0.0.156)</h1><p>Flash Player NPAPI <a href="https://fpdownload.adobe.com/get/flashplayer/distyfp/current/win/install_flash_player_32_plugin.msi" target="_blank" rel="noopener">https://fpdownload.adobe.com/get/flashplayer/distyfp/current/win/install_flash_player_32_plugin.msi</a></p>
<p>Flash Player PPAPI <a href="https://fpdownload.adobe.com/get/flashplayer/distyfp/current/win/install_flash_player_32_ppapi.msi" target="_blank" rel="noopener">https://fpdownload.adobe.com/get/flashplayer/distyfp/current/win/install_flash_player_32_ppapi.msi</a></p>
<p>Flash Player ActiveX <a href="https://fpdownload.adobe.com/get/flashplayer/distyfp/current/win/install_flash_player_32_active_x.msi" target="_blank" rel="noopener">https://fpdownload.adobe.com/get/flashplayer/distyfp/current/win/install_flash_player_32_active_x.msi</a></p>
<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>输入输出优化代码</title>
    <url>/blog/Input-and-output-optimization/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="输入输出效率比较"><a href="#输入输出效率比较" class="headerlink" title="输入输出效率比较"></a>输入输出效率比较</h2><p>一份摘自LOJ的一份读入测试数据，若干读入整数速度测试的结果（单位：毫秒）。<br>输入：$3×10^6$个在区间中随机生成的十进制整数。</p>
<table>
<thead>
<tr>
<th>#</th>
<th>Lanuage</th>
<th>$[0,2)$</th>
<th>$[0,8)$</th>
<th>$[0,2^{15})$</th>
<th>$[0,2^{31})$</th>
<th>$[0,2^{63})$</th>
</tr>
</thead>
<tbody><tr>
<td>fread</td>
<td>G++ 5.4.0 (-O2)</td>
<td>13</td>
<td>13</td>
<td>39</td>
<td>70</td>
<td>111</td>
</tr>
<tr>
<td>getchar</td>
<td>G++ 5.4.0 (-O2)</td>
<td>58</td>
<td>73</td>
<td>137</td>
<td>243</td>
<td>423</td>
</tr>
<tr>
<td>cin(关闭同步)</td>
<td>G++ 5.4.0 (-O2)</td>
<td>161</td>
<td>147</td>
<td>205</td>
<td>270</td>
<td>394</td>
</tr>
<tr>
<td>cin</td>
<td>G++ 5.4.0 (-O2)</td>
<td>442</td>
<td>429</td>
<td>706</td>
<td>1039</td>
<td>1683</td>
</tr>
<tr>
<td>scanf</td>
<td>G++ 5.4.0 (-O2)</td>
<td>182</td>
<td>175</td>
<td>256</td>
<td>368</td>
<td>574</td>
</tr>
</tbody></table>
<p>下面水下一些常用的输出输出方式：</p>
<h2 id="cin-cout"><a href="#cin-cout" class="headerlink" title="cin/cout"></a>cin/cout</h2><p>采用C++的特性通配流式输入输出的好处是不用处理变量类型，直接写就可以；但是根据上表可以看到，这种输入输出方式十分的耗时，并不适用于大数据编程。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">short</span> b;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">' '</span>&lt;&lt;b&lt;&lt;<span class="string">' '</span>&lt;&lt;c&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="scanf-printf"><a href="#scanf-printf" class="headerlink" title="scanf/printf"></a>scanf/printf</h2><p>采用传统C语言的输入输出的好处是节省时间，适用于大数据编程，一般的题目都可以用这种方式输入输出来通过；缺点是必须对应数据的类型而且不能少”,”，否则就会CE，scanf不能少”&amp;”否则会导致RE，printf不能加”&amp;”，否则会输出奇奇怪怪的东西（地址）。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">short</span> b;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%hd%lld"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %hd %lld\n"</span>,a,b,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="cin-cout（关闭同步）"><a href="#cin-cout（关闭同步）" class="headerlink" title="cin/cout（关闭同步）"></a>cin/cout（关闭同步）</h2><p>我们可以通过写关闭同步的方式来加快流式输入输出，这种方式的好处是可以加快速度，甚至比刚才介绍的传统输入输出方式还要快；但是请注意：请不要在关闭同步之后采用scanf及printf输入输出，否则后果自负！</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);<span class="comment">//警告：请不要在关闭同步之后采用scanf及printf输入输出，否则后果自负！</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">short</span> b;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">' '</span>&lt;&lt;b&lt;&lt;<span class="string">' '</span>&lt;&lt;c&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="普通版（基于getchar-putchar）优化："><a href="#普通版（基于getchar-putchar）优化：" class="headerlink" title="普通版（基于getchar/putchar）优化："></a>普通版（基于getchar/putchar）优化：</h2><p>有些时候我们会因为程序的常数不够优秀而被大数据卡爆，或者我们希望暴力能够得到略微高一点的分数，这时候我们就可以采用基于getchar和putchar函数的输入输出优化。一般见到的输入优化定义的函数名是read，但是经过我多次运用，发现我一般用到的情况都是scanf被卡后才用的，所以为了方便我切换函数我使用scan定义函数。</p>
<p>输入优化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of_scan&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(__Type_of_scan &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    __Type_of_scan f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=getchar();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=getchar();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用法示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">short</span> b;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line">    scan(a),scan(b),scan(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出优化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of_print&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(__Type_of_print x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">'-'</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用法示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">short</span> b=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> c=<span class="number">3</span>;</span><br><span class="line">    print(a),<span class="built_in">putchar</span>(<span class="string">' '</span>),print(b),<span class="built_in">putchar</span>(<span class="string">' '</span>),print(c),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="黑科技（基于fread-fwrite）优化："><a href="#黑科技（基于fread-fwrite）优化：" class="headerlink" title="黑科技（基于fread/fwrite）优化："></a>黑科技（基于fread/fwrite）优化：</h2><p>其实这篇博客之前一直都是基于getchar和putchar函数的输入输出优化。直到2018年9月2日我在学校的一次模拟赛中O(n)算法被毒瘤出题人的数据卡爆，我才开始使用基于fread和fwrite函数的输入输出优化。同之前所说的一样，这里所定义的函数名均为之前的优化代码前加”_”的名字，即_scan和_print。</p>
<p>其实fread和fwrite有个缺点就是本地测样例比较麻烦（也有可能是我写的代码太蒟蒻了），而且<strong>采用_print函数后，你需要运行fsh函数！！！</strong></p>
<p>输入优化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>],*p1=buf,*p2=buf;</span><br><span class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">100000</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of__scan&gt;</span><br><span class="line"><span class="keyword">void</span> _scan(__Type_of__scan &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">    __Type_of__scan f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=gc();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=gc();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用法示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">short</span> b;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line">    _scan(a),_scan(b),_scan(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出优化：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">100000</span>],*pp=buf;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pp-buf==<span class="number">100000</span>)fwrite(buf,<span class="number">1</span>,<span class="number">100000</span>,<span class="built_in">stdout</span>),pp=buf;</span><br><span class="line">    *pp++=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> __Type_of__print&gt;</span><br><span class="line"><span class="keyword">void</span> _print(__Type_of__print x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;pc(<span class="string">'-'</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)_print(x/<span class="number">10</span>);</span><br><span class="line">    pc(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fsh</span><span class="params">()</span></span>&#123;fwrite(buf,<span class="number">1</span>,pp-buf,<span class="built_in">stdout</span>);pp=buf;&#125;</span><br></pre></td></tr></table></figure>

<p>用法示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">short</span> b=<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> c=<span class="number">3</span>;</span><br><span class="line">    _print(a),pc(<span class="string">' '</span>),fsh(),_print(b),pc(<span class="string">' '</span>),fsh(),_print(c),pc(<span class="string">'\n'</span>),fsh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="关于一次性输入输出多个数"><a href="#关于一次性输入输出多个数" class="headerlink" title="关于一次性输入输出多个数"></a>关于一次性输入输出多个数</h2><p><strong>警告：可变模板仅在开启 -std=c++11 或 -std=gnu++11 时可用</strong><br><strong>Warning:variadic templates only available with -std=c++11 or -std=gnu++11</strong>  </p>
<p>我们以普通版（基于getchar/putchar）优化的为例<br>下面是一个多输入加多输出的示例</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tpos f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=getchar();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=getchar();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos,<span class="keyword">typename</span>... Tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x,Tpos&amp;... X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(x),scan(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)<span class="built_in">putchar</span>(<span class="string">'-'</span>),x=-x;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)print(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop,<span class="keyword">typename</span>... Tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x,Tpop... X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(x),<span class="built_in">putchar</span>(<span class="string">' '</span>),print(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">short</span> b;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line">    scan(a,b,c);</span><br><span class="line">    print(a,b,c),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单来说，就是在scan函数的下面加上</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpos,<span class="keyword">typename</span>... Tpos&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">(tpos &amp;x,Tpos&amp;... X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan(x),scan(X...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在print函数的下面加上</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpop,<span class="keyword">typename</span>... Tpop&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(tpop x,Tpop... X)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    print(x),<span class="built_in">putchar</span>(<span class="string">' '</span>),print(X...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后调用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">scan(a,b,c);</span><br><span class="line">print(a,b,c),<span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br></pre></td></tr></table></figure>

<p>事实上，你也可以类比此普通版优化，推出黑科技优化的多输入输出<br>下面就是一个例子</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">100000</span>],*p1=buf,*p2=buf;</span><br><span class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,<span class="number">100000</span>,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpo_s&gt;</span><br><span class="line"><span class="keyword">void</span> _scan(tpo_s &amp;x)</span><br><span class="line">&#123;</span><br><span class="line">    tpo_s f=<span class="number">1</span>;x=<span class="number">0</span>;<span class="keyword">char</span> s=gc();</span><br><span class="line">    <span class="keyword">while</span>(s&lt;<span class="string">'0'</span>||s&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(s==<span class="string">'-'</span>)f=<span class="number">-1</span>;s=gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>(s&gt;=<span class="string">'0'</span>&amp;&amp;s&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+s-<span class="string">'0'</span>;s=gc();&#125;</span><br><span class="line">    x*=f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpo_s,<span class="keyword">typename</span>... Tpo_s&gt;</span><br><span class="line"><span class="keyword">void</span> _scan(tpo_s &amp;x,Tpo_s &amp;...X)</span><br><span class="line">&#123;</span><br><span class="line">    _scan(x),_scan(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100000</span>],*pp=buf;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pp-buf==<span class="number">100000</span>)fwrite(buf,<span class="number">1</span>,<span class="number">100000</span>,<span class="built_in">stdout</span>),pp=buf;</span><br><span class="line">    *pp++=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpo_p&gt;</span><br><span class="line"><span class="keyword">void</span> _print(tpo_p x)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;pc(<span class="string">'-'</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)_print(x/<span class="number">10</span>);</span><br><span class="line">    pc(x%<span class="number">10</span>+<span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fsh</span><span class="params">()</span></span>&#123;fwrite(buf,<span class="number">1</span>,pp-buf,<span class="built_in">stdout</span>);pp=buf;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpo_p,<span class="keyword">typename</span>... Tpo_p&gt;</span><br><span class="line"><span class="keyword">void</span> _print(tpo_p x,Tpo_p ...X)</span><br><span class="line">&#123;</span><br><span class="line">    _print(x),pc(<span class="string">' '</span>),_print(X...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">short</span> b;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line">    _scan(a,b,c);</span><br><span class="line">    _print(a,b,c),pc(<span class="string">'\n'</span>),fsh();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>事实上，这个也就是在_scan函数的下面加上</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpo_s,<span class="keyword">typename</span>... Tpo_s&gt;</span><br><span class="line"><span class="keyword">void</span> _scan(tpo_s &amp;x,Tpo_s &amp;...X)</span><br><span class="line">&#123;</span><br><span class="line">    _scan(x),_scan(X...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在print函数的下面加上</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> tpo_p,<span class="keyword">typename</span>... Tpo_p&gt;</span><br><span class="line"><span class="keyword">void</span> _print(tpo_p x,Tpo_p ...X)</span><br><span class="line">&#123;</span><br><span class="line">    _print(x),pc(<span class="string">' '</span>),_print(X...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后调用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">_scan(a,b,c);</span><br><span class="line">_print(a,b,c),pc(<span class="string">'\n'</span>),fsh();</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>科技</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U30206 【BZ游戏#1 草雉剑游戏（CZJ Game）】</title>
    <url>/blog/solution-u30206/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/U30206" target="_blank" rel="noopener">LuoguU30206</a>:</p>
<p>k=1：直接全部异或起来。</p>
<p>k=2：假设出现奇数次的是a和b，那么把所有数异或起来得到的就是s=a^b。</p>
<p>对每个二进制位维护一个数xw[i]，当读入一个x，x的第j位为1的时候，就把xw[j]^=x。 </p>
<p>对于s的最高位的1，那么一定是a和b之中，一个这一位为1，一个这一位为0。假设是第j位，那么xw[j]肯定就是其中一个数。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,k,xsum,xw[<span class="number">35</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,x;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        xsum^=x;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=<span class="number">31</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(x&amp;(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">                xw[j]^=x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,xsum);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">31</span>,x,y;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">            <span class="keyword">if</span>(xsum&amp;(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">            &#123;</span><br><span class="line">                x=xw[j],y=xsum^xw[j];</span><br><span class="line">                <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">                    swap(x,y);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x,y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U30211 【BZ游戏#6 纸壳箱游戏（ZKX Game）】</title>
    <url>/blog/solution-u30211/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/U30211" target="_blank" rel="noopener">LuoguU30211</a>:</p>
<p>DP+博弈论</p>
<p>限制一下取数，从一边取DP即可。</p>
<p>用f[i][j]表示该取i，上一次取了j个的最大得分，则因为所有块的权值都&gt;0，所以只要用2$\times $j和2$\times $j-1来更新答案就可以了，具体DP方程见代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans,a[<span class="number">2005</span>],f[<span class="number">2005</span>][<span class="number">2005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        a[i]+=a[i<span class="number">-1</span>],f[i][i]=a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i][j]=f[i][j<span class="number">-1</span>];</span><br><span class="line">     		<span class="keyword">if</span>(i&gt;=<span class="number">2</span>*j)</span><br><span class="line">             	f[i][j]=max(f[i][j],a[i]-f[i<span class="number">-2</span>*j][<span class="number">2</span>*j]);</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&gt;=<span class="number">2</span>*j)</span><br><span class="line">                f[i][j]=max(f[i][j],a[i]-f[i<span class="number">-2</span>*j+<span class="number">1</span>][<span class="number">2</span>*j<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,f[n][<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>【转载】练习Linux？其实你的Win10自带一个Ubuntu</title>
    <url>/blog/lgrb-Run-Ubuntu-On-Windows10/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><img src="http://cdn1.ihcr.top/1810144213.png-yuantu" alt="头图"></p>
<hr>
<blockquote>
<p>声明：本文为转载文章，转载自<a href="https://www.luogu.org/blog/asfr/Run-Ubuntu-On-Windows10" target="_blank" rel="noopener">洛谷日报#6</a>，原作者为韩程瑞。</p>
</blockquote>
<hr>
<h2 id="0x01-引言"><a href="#0x01-引言" class="headerlink" title="0x01 引言"></a>0x01 引言</h2><p>众所周知，尽管现在大部分学校的竞赛练习环境都是构建XP等Windows系操作系统，但是在CCF组织的一系列竞赛（如NOI）中，早已用上了NOI Linux这个Ubuntu操作系统的阉割版。<br><img src="http://cdn1.ihcr.top/1810135503.png-yuantu" alt="NOI竞赛的环境要求"><br>NOI竞赛的环境要求</p>
<p>或许大家对自己Windows环境下的Dev-C++、VSCode等都已熟识，但是当场景突然切换到Linux的时候，你会不会不知所措？</p>
<p>“想用Ctrl+C复制，结果退出了程序” “平时AC的程序模板到了Linux上就WA”……<br><img src="http://cdn1.ihcr.top/1810141552.png-yuantu" alt="平台差异（转自百度文库”NOIP标准评测系统及相关问题“）"><br>平台差异（转自百度文库”NOIP标准评测系统及相关问题“）</p>
<p>为了防止考场上出现此类尴尬情况，我们必须要提前熟悉下Linux系统的使用。</p>
<p>虽然官网已经放出了NOI Linux的ISO镜像，但是配置却相当麻烦，包括激活Vmware，用Vmware装系统开虚拟机等步骤，且NOI Linux默认自带图形界面，两个系统一起运行是低配党的噩梦。</p>
<p>Windows10作为微软的新一代操作系统，紧跟时代潮流，在一周年更新时推出了Linux子系统（WSL），可以供装不起Vmware等虚拟机的同学食用。</p>
<p>唯一的缺点就是不带离线评测系统，但是在强大的洛谷评测支撑下谁在乎呢……</p>
<p><strong>补充资料：何为Linux子系统（WSL）？(via 百度百科)</strong></p>
<p>Windows Subsystem for Linux（简称WSL）是一个为在Windows 10上能够原生运行Linux二进制可执行文件（ELF格式）的兼容层。它是由微软与Canonical公司合作开发，目标是使纯正的Ubuntu 14.04 “Trusty Tahr”映像能下载和解压到用户的本地计算机，并且映像内的工具和实用工具能在此子系统上原生运行。</p>
<p>WSL提供了一个微软开发的Linux兼容内核接口（不包含Linux代码），来自Ubuntu的用户模式二进制文件在其上运行。<br>此子系统起源于命运多舛的Astoria项目，其目的是允许Android应用运行在Windows 10 Mobile上。此功能组件从Windows 10 Insider Preview build 14316开始可用。</p>
<hr>
<h2 id="0x02-准备"><a href="#0x02-准备" class="headerlink" title="0x02 准备"></a>0x02 准备</h2><p>首先，你需要一个最新的Windows10操作系统，这点不必多说。</p>
<p>其次，你需要配置一下开发人员模式环境。<br>1.设置-&gt;更新与安全-&gt;开发人员模式框选-&gt;是<br><img src="http://cdn1.ihcr.top/1810142140.png-yuantu" alt="来，跟着箭头走"><br>来，跟着箭头走</p>
<p>2.控制面板-&gt;程序-&gt;启用和关闭Windows功能-&gt;框选“适用于Linux的Windows子系统”-&gt;确定-&gt;重启<br><img src="http://cdn1.ihcr.top/1810135346.png-yuantu" alt="自行忽略乱码"><br>给系统盘留下足够的空间，毕竟装好的Linux没法迁移。</p>
<p>这次演示我们会安装Ubuntu，因为NOI Linux正是Ubuntu的修改版。</p>
<p>只要学会了方法，你也可照葫芦画瓢，安装Windows应用商店中的其他子系统。</p>
<hr>
<h2 id="0x03-开搞"><a href="#0x03-开搞" class="headerlink" title="0x03 开搞"></a>0x03 开搞</h2><p>去Windows自带的应用商店，搜索“Ubuntu”，然后选第一个安装。 亦可打开<a href="https://www.microsoft.com/zh-cn/p/ubuntu/9nblggh4msv6" target="_blank" rel="noopener">https://www.microsoft.com/zh-cn/p/ubuntu/9nblggh4msv6</a></p>
<p>安装完后，打开Ubuntu，等待一段时间，让其自己配置，不久就会提示你设置用户名和密码。（这里看你喜好，推荐设置短点，毕竟本地环境不怕攻击） <strong>Linux区分大小写</strong><br><img src="http://cdn1.ihcr.top/1810145205.png-yuantu" alt="照图片来"><br>照图片来</p>
<p>一个纯净的Ubuntu系统安装完成了！</p>
<hr>
<h2 id="0x04-基础配置"><a href="#0x04-基础配置" class="headerlink" title="0x04 基础配置"></a>0x04 基础配置</h2><p>以下命令均可直接右键复制粘贴进窗口哦！<br><img src="http://cdn1.ihcr.top/1810145742.png-yuantu" alt=""><br>正如图片所示，这个系统纯净到连个编译器都没有，所以这一节来看看基础的环境配置。</p>
<p><strong>解锁root账户</strong></p>
<p>Ubuntu默认是把root账户锁住的，给刚刚的账户开放sudo权限。</p>
<p>在Linux的权限系统中，“sudo”正如“以管理员身份运行”，不声明就没法使用管理员权限。而“root”则是”Administrator“，直接解锁全部权限。</p>
<p>命令三连：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br><span class="line">sudo passwd <span class="comment">--unlock root</span></span><br><span class="line">sudo su</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn1.ihcr.top/1810151229.png-yuantu" alt=""><br><strong>Warning：如果跳过这一节，请在接下来每个命令前带上sudo！</strong></p>
<p><strong>更换为国内软件源</strong></p>
<p>Ubuntu默认的软件源在国外，我们可以换为国内的加快速度，如<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">清华TUNA的软件源</a>。 <del>（如果你在国外的话当我没说）</del></p>
<p>TUNA的源（这个Ubuntu是16.04LTS长期支持版的）</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"># 默认注释了源码镜像以提高 apt <span class="keyword">update</span> 速度，如有需要可自行取消注释</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"># 预发布软件源，不建议启用</span><br><span class="line"># <span class="keyword">deb</span> http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line"># <span class="keyword">deb</span>-src http<span class="variable">s:</span>//mirrors.tuna.tsinghua.edu.<span class="keyword">cn</span>/ubuntu/ xenial-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<p>使用的命令<strong>（需按上节指示进入root环境，否则请在每个命令前带上sudo）</strong>：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">cp /etc/apt/sources<span class="selector-class">.list</span> /etc/apt/sources<span class="selector-class">.list</span><span class="selector-class">.bak</span></span><br><span class="line">echo <span class="string">''</span> &gt; /etc/apt/sources.list</span><br><span class="line">nano /etc/apt/sources.list</span><br><span class="line">（将上文的源右键粘贴进去，编辑完后按Ctrl+X，再按Y和回车）</span><br><span class="line">apt update &amp;&amp; apt upgrade -y</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn1.ihcr.top/1810153131.png-yuantu" alt=""><br><strong>安装中文环境</strong></p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">apt <span class="keyword">install </span> language-pack-zh-han* -y</span><br><span class="line">locale-gen zh_CN.GB18030 &amp;&amp; locale-gen zh_CN.GB2312 %% locale-gen zh_CN.UTF8</span><br><span class="line"><span class="comment">#中文字体，别忘了同意eula</span></span><br><span class="line">apt <span class="keyword">install </span>fontconfig -y</span><br><span class="line">sudo apt <span class="keyword">install </span>ttf-mscorefonts-<span class="keyword">installer </span>-y</span><br><span class="line"><span class="comment">#下面的再执行一遍以防万一</span></span><br><span class="line">sudo apt <span class="keyword">install </span>-y --force-yes --no-<span class="keyword">install-recommends </span>fonts-wqy-microhei</span><br><span class="line">sudo apt <span class="keyword">install </span>-y --force-yes --no-<span class="keyword">install-recommends </span>ttf-wqy-zenhei</span><br><span class="line">sudo dpkg-reconfigure locales</span><br></pre></td></tr></table></figure>

<p>使用<strong>sudo dpkg-reconfigure locales</strong>进入菜单，选择<strong>zh_CN.UTF8</strong>回车，下一个菜单中也是选它打回车。<br><img src="http://cdn1.ihcr.top/1810154358.png-yuantu" alt=""></p>
<p><img src="http://cdn1.ihcr.top/1810154428.png-yuantu" alt=""><br>之后关上Ubuntu重开一遍登录，是不是变中文了？</p>
<p>再用下列命令，把man帮助页替换为中文：<a href="https://blog.csdn.net/qq_14989227/article/details/72954523" target="_blank" rel="noopener">via</a></p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">apt install manpages-zh</span><br><span class="line">vi /etc/manpath.config</span><br><span class="line">:<span class="number">1</span>,<span class="variable">$s</span>#/usr/share/man#/usr/share/man/zh_CN#g</span><br><span class="line">:wq</span><br></pre></td></tr></table></figure>

<p>可以用<strong>man help</strong>测试下。</p>
<p><strong>安装编译环境</strong></p>
<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">apt install build-essential vim ddd gdb fpc emacs gedit anjuta lazarus -<span class="built_in">y</span></span><br><span class="line">wget http:<span class="comment">//download.noi.cn/T/noi/GUIDE-1.0.2-ubuntu.tar</span></span><br><span class="line">tar -xvf GUIDE-1.0.2-ubuntu.tar</span><br><span class="line"><span class="keyword">cd</span> GUIDE-1.0.2-ubuntu</span><br><span class="line">./install.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p>这是基础的+NOI官方要求环境，如有需要可以用<strong>apt install 程序名</strong>来安装别的。 若想安装其他版本可以参考下<a href="https://www.cnblogs.com/EasonJim/p/7144017.html" target="_blank" rel="noopener">这个</a></p>
<p>来个程序玩玩：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">root<span class="symbol">@DESKTOP</span><span class="number">-3</span>FQ0AR5:/home/hanlin<span class="meta"># nano cpuid.cpp</span></span><br><span class="line">root<span class="symbol">@DESKTOP</span><span class="number">-3</span>FQ0AR5:/home/hanlin<span class="meta"># g++ -Wall cpuid.cpp -o cpuid</span></span><br><span class="line">root<span class="symbol">@DESKTOP</span><span class="number">-3</span>FQ0AR5:/home/hanlin<span class="meta"># ./cpuid</span></span><br><span class="line">AMD Ryzen <span class="number">5</span> <span class="number">1400</span> Quad-Core Processor</span><br></pre></td></tr></table></figure>

<p><strong>Tips：Linux环境下可执行文件可不带扩展名，实现方式看上方命令行</strong></p>
<p><strong>Update：在正式测试编译环境下，命令行可能有所不同，具体请看 0x06 附言 部分</strong></p>
<hr>
<h2 id="0x05-进阶操作"><a href="#0x05-进阶操作" class="headerlink" title="0x05 进阶操作"></a>0x05 进阶操作</h2><p><strong>安装图形环境，并使用远程桌面连接</strong><br>推荐图形环境用xfce4，不臃肿。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install xfce4 -y</span><br><span class="line"><span class="meta">#</span><span class="bash">或使用 apt install xubuntu-desktop -y</span></span><br><span class="line"><span class="meta">#</span><span class="bash">xubuntu安装的软件多，基础环境可用第一种</span></span><br></pre></td></tr></table></figure>

<p>图形环境是个大头，因此要多等会，静静等待下载解包。</p>
<p>下面配置xrdp：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt install xrdp -y</span><br><span class="line">echo <span class="string">"xfce4-session"</span> &gt;~/.xsession</span><br><span class="line">service xrdp restart</span><br></pre></td></tr></table></figure>

<p>为了防止和你计算机本来带的远程桌面冲突，最好换一下端口。<br><img src="http://cdn1.ihcr.top/1810164401.png-yuantu" alt=""><br>不换端口的结果</p>
<p>运行命令<strong>nano /etc/xrdp/xrdp.ini</strong>，把<strong>port=3389</strong>改为别的（如<strong>port=3390</strong>），然后保存即可。<br><img src="http://cdn1.ihcr.top/1810164730.png-yuantu" alt=""><br>运行<strong>service xrdp restart</strong>，然后去开始菜单，用_localhost:你配置的端口_来访问。<br><img src="http://cdn1.ihcr.top/1810165033.png-yuantu" alt=""></p>
<p><img src="http://cdn1.ihcr.top/1810170141.png-yuantu" alt=""></p>
<p><strong>补充：使用Xming连接</strong></p>
<p>有网友说，这个可以用Xming连接，那我们就来研究一下。</p>
<p><strong>客户端：安装Xterm</strong></p>
<p>我们进入Ubuntu环境，安装xterm：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">apt-<span class="builtin-name">get</span> install xterm -y</span><br></pre></td></tr></table></figure>

<p><strong>服务端：下载Xming Server</strong><br>去<a href="https://sourceforge.net/projects/xming/下载最新的Xming" target="_blank" rel="noopener">https://sourceforge.net/projects/xming/下载最新的Xming</a> Server，然后一路安装：<br><img src="http://cdn1.ihcr.top/1816113446.png-yuantu" alt=""></p>
<p>如果你把Launch Xming框点掉了，记得去开始菜单再打开：<br><img src="http://cdn1.ihcr.top/1816113804.png-yuantu" alt=""></p>
<p>别忘了！</p>
<p>之后再回到Ubuntu，键入如下指令：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">DISPLAY</span>=:<span class="number">0</span> xterm</span><br></pre></td></tr></table></figure>

<p><strong>Duang！</strong><br><img src="http://cdn1.ihcr.top/1816113957.png-yuantu" alt=""></p>
<p><del>不过貌似只支持命令行……这时上一种方法的优势就显而易见了</del></p>
<p>如果你和我一样使用了xfce4，在弹出的窗口中使用如下命令激活xfce4：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xfce4-session</span><br></pre></td></tr></table></figure>

<p><img src="http://cdn1.ihcr.top/1816114502.png-yuantu" alt=""><br>不过这是什么效果……（<strong>在Xming中使用 Ctrl + C 就可以退出这个鬼畜界面）</strong><br><img src="http://cdn1.ihcr.top/1816120406.png-yuantu" alt=""></p>
<p>达成成就：Windows+Linux二合一</p>
<p>感受一下两个版本融合的感觉：<br><img src="http://cdn1.ihcr.top/1816125110.png-yuantu" alt=""></p>
<p><strong>与Windows内原硬盘分区交互</strong></p>
<p>硬盘分区作为文件夹在_ /mnt/ _里放着，因此可以直接交互，比如说直接编译个二进制文件，或者往Ubuntu里传文件什么的……</p>
<p>具体演示：<br><img src="http://cdn1.ihcr.top/1816115716.png-yuantu" alt=""><br>*<em>这里也可以建立一些Windows建不了的文件，如带点文件夹 *</em><br><img src="http://cdn1.ihcr.top/1816115945.png-yuantu" alt=""></p>
<p><strong>Enjoy It!</strong></p>
<hr>
<h2 id="0x06-附言-补充材料"><a href="#0x06-附言-补充材料" class="headerlink" title="0x06 附言-补充材料"></a>0x06 附言-补充材料</h2><p>以下的内容均为进入备选区后更新。</p>
<p>洛谷的编译参数 <a href="https://www.luogu.org/wiki/show?name=%E5%B8%AE%E5%8A%A9" target="_blank" rel="noopener">via</a></p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"> C：gcc -DONLINE_JUDGE -Wall -fno-asm -std=c99 -lm</span></span><br><span class="line"><span class="ruby">- C++：g++ -DONLINE_JUDGE -Wall -fno-asm -std=c++<span class="number">98</span> </span></span><br><span class="line"><span class="ruby">- C++<span class="number">11</span>：g++ -DONLINE_JUDGE -Wall -fno-asm -std=c++<span class="number">11</span></span></span><br><span class="line"><span class="ruby">- Pascal：ppcx64 -dONLINE_JUDGE</span></span><br></pre></td></tr></table></figure>

<p>常见“我在本地/xxOJ AC了、洛谷却不过”的原因 <a href="https://www.luogu.org/wiki/show?name=%E5%B8%AE%E5%8A%A9" target="_blank" rel="noopener">via</a></p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">Linux中换行符是<span class="string">'\n'</span>而Windows中是<span class="string">'\r\n'</span>（多一个字符），有些数据在Windows中生成，而在洛谷评测机Linux环境下评测。这种情况在字符串输入中非常常见。</span><br><span class="line"></span><br><span class="line">评测系统建立在Linux下，可能由于使用了Linux的保留字而出现CE，但在Windows下正常。</span><br><span class="line"></span><br><span class="line">Linux对内存的访问控制更为严格，因此在Windows上可能正常运行的无效指针或数组下标访问越界，在评测系统上无法运行。</span><br><span class="line"></span><br><span class="line">严重的内存泄露的问题很可能会引起系统的保护模块杀死你的进程。因此，凡是使用malloc(或calloc,realloc,<span class="keyword">new</span>)分配而得的内存空间，请使用free(或<span class="keyword">delete</span>)完全释放。</span><br><span class="line"></span><br><span class="line">数据可能真的有问题。但是如果不止一个人通过了这道题，那最好不要怀疑是数据的锅。</span><br></pre></td></tr></table></figure>

<p>如有写得不好的地方，还请dalao多多指正！ <strong>乱码是因为我用的预览体验系统……不过用正式版也可以了！</strong></p>
<hr>
<h2 id="0x07-FAQ"><a href="#0x07-FAQ" class="headerlink" title="0x07 FAQ"></a>0x07 FAQ</h2><p>如何在子系统下进行……？</p>
<p>该怎么用怎么用，可以用自带命令行，实在不行参考教程唤醒图形界面。 比如说vim，在命令行中键入<strong>man vim</strong>，会给出一份详尽的使用方法。 亦可使用<strong>vim –help</strong>。</p>
<p>本文仅是对WSL的一个普及，如有疑问的话……不会百度吗？</p>
<p>占用量大？ Sorry，这个系统和Windows10共用Host，所以理论上是比虚拟机占用小的。 而且只要别装太多应用，应该还是可以带动的。</p>
<hr>
<h2 id="0x08-参考资料"><a href="#0x08-参考资料" class="headerlink" title="0x08 参考资料"></a>0x08 参考资料</h2><p>这里列举了所有文中提到的链接，以便查阅。</p>
<p>1.<a href="https://wenku.baidu.com/view/8246d96cdd36a32d72758143.html" target="_blank" rel="noopener">NOIP标准评测系统及相关问题 ,smart0326,2014-05-19,百度文库</a></p>
<p>2.<a href="https://baike.baidu.com/item/wsl/20359185" target="_blank" rel="noopener">WSL,百度百科</a></p>
<p>3.<a href="https://blogs.windows.com/buildingapps/2016/03/30/run-bash-on-ubuntu-on-windows/#cie8WdR3uSjgR5Ru.97" target="_blank" rel="noopener">Run Bash on Ubuntu on Windows,Mike Harsh,2016-05-30,Windows Blog</a></p>
<p>4.<a href="https://docs.microsoft.com/zh-cn/windows/wsl/about" target="_blank" rel="noopener">Windows Subsystem for Linux Documentation,MSDN</a></p>
<p>5.<a href="http://www.noi.cn/2016-11-08-03-42-01" target="_blank" rel="noopener">NOI系列活动标准竞赛环境,2016-11-08,NOI官网</a></p>
<p>6.<a href="https://www.microsoft.com/zh-cn/p/ubuntu/9nblggh4msv6" target="_blank" rel="noopener">购买Ubuntu,Microsoft Store</a></p>
<p>7.<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">Ubuntu 镜像使用帮助,清华TUNA</a></p>
<p>8.<a href="https://blog.csdn.net/qq_14989227/article/details/72954523" target="_blank" rel="noopener">ubuntu的man命令帮助如何设置中文版,Frank看庐山,2017-06-09</a></p>
<p>9.<a href="https://www.luogu.org/wiki/show?name=%E5%B8%AE%E5%8A%A9" target="_blank" rel="noopener">帮助,lin_toto,2017-04-08,洛谷百科</a></p>
<p>10.<a href="https://sourceforge.net/projects/xming/" target="_blank" rel="noopener">Xming X Server for Windows,SourceForge</a></p>
<hr>
]]></content>
      <tags>
        <tag>洛谷日报</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T27533 【[开昕生日愚人题#6]无规律数列】</title>
    <url>/blog/solution-t27533/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T27533" target="_blank" rel="noopener">LuoguT27533</a>:</p>
<p>拿到这组数蒙了？为了方便大家找规律，我在出样例时特意给大家又多往后延伸了一位n==6时的样例。</p>
<p>0pts：知道我的题【U22412 <a href="https://www.luogu.org/problemnew/show/U22412" target="_blank" rel="noopener">PP游戏#5 种树游戏（Tree Game）</a>】的朋友可能会根据$3\leq n \leq 6$时的数列$\begin{Bmatrix}1&amp;1&amp;2&amp;3&amp; \cdots \end{Bmatrix}$以为是我PP游戏#5中n==2时的斐波那契数列然后一看$n\leq16$就打表输出，结果就全WA了。</p>
<p>40pts：在这里科普的是，这个数列真的是个毫无规律的数列，但也并不是完全没有，真正的做法是百度一下这个数列，然后就出来了一个<a href="http://v.youku.com/v_show/id_XMTMxNzQ1Nzg2OA==.html" target="_blank" rel="noopener">视频链接</a>，在这个视频中，国外YouTube的numberphile数学家讲解了这个数列是素纽结的结数序列，并把这个数列给到了$n\leq10$时的值，打表提交即可得到40pts。</p>
<p>70pts：显然这题数据点是$7\leq n\leq16$，所以发动广大网友的力量，我们成功的在某贴吧中找到了$n\leq13$时的值，打表提交即可得到70pts。</p>
<p>100pts：题解到这里，不仅会有人会问，都已经翻遍网络了，还没有AC，PM你的后3个点是不是故意不让人过的所以乱造的数据啊？这里我要回复：不，那是因为你没有访问维基百科找<a href="https://en.wikipedia.org/wiki/Prime_knot" target="_blank" rel="noopener">Prime_knot素纽结</a>，这才是真正的答案来源，可以看到连维基百科都只把数列给到$n\leq16$，说明这是多么的无规律，所以<del>毒瘤的</del>我当然不会放过了，最后打表提交即可AC。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T27523 【[开昕生日愚人题#5]三角圆函数】</title>
    <url>/blog/solution-t27523/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T27523" target="_blank" rel="noopener">LuoguT27523</a>:</p>
<p>由于本题比较复杂，不再详细多少分对应什么问题或算法了，因为会出的错误千奇百怪，这其实是由于对“三角函数”的概念不是非常具体，我在题目中也说了，“三角函数”又叫“圆函数”。</p>
<p>这里要科普下：三角函数可不止包括sin、cos和tan，还不止包括cot、sec和csc，更不止包括asin、acos、atan、acot、asec和acsc。</p>
<p>有人会问了，那还有什么，其实还有很多，这题里面还有双曲三角函数sinh、cosh…及其反函数asinh、acosh…当然这题我皮了一下，还写了他们的全称，sine、tangent、secant、arc（例如arcsine）、hyperbolic（例如hyperbolicsine）。所以打字符表，写函数即可AC。</p>
<p>因为正矢（versin、vercosin）、余矢（coversin、covercosin）、半正矢（haversin、havercosin）、半余矢（hacoversin、hacovercosin）、外正割（exsec）和外余割（excsc）看完百科后太好推了，所以我就没有出这组数据。</p>
<p>最后附赠一段本题出题的参考链接：</p>
<p><a href="https://baike.baidu.com/item/%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0/1652457" target="_blank" rel="noopener">三角函数</a> | <a href="https://baike.baidu.com/item/%E5%8F%8D%E4%B8%89%E8%A7%92%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">反三角函数</a></p>
<p><a href="https://baike.baidu.com/item/%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">双曲三角函数</a> | <a href="https://baike.baidu.com/item/%E5%8F%8D%E5%8F%8C%E6%9B%B2%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">反双曲三角函数</a></p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T27522 【[开昕生日愚人题#4]二项式展开】</title>
    <url>/blog/solution-t27522/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T27522" target="_blank" rel="noopener">LuoguT27522</a>:</p>
<p>此题用了二项式定理，不知道可自行百度。</p>
<p>20pts：就是表面上看的输出展开的字符。</p>
<p>100pts：5以内杨辉三角数可以按$11^n$计算？$n\leq4$是没错，但是n==5时为161051，显然不是，那是不是我写错了呢？当然不是。所以你需要做的是按照这个规律输出。当然显然是没法按照$11^n$乘算的，所以我们只需要先算出杨辉三角数，然后再从后往前传大于10的数即可，多于总数时要多输出一个常数。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T27521 【[开昕生日愚人题#3]字符串的值】</title>
    <url>/blog/solution-t27521/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T27521" target="_blank" rel="noopener">LuoguT27521</a>:</p>
<p>简单的题？非也非也。</p>
<p>6pts：按正常题意输出几个字符之和。</p>
<p>74pts：字符中有几个例如’NUL’、’TAB’、’EOF’之类神奇的单字符，读到这些要输出对应的值，例如’NUL’是0，则读到”NUL”时应输出0。加上6pts的判断，即可得到84pts。</p>
<p>100pts：看说明下面好像白的地方比较多，用审查元素可以看到这张图片<img src="https://cdn.luogu.org/upload/pic/17460.png" alt="误差在0.000001内即可通过">，它附有一段说明：“误差在0.000001内即可通过”，这是怎么回事呢？在math.h库中，存在13个已定义的常数，例如M_E，M_PI，M_PI_2之类的常数，所以在读到时要输出值”M_E”，要输出小数点后6位以内对应的值2.718282。再加上84pts的程序，就可以得到100pts。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T27516 【[开昕生日愚人题#2]低级计算器】</title>
    <url>/blog/solution-t27516/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T27516" target="_blank" rel="noopener">LuoguT27516</a>:</p>
<p>本道题是所有这6题中最难的一道，因为为了愚人，让人觉得简单而放到了第二题的位置。</p>
<p>60pts：写出多元一次方程组求解代码。</p>
<p>100pts：注意在题目的说明里有两张图片<img src="https://cdn.luogu.org/upload/pic/17457.png" alt="+、-">)和<img src="https://cdn.luogu.org/upload/pic/17459.png" alt="*、&amp;">，这里的两张图片用审查元素可以看到说明分别是“<code>+、-</code>”和“<code>*、&amp;</code>”，而用到<code>*</code>和<code>&amp;</code>的只有<code>C++</code>中的指针，所以在60pts的代码基础上加上指针的判断即可AC。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 T27508 【[开昕生日愚人题#1]以前的版本】</title>
    <url>/blog/solution-t27508/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/T27508" target="_blank" rel="noopener">LuoguT27508</a>:</p>
<p>本题所指的以前的版本是指Minecraft的以前的版本。数字ID指的是1.7及之前的版本，当时使用数字ID，之后的版本则使用“minecraft:xxx”的方式表示ID，其实物品附加参数不为0的ID是一样的，所以说明里的那句是为了提示而写的。</p>
<p>0pts：打表使用“Minecraft”或“：”输出</p>
<p>98pts：没有打ID为0时的表。</p>
<p>100pts：避开上述错误打50以内的表即可。</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U23374 【PP游戏#6 矩阵游戏（Matrix Game）】</title>
    <url>/blog/solution-u23374/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/U23374" target="_blank" rel="noopener">LuoguU23374</a>:</p>
<p>我在小学时订阅了一本杂志叫《趣味数学》（免费打个广告），这杂志里面就是讲了样例里面的这么个矩阵。他所讲的故事背景是一个人要吃火鸡，但是火鸡不愿意，于是他和火鸡打赌，要是火鸡按照规则选择数后加和为一个数，就让火鸡被吃，火鸡同意了，然后。。。就没有然后了，因为之后火鸡就被吃了。</p>
<p>下面进入正题，如何生成一个这样的矩阵呢？显然有多解，所以我写了个SPJ，为了方便我的SPJ，我出题时，限定了0的所在位置。</p>
<p><img src="https://cdn.luogu.org/upload/pic/17539.png" alt=""></p>
<p>然后我们要做的是在该行该列其他位置填数使其和为所要值，就好像是样例#1中的51。当然数是随意的了。</p>
<p><img src="https://cdn.luogu.org/upload/pic/17540.png" alt=""></p>
<p>然后其他格子用横行数列填好的数之和填就行，例如左上角18=13+5。</p>
<p><img src="https://cdn.luogu.org/upload/pic/17541.png" alt=""></p>
<p>同理可按步生成样例#2的数。</p>
<p><img src="https://cdn.luogu.org/upload/pic/17542.png" alt=""></p>
<p><img src="https://cdn.luogu.org/upload/pic/17543.png" alt=""></p>
<p><img src="https://cdn.luogu.org/upload/pic/17544.png" alt=""></p>
<p>然后就是愉快的贴代码了~</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,bas,mor;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">randomint</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (rand()*<span class="number">32768</span>+rand())%(r-l)+l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 	freopen("matrix.in","r",stdin);</span></span><br><span class="line"><span class="comment">// 	freopen("matrix.out","w",stdout);</span></span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;x,&amp;y);</span><br><span class="line">    bas=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=x)a[i][y]=randomint(<span class="number">1</span>,bas/(n-i+<span class="number">1</span>)),bas-=a[i][y];</span><br><span class="line">        <span class="keyword">if</span>(i!=y)a[x][i]=randomint(<span class="number">1</span>,bas/(n-i+<span class="number">1</span>)),bas-=a[x][i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">1</span>)a[<span class="number">1</span>][y]+=bas;</span><br><span class="line">    <span class="keyword">else</span> a[n][y]+=bas;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j!=y)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i][j]=a[i][y]+a[x][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    a[x][y]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>哈哈，下面放彩蛋版（SPJ的返回话不同）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,x,y,bas,mor;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 	freopen("matrix.in","r",stdin);</span></span><br><span class="line"><span class="comment">// 	freopen("matrix.out","w",stdout);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;x,&amp;y);</span><br><span class="line">    a[x][y]=<span class="number">0</span>;</span><br><span class="line">    bas=m/(n+n<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">if</span>((n+n<span class="number">-2</span>)*bas!=m)mor=m-(n+n<span class="number">-2</span>)*bas;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=x)a[i][y]=bas;</span><br><span class="line">        <span class="keyword">if</span>(i!=y)a[x][i]=bas;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">1</span>)a[<span class="number">1</span>][y]+=mor;</span><br><span class="line">    <span class="keyword">else</span> a[n][y]+=mor;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i!=x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j!=y)</span><br><span class="line">                &#123;</span><br><span class="line">                    a[i][j]=a[i][y]+a[x][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>题解 U22412 【PP游戏#5 种树游戏（Tree Game）】</title>
    <url>/blog/solution-u22412/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.luogu.org/problemnew/show/U22412" target="_blank" rel="noopener">LuoguU22412</a>:</p>
<p>这是我一次晚自习无聊翻数学必修五书时看到了一张图，我觉得很好玩就延伸了以下找到了一个规律。</p>
<p><img src="https://cdn.luogu.org/upload/pic/16534.png" alt=""></p>
<p>首先，对于n==1时的情况输出$2^{n-1}$，因为每个枝干每年都会分成两个枝干，所以说输出$2^{n-1}$。<br>于是就有以下代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,m<span class="number">-1</span>)));</span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>我们再看样例，样例给的n=2时，列出的每年的枝干数$a$为</p>
<p>$\begin{matrix}1&amp;1&amp;2&amp;3&amp;5&amp;\cdots \end{matrix}$</p>
<p>所以很明显，这是一个斐波那契数列，满足规律$a_i=\sum_{j=i-2}^{i+1}a_j$或者说是$a_i=a_{i-1}+a_{i-n}$。</p>
<p>据此，我们再画出n=3、n=4的图，得到两组数</p>
<p>$\begin{matrix}1&amp;1&amp;1&amp;2&amp;3&amp;4&amp;6&amp;9&amp;13&amp;19&amp;28&amp;41&amp;60&amp;88&amp;129&amp;\cdots\1&amp;1&amp;1&amp;1&amp;2&amp;3&amp;4&amp;5&amp;7&amp;10&amp;14&amp;19&amp;26&amp;36&amp;50&amp;\cdots\end{matrix}$</p>
<p>仔细观察这些数，按规律1，n=3时，每隔1位，连取3位加和（例如19=4+6+9）；n=4时，每隔2位，连取4位加和（例如19=3+4+5+7）。</p>
<p>因此我们不难根据规律1得到以下递推式：</p>
<p>$a_i=\sum_{j=i-2\times n+2}^{i-n+1}a_j$</p>
<p>下面进行简单证明：每隔枝干长n年后会和之前n-2前的n的情况一模一样，在这n年间，情况相同，所以连取n个加和。</p>
<p>写成程序后代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">1e6</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,p;</span><br><span class="line"><span class="keyword">int</span> a[maxm];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,m<span class="number">-1</span>)));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//n==1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[m]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//m&lt;=n时只有一个主干</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=(i-n+<span class="number">1</span>)%p;</span><br><span class="line">    &#125;<span class="comment">//这里如果采用递推式下标会越界，所以要手动赋值，庆幸的是这里的数很有规律很好写。</span></span><br><span class="line">    <span class="keyword">if</span>(m&lt;=<span class="number">2</span>*n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[m]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>*n+<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i<span class="number">-2</span>*n+<span class="number">2</span>;j&lt;=i-n+<span class="number">1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[i]+=a[j];</span><br><span class="line">            a[i]%=p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//递推式写法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然，这种规律算法的时间复杂度为$\mathit{O(nm)}$，如果我们还想更优，我们就需要利用规律2，n=3时，取前第1位和前第3位加和（例如19=6+13）；n=4时，取前第1位和前第4位加和（例如19=5+14）。</p>
<p>因此我们不难根据规律2得到以下递推式：</p>
<p>$a_i=a_{i-1}+a_{i-n}$</p>
<p>下面进行简单证明：上一年的枝干长一年后会相当于长出n年前的一个树，故为此。</p>
<ul>
<li>我们也可以利用之前的那个公式用$a_i-a_{i-1}$即可得到这个公式</li>
</ul>
<p>写成程序后代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">1e6</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,p;</span><br><span class="line"><span class="keyword">int</span> a[maxm];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(<span class="keyword">int</span>)(<span class="built_in">pow</span>(<span class="number">2</span>,m<span class="number">-1</span>)));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//n==1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m&lt;=n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[m]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="comment">//m&lt;=n时只有一个主干</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n+<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=(i-n+<span class="number">1</span>)%p;</span><br><span class="line">    &#125;<span class="comment">//这里其实可以采用加和式，但是因为是前代码改的所以懒得再写了。</span></span><br><span class="line">    <span class="keyword">if</span>(m&lt;=<span class="number">2</span>*n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[m]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>*n+<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=a[i<span class="number">-1</span>]+a[i-n];</span><br><span class="line">        a[i]%=p;</span><br><span class="line">    &#125;<span class="comment">//加和式写法</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>恩，对规律找规律，有趣的一道规律题，数学也是很好玩的嘛O(∩_∩)O~</p>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/blog/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-tag-hint@0.2.1/css/hint.min.css"><link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>WOW!你没有看错，这个是HA省大蒟蒻Peter_Matthew的博客。。。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello,world!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio,h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Hello,world!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">javascript: <span class="built_in">document</span>.write(<span class="string">"Hello,world!"</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">printfn <span class="string">"Hello,world!"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">? <span class="string">"Hello,world!"</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@echo Hello,world!</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Hello,world!"</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span></span><br><span class="line">    writeln(<span class="string">'Hello,world!'</span>);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span><span class="params">()</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">        System.Console.WriteLine(<span class="string">"Hello,world!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<blockquote>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_80x15.png" alt="知识共享许可协议"></a></p>
<p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="/pic/license/BY-NC-SA_88x31.png" alt="知识共享许可协议"></a></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p>
</blockquote>
]]></content>
  </entry>
</search>
