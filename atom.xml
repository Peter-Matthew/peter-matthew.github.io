<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Peter_Matthew的博客</title>
  
  <subtitle>A Konjac in Province H.A.&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://williampetermatthew.github.io/"/>
  <updated>2019-02-14T13:31:00.742Z</updated>
  <id>https://williampetermatthew.github.io/</id>
  
  <author>
    <name>William Peter Matthew</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>致我即将退出的信息竞赛</title>
    <link href="https://williampetermatthew.github.io/blog/To-The-Informatics-Olympiad-Which-I-Am-About-To-Quit/"/>
    <id>https://williampetermatthew.github.io/blog/To-The-Informatics-Olympiad-Which-I-Am-About-To-Quit/</id>
    <published>2019-04-20T06:28:10.000Z</published>
    <updated>2019-02-14T13:31:00.742Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Error:Time is not correct!!!" />    <label for="pass">Error:Time is not correct!!!</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Error:Time is not correct!!!
    
    </summary>
    
      <category term="日志" scheme="https://williampetermatthew.github.io/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日志" scheme="https://williampetermatthew.github.io/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客使用教程</title>
    <link href="https://williampetermatthew.github.io/blog/Blog-Hexo/"/>
    <id>https://williampetermatthew.github.io/blog/Blog-Hexo/</id>
    <published>2019-03-02T00:11:18.000Z</published>
    <updated>2019-03-02T03:30:56.871Z</updated>
    
    <content type="html"><![CDATA[<ul><li>为什么使用Hexo？</li><li>其实你想使用哪个使用哪个，只不过我个人觉得Hexo比较方便。</li><li>优点：灵活度高、主题丰富、插件丰富、资瓷Markdown和LaTeX。</li><li>缺点：要求有一定的计算机初阶知识水平，源码包含大量外文注释。</li></ul><h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><p>必不可少的有</p><ul><li><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node.js</a>（可以使用命令<code>node -v</code>查看版本）  </li><li><img src="https://williampetermatthew.github.io/pic/Blog-Hexo01.png" alt="Node.js">  </li><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git</a>（可以使用命令’git version’查看版本）</li><li><img src="https://williampetermatthew.github.io/pic/Blog-Hexo02.png" alt="Git"><br>这些是生成博客的必要软件</li></ul><p>可选的有</p><ul><li><a href="https://notepad-plus-plus.org/download/" target="_blank" rel="noopener">Notepad++</a>  </li><li><img src="https://williampetermatthew.github.io/pic/Blog-Hexo04.png" alt="Notepad++"><br>这个是为了编写方便使用的软件，不推荐使用Windows自带的记事本和写字板编写文件。如果你手上有其他多功能文本编辑器，当然也可以使用。</li></ul><blockquote><p>注意：如果你选择使用Notepad++，应该在安装Git时将编辑器选择<code>Use Notepad++ as Git&#39;s default editor</code>。<br><img src="https://williampetermatthew.github.io/pic/Blog-Hexo03.png" alt="DefaultEditor">  </p></blockquote><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>新建一个博客目录文件夹，然后右键文件夹中的空白处，选择<code>Git Bash Here</code>。<br><img src="https://williampetermatthew.github.io/pic/Blog-Hexo05.png" alt=""></p><p>等到出现以 <code>$</code> 开头的提示表示可以键入命令后，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i -g hexo</span><br></pre></td></tr></table></figure></p><p>即可安装Hexo。</p><blockquote><p>请注意：所有输入命令前的<code>$</code>，只是为了表示是在Git Bash下执行的命令，实际输入时并不需要输入。</p></blockquote><p>安装完后，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>等待初始化文件夹。初始化成功后，你会看到很多文件和文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">└Hexo&lt;-博客目录</span><br><span class="line"> ├node_modules&lt;-插件目录（依赖包）</span><br><span class="line"> │└...</span><br><span class="line"> ├scaffolds&lt;-博客模板文件</span><br><span class="line"> │├draft.md</span><br><span class="line"> │├page.md</span><br><span class="line"> │└post.md</span><br><span class="line"> ├source&lt;-生成博客时的根目录</span><br><span class="line"> │└_posts&lt;-博客目录</span><br><span class="line"> │ └hello-world.md&lt;-初始示例博客文件</span><br><span class="line"> ├themes&lt;-主题文件夹</span><br><span class="line"> │└landscape&lt;-默认主题</span><br><span class="line"> │ └...</span><br><span class="line"> ├.gitignore&lt;-gitignore文件，用于git上传时使用</span><br><span class="line"> ├_config.yml&lt;-博客主配置文件</span><br><span class="line"> ├db.json&lt;-source解析文件</span><br><span class="line"> └package.json&lt;-项目所需模块项目的配置信息</span><br></pre></td></tr></table></figure><h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p>输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><blockquote><p>如果提示不存在此指令，请输入以下指令安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i hexo-server</span><br></pre></td></tr></table></figure></p></blockquote><p>然后打开浏览器，输入<code>http://localhost:4000</code>，即可预览博客的样子。</p><p>如果要关闭，按 Ctrl+C 即可关闭。</p><blockquote><p>如果你打开此地址看不到你的博客，存在一种情况是你安装的软件（例如福昕PDF阅读器）占用了你的4000端口，此时应该切换端口，例如5000。此时应该输入下方指令切换。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 5000</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h2 id="传到平台"><a href="#传到平台" class="headerlink" title="传到平台"></a>传到平台</h2><p>下面推荐几个平台</p><ul><li><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>（强力推荐）<ul><li>优点：平台成立较早，设施完善，有微软收购的支持，全球的开发者均在此</li><li>缺点：主语言为英文，且国内访问较慢。</li></ul></li><li><del><a href="https://coding.net/" target="_blank" rel="noopener">Coding</a></del>（已被腾讯收购，建议直接注册腾讯云开发者平台）<ul><li><del>优点：国内国外访问均快，设施较为完善。</del></li><li><del>缺点：功能限制过大，服务器容易宕机</del></li></ul></li><li><a href="https://dev.tencent.com/" target="_blank" rel="noopener">TencentDev</a><ul><li>优点：腾讯服务器强大，国内国外访问均快</li><li>缺点：腾讯功能限制过大</li></ul></li><li><a href="https://gitee.com/" target="_blank" rel="noopener">Gitee</a><ul><li>优点：与GitHub类似，但国内访问速度快，而且支持GitHub项目直接导入</li><li>缺点：设施不太完善。<h3 id="提前说明"><a href="#提前说明" class="headerlink" title="提前说明"></a>提前说明</h3>在下文中：</li></ul></li><li>yourname指你注册网站的用户名</li><li>youremail指你注册网站的邮箱<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3>注册账号，然后创建一个repo，名字为<code>yourname.github.io</code><br>在<code>_config.yml</code>里，编辑末尾的配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li></ul><p>在文件夹下键入命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure></p><p>然后连敲几下回车，然后打开<code>C:\Users\你电脑的用户名</code>，找到<code>.ssh</code>文件夹，用编辑器打开<code>id_rsa.pub</code>文件，然后复制里面的所有文本。</p><p>在GitHub的Settings里，找到SSH keys，右上角新建一个SSH key，然后在Key那个大框中粘贴你复制的东西，随便起一个名字然后点下方的添加。</p><h3 id="Coding-TencentDev"><a href="#Coding-TencentDev" class="headerlink" title="Coding(TencentDev)"></a>Coding(TencentDev)</h3><p>注册账号，然后创建一个repo，名字为<code>yourname</code><br>在<code>_config.yml</code>里，编辑末尾的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@git.coding.net:yourname/yourname.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>在文件夹下键入命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure></p><p>然后连敲几下回车，然后打开<code>C:\Users\你电脑的用户名</code>，找到<code>.ssh</code>文件夹，用编辑器打开<code>id_rsa.pub</code>文件，然后复制里面的所有文本。</p><p>在网站的个人设置里，找到SSH keys，新建一个SSH key，然后在Key那个大框中粘贴你复制的东西，随便起一个名字然后点下方的添加。</p><h3 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h3><p>注册账号，然后创建一个repo，名字为<code>yourname</code><br>在<code>_config.yml</code>里，编辑末尾的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@gitee.com:yourname/yourname.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>在文件夹下键入命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure></p><p>然后连敲几下回车，然后打开<code>C:\Users\你电脑的用户名</code>，找到<code>.ssh</code>文件夹，用编辑器打开<code>id_rsa.pub</code>文件，然后复制里面的所有文本。</p><p>在Gitee的设置里，找到SSH keys，新建一个SSH key，然后在Key那个大框中粘贴你复制的东西，随便起一个名字然后点下方的添加。</p><h2 id="三步部署"><a href="#三步部署" class="headerlink" title="三步部署"></a>三步部署</h2><p>按照上述配置好后，每次修改博客就只用执行下面三行指令就行了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><blockquote><p>第一次执行之前需要执行下方两行指令设置个人信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">$ git config --global user.email <span class="string">"youremail"</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>第一次执行时会询问你是否使用ssh（此时在弹出的框中输入yes即可）之类的操作<br>从第二次起就真的只用这三行了。</p></blockquote><blockquote><h2 id="访问你的博客"><a href="#访问你的博客" class="headerlink" title="访问你的博客"></a>访问你的博客</h2><p>GitHub地址：<a href="https://yourname.github.io/" target="_blank" rel="noopener">https://yourname.github.io/</a><br>Coding(TencentDev)地址：<a href="https://yourname.coding.me/" target="_blank" rel="noopener">https://yourname.coding.me/</a><br>Gitee地址：<a href="https://yourname.gitee.io/" target="_blank" rel="noopener">https://yourname.gitee.io/</a></p></blockquote><h1 id="设置博客"><a href="#设置博客" class="headerlink" title="设置博客"></a>设置博客</h1><h2 id="博客基本配置"><a href="#博客基本配置" class="headerlink" title="博客基本配置"></a>博客基本配置</h2><p>你可以参照<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a>配置，也可以参照我的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">keywords: 关键词</span><br><span class="line">author: 作者</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: 访问你博客的地址</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure></p><h2 id="写博客"><a href="#写博客" class="headerlink" title="写博客"></a>写博客</h2><p>你需要使用Markdown格式编辑博客  </p><p>你可以使用指令创建一篇写好基本信息的博客然后修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new 博客标题</span><br></pre></td></tr></table></figure></p><p>也可以在_post文件夹下新建一个<code>.md</code>文件，并在开头写上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 20XX-XX-XX XX:XX:XX</span><br><span class="line">tags: </span><br><span class="line">  - 标签</span><br><span class="line">categories: </span><br><span class="line">  - 分类</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>然后在下面写正文部分。</p><blockquote><p>如果出现渲染错误，比如上面的内容出现在了文章开头而不是被隐藏，请检查文章的格式是否为Windows(CR LF)；<br>如果出现中文乱码，比如出现了 <code>˖Ԗ}ёڷޯ</code> 或 <code>鎵嬫寔涓ゆ妸妫嶆枻閾?</code> 这种乱码，请检查文章的编码是否为UTF-8；<br><img src="https://williampetermatthew.github.io/pic/Blog-Hexo06.png" alt=""></p></blockquote><h1 id="To-Be-Continued-…"><a href="#To-Be-Continued-…" class="headerlink" title="To Be Continued …"></a>To Be Continued …</h1><h1 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h1><p>在安装时如果没有选中notepad++，也可以在后来执行以下命令改为notepad++<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global core.editor notepad++</span><br></pre></td></tr></table></figure></p><p>hexo的很多命令都可以简写<br>比如</p><ul><li><code>hexo server</code>        -&gt;    <code>hexo s</code></li><li><code>hexo generate</code>    -&gt;    <code>hexo g</code></li><li><code>hexo deploy</code>        -&gt;    <code>hexo d</code></li></ul><p>但是由于c开头的指令不止一个，所以clean无法简写为c。</p><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;为什么使用Hexo？&lt;/li&gt;
&lt;li&gt;其实你想使用哪个使用哪个，只不过我个人觉得Hexo比较方便。&lt;/li&gt;
&lt;li&gt;优点：灵活度高、主题丰富、插件丰富、资瓷Markdown和LaTeX。&lt;/li&gt;
&lt;li&gt;缺点：要求有一定的计算机初阶知识水平，源码包含大量外
      
    
    </summary>
    
      <category term="Hexo博客" scheme="https://williampetermatthew.github.io/categories/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo博客" scheme="https://williampetermatthew.github.io/tags/Hexo%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>【Python入门】05 咕咕咕</title>
    <link href="https://williampetermatthew.github.io/blog/Python-05/"/>
    <id>https://williampetermatthew.github.io/blog/Python-05/</id>
    <published>2019-03-01T07:16:24.000Z</published>
    <updated>2019-03-01T23:22:35.225Z</updated>
    
    <content type="html"><![CDATA[<p>咕咕咕！！！</p><p>由于最近要换笔记本，正在清理旧电脑的所有软件，Python当然被我清掉了（毕竟现在我用的还少，需要用会上在线IDE），为了保证读者的体验，所以只能暂时咕下去了，大约三月中旬就好了。。。</p><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;咕咕咕！！！&lt;/p&gt;
&lt;p&gt;由于最近要换笔记本，正在清理旧电脑的所有软件，Python当然被我清掉了（毕竟现在我用的还少，需要用会上在线IDE），为了保证读者的体验，所以只能暂时咕下去了，大约三月中旬就好了。。。&lt;/p&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Python入门" scheme="https://williampetermatthew.github.io/categories/Python%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Python入门" scheme="https://williampetermatthew.github.io/tags/Python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>最小表示法/最大表示法</title>
    <link href="https://williampetermatthew.github.io/blog/string-MRepresentation/"/>
    <id>https://williampetermatthew.github.io/blog/string-MRepresentation/</id>
    <published>2019-02-15T07:43:43.000Z</published>
    <updated>2019-02-15T11:20:50.971Z</updated>
    
    <content type="html"><![CDATA[<p>我们可以求出最小/最大开始的位置然后输出。</p><p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">char</span> *s)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">2</span>,k=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(i&lt;=len&amp;&amp;j&lt;=len&amp;&amp;k&lt;len)</span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">int</span> t=s[(i+k<span class="number">-1</span>)%len+<span class="number">1</span>]-s[(j+k<span class="number">-1</span>)%len+<span class="number">1</span>];  </span><br><span class="line"><span class="keyword">if</span>(!t)k++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">0</span>)i=i+k+<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">else</span> j=j+k+<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">if</span>(i==j)j++;  </span><br><span class="line">k=<span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> min(i,j);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">char</span> *s)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">2</span>,k=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(i&lt;=len&amp;&amp;j&lt;=len&amp;&amp;k&lt;len)</span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">int</span> t=s[(i+k<span class="number">-1</span>)%len+<span class="number">1</span>]-s[(j+k<span class="number">-1</span>)%len+<span class="number">1</span>];  </span><br><span class="line"><span class="keyword">if</span>(!t)k++;  </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">0</span>)j=j+k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> i=i+k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i==j)j++;</span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> min(i,j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是一份0下标开始的版本<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">char</span> *s)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>,k=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">while</span>(i&lt;len&amp;&amp;j&lt;len&amp;&amp;k&lt;len)</span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">int</span> t=s[(i+k)%len]-s[(j+k)%len];  </span><br><span class="line"><span class="keyword">if</span>(!t)k++;  </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">0</span>)i=i+k+<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">else</span> j=j+k+<span class="number">1</span>;  </span><br><span class="line"><span class="keyword">if</span>(i==j)j++;  </span><br><span class="line">k=<span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> min(i,j);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">char</span> *s)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">1</span>,k=<span class="number">0</span>; </span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">while</span>(i&lt;len&amp;&amp;j&lt;len&amp;&amp;k&lt;len)</span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">int</span> t=s[(i+k)%len]-s[(j+k)%len];  </span><br><span class="line"><span class="keyword">if</span>(!t)k++;  </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;  </span><br><span class="line"><span class="keyword">if</span>(t&gt;<span class="number">0</span>)j=j+k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> i=i+k+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i==j)j++;</span><br><span class="line">k=<span class="number">0</span>;</span><br><span class="line">&#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> min(i,j);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们可以求出最小/最大开始的位置然后输出。&lt;/p&gt;
&lt;p&gt;代码如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/categories/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/tags/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
  </entry>
  
  <entry>
    <title>回文自动机</title>
    <link href="https://williampetermatthew.github.io/blog/string-PalindromicTree/"/>
    <id>https://williampetermatthew.github.io/blog/string-PalindromicTree/</id>
    <published>2019-02-15T07:39:19.000Z</published>
    <updated>2019-02-15T10:36:16.277Z</updated>
    
    <content type="html"><![CDATA[<p>类似AC自动机的一种回文串匹配自动机，也就是一棵字符树。准确的说，是两颗字符树，0号表示回文串长度为偶数的树，1号表示回文串长度为奇数的树。</p><p>洛谷上的模板题（<a href="https://www.luogu.org/problemnew/show/P3649" target="_blank" rel="noopener">P3649 【APIO2014】回文串</a>）：<br>求的其实就是$max(cnt[i] \times len[i])$<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">300005</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">300005</span>],ch[<span class="number">300005</span>][<span class="number">26</span>],len[<span class="number">300005</span>],num[<span class="number">300005</span>],cnt[<span class="number">300005</span>],tot,last;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newpoint</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++tot;</span><br><span class="line"><span class="built_in">memset</span>(ch[tot],<span class="number">0</span>,<span class="keyword">sizeof</span>(ch[tot]));</span><br><span class="line">len[tot]=l;</span><br><span class="line">cnt[tot]=<span class="number">0</span>;</span><br><span class="line">num[tot]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot=<span class="number">-1</span>;</span><br><span class="line">last=<span class="number">0</span>;</span><br><span class="line">newpoint(<span class="number">0</span>);</span><br><span class="line">newpoint(<span class="number">-1</span>);</span><br><span class="line">s[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">fail[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(s[l-len[x]<span class="number">-1</span>]!=s[l])</span><br><span class="line">x=fail[x];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">cnt[fail[i]]+=cnt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cur=getfail(last,i);</span><br><span class="line"><span class="keyword">if</span>(!ch[cur][s[i]-<span class="string">'a'</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> now=newpoint(len[cur]+<span class="number">2</span>);</span><br><span class="line">fail[now]=ch[getfail(fail[cur],i)][s[i]-<span class="string">'a'</span>];</span><br><span class="line">ch[cur][s[i]-<span class="string">'a'</span>]=now;</span><br><span class="line">num[now]=num[fail[now]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">last=ch[cur][s[i]-<span class="string">'a'</span>];</span><br><span class="line">cnt[last]++;</span><br><span class="line">&#125;</span><br><span class="line">count();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">build(s);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=tot;i++)</span><br><span class="line">ans=max(ans,(<span class="keyword">long</span> <span class="keyword">long</span>)cnt[i]*len[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>求本质不同的回文子串个数（HihoCoder-1602、<a href="http://acm.hdu.edu.cn/showproblem.php?pid=3948" target="_blank" rel="noopener">HDU3948</a>）：<br>回文自动机上的每个点都是一个本质不同的回文子串，所以就是求回文自动机总点的个数，同时注意刚开始有两个点0和1不是串上的点，所以统计答案时去掉这两个点的影响。HDU的题要注意从头再来时的清空。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">300005</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">300005</span>],ch[<span class="number">300005</span>][<span class="number">26</span>],len[<span class="number">300005</span>],num[<span class="number">300005</span>],cnt[<span class="number">300005</span>],tot,last;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newpoint</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++tot;</span><br><span class="line"><span class="built_in">memset</span>(ch[tot],<span class="number">0</span>,<span class="keyword">sizeof</span>(ch[tot]));</span><br><span class="line">len[tot]=l;</span><br><span class="line">cnt[tot]=<span class="number">0</span>;</span><br><span class="line">num[tot]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot=<span class="number">-1</span>;</span><br><span class="line">last=<span class="number">0</span>;</span><br><span class="line">newpoint(<span class="number">0</span>);</span><br><span class="line">newpoint(<span class="number">-1</span>);</span><br><span class="line">s[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">fail[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(s[l-len[x]<span class="number">-1</span>]!=s[l])</span><br><span class="line">x=fail[x];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">cnt[fail[i]]+=cnt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cur=getfail(last,i);</span><br><span class="line"><span class="keyword">if</span>(!ch[cur][s[i]-<span class="string">'a'</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> now=newpoint(len[cur]+<span class="number">2</span>);</span><br><span class="line">fail[now]=ch[getfail(fail[cur],i)][s[i]-<span class="string">'a'</span>];</span><br><span class="line">ch[cur][s[i]-<span class="string">'a'</span>]=now;</span><br><span class="line">num[now]=num[fail[now]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">last=ch[cur][s[i]-<span class="string">'a'</span>];</span><br><span class="line">cnt[last]++;</span><br><span class="line">&#125;</span><br><span class="line">count();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">build(s);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>,i,tot<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>统计所有回文串的个数（HihoCoder-1589）：<br>即cnt之和<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">800005</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">800005</span>],ch[<span class="number">800005</span>][<span class="number">26</span>],len[<span class="number">800005</span>],num[<span class="number">800005</span>],cnt[<span class="number">800005</span>],tot,last;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newpoint</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++tot;</span><br><span class="line"><span class="built_in">memset</span>(ch[tot],<span class="number">0</span>,<span class="keyword">sizeof</span>(ch[tot]));</span><br><span class="line">len[tot]=l;</span><br><span class="line">cnt[tot]=<span class="number">0</span>;</span><br><span class="line">num[tot]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tot=<span class="number">-1</span>;</span><br><span class="line">last=<span class="number">0</span>;</span><br><span class="line">newpoint(<span class="number">0</span>);</span><br><span class="line">newpoint(<span class="number">-1</span>);</span><br><span class="line">s[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">fail[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getfail</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(s[l-len[x]<span class="number">-1</span>]!=s[l])</span><br><span class="line">x=fail[x];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">cnt[fail[i]]+=cnt[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cur=getfail(last,i);</span><br><span class="line"><span class="keyword">if</span>(!ch[cur][s[i]-<span class="string">'a'</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> now=newpoint(len[cur]+<span class="number">2</span>);</span><br><span class="line">fail[now]=ch[getfail(fail[cur],i)][s[i]-<span class="string">'a'</span>];</span><br><span class="line">ch[cur][s[i]-<span class="string">'a'</span>]=now;</span><br><span class="line">num[now]=num[fail[now]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">last=ch[cur][s[i]-<span class="string">'a'</span>];</span><br><span class="line">cnt[last]++;</span><br><span class="line">&#125;</span><br><span class="line">count();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">build(s);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=tot;i++)</span><br><span class="line">ans+=cnt[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;类似AC自动机的一种回文串匹配自动机，也就是一棵字符树。准确的说，是两颗字符树，0号表示回文串长度为偶数的树，1号表示回文串长度为奇数的树。&lt;/p&gt;
&lt;p&gt;洛谷上的模板题（&lt;a href=&quot;https://www.luogu.org/problemnew/show/P364
      
    
    </summary>
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/categories/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/tags/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
  </entry>
  
  <entry>
    <title>【Python入门】04 Python基础3——字符串和编码</title>
    <link href="https://williampetermatthew.github.io/blog/Python-04/"/>
    <id>https://williampetermatthew.github.io/blog/Python-04/</id>
    <published>2019-02-15T00:24:00.000Z</published>
    <updated>2019-02-15T02:35:30.385Z</updated>
    
    <content type="html"><![CDATA[<p>在上一期的末尾我们说到一段代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">n = <span class="number">123</span></span><br><span class="line">f = <span class="number">456.789</span></span><br><span class="line">s1 = <span class="string">'Hello, world'</span></span><br><span class="line">s2 = <span class="string">'Hello, \'Adam\''</span></span><br><span class="line">s3 = <span class="string">r'Hello, "Bart"'</span></span><br><span class="line">s4 = <span class="string">r'''Hello,</span></span><br><span class="line"><span class="string">Lisa!'''</span></span><br></pre></td></tr></table></figure></p><p>我们看到有一行注释<code># -*- coding: utf-8 -*-</code></p><p>这个表示编码采用UTF-8编码，那么什么是字符编码呢？</p><h1 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h1><p>我们已经知道字符串也是一种数据类型，但是，字符串还存在一个特殊的编码问题。</p><p>计算机在设计时以8比特（bit）作为一个字节（byte），所以一个字节最大表示整数为255（$11111111_{(2)}=255_{(10)}$），如果要表示更大的整数，需要用更多的字节，比如两个字节最大为65535,4个字节最大为4294967295。<br>由于计算机是美国人发明的，最早只有127个字符被编码写入计算机，也就是大小写英文字母、数字和一些符号，它们被称为<code>ASCII</code>编码，比如大写字母A是65，小写字母z是122。<br>但是明显中文一个字节肯定不够用，起码也要两个字节，而且不能与ASCII编码冲突，于是中国便制定了<code>GB2312</code>编码，用来把中文编进去。<br>你可以想到的是，全世界有上百种语言，日本把日文编到<code>Shift-JIS</code>编码里，韩国把韩文编到<code>EUC-KR</code>编码里，甚至中文的繁体字都采用另一种编码<code>Big5</code>。各国有各国的标准，就会不可避免的产生冲突，结果就是，在多语言的文本中，会出现乱码。</p><p><img src="https://williampetermatthew.github.io/pic/Python04-01.png" alt="字符编码的问题真是令人头疼！"></p><p>因此，<code>Unicode</code>应运而生，Unicode把所有语言统一到一套编码，这样就不会再出现乱码问题了。<br>Unicode标准不断地在发展，最常用地是用两个字节表示一个字符（偏僻字符需要4个字节）。现代的操作系统和大多数编程语言都直接支持Unicode。<br>现在，捋一捋ASCII和Unicode的编码区别：ASCII编码是一个字节，Unicode通常是两个字节。</p><p>例如：  </p><ul><li>字母<code>A</code>用ASCII编码是十进制<code>65</code>，二进制<code>01000001</code>；  </li><li>字符<code>0</code>用ASCII编码是十进制<code>48</code>，二进制<code>00110000</code>，注意这里的<code>0</code>是字符<code>&#39;0&#39;</code>而不是整数<code>0</code>；  </li><li>汉字<code>中</code>超出ASCII编码范围，用Unicode编码是十进制的<code>20013</code>，二进制<code>01001110 00101101</code>。  </li></ul><p>你可以猜测的是，如果把ASCII编码的<code>A</code>用Unicode编码，在前方补0，因此<code>A</code>的Unicode编码是<code>00000000 01000001</code>。</p><p>但是新的问题又出现了：如果统一成Unicode编码，乱码问题没了，但是如果你写的文本基本上全是英文的话，用Unicode编码比ASCII编码多一倍空间，所以储存和传输上十分不划算。<br>所以本着节约的精神，又出现了把Unicode转化为“可变长编码”的<code>UTF-8</code>编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是三个字节，只有生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：</p><table><thead><tr><th style="text-align:right">字符</th><th style="text-align:right">ASCII</th><th style="text-align:right">Unicode</th><th style="text-align:right">UTF-8</th></tr></thead><tbody><tr><td style="text-align:right">A</td><td style="text-align:right">01000001</td><td style="text-align:right">00000000 01000001</td><td style="text-align:right">01000001</td></tr><tr><td style="text-align:right">中</td><td style="text-align:right">X</td><td style="text-align:right">01001110 00101101</td><td style="text-align:right">11100100 10111000 10101101</td></tr></tbody></table><p>从上面的表格还可以发现，UTF-8有个额外的好处，就是ASCII编码实际上是UTF-8编码的一部分，所以，大量只支持ASCII编码的历史遗留软件可以在UTF-8编码下继续工作。<br>搞清楚了ASCII、Unicode和UTF-8的关系，我们现在总结下计算机系统通用的字符编码工作方式：<br>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者传输的时候，就转换为UTF-8编码。<br>用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：</p><p><img src="https://williampetermatthew.github.io/pic/Python04-02.png" alt=""></p><p>浏览网页时，服务器会把动态生成的Unicode内容转换为UTF-8再传输到浏览器：</p><p><img src="https://williampetermatthew.github.io/pic/Python04-03.png" alt=""></p><p>所以你看到很多网页的源码上会有类似<code>&lt;meta charset=&quot;UTF-8&quot; /&gt;</code>的信息，表示该网页正是用的UTF-8编码。</p><h1 id="Python的字符串"><a href="#Python的字符串" class="headerlink" title="Python的字符串"></a>Python的字符串</h1><p>搞清楚了字符编码问题后，我们再来研究Python的字符串。</p><p>在最新版Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'包含中文的str'</span>)</span><br><span class="line">包含中文的str</span><br></pre></td></tr></table></figure></p><p>对于单个字符的编码，Python提供了<code>ord()</code>函数获取字符的整数表示，<code>chr()</code>函数把编码转换成对应的字符：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'A'</span>)</span><br><span class="line"><span class="number">65</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ord(<span class="string">'中'</span>)</span><br><span class="line"><span class="number">20013</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">66</span>)</span><br><span class="line"><span class="string">'B'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>chr(<span class="number">25991</span>)</span><br><span class="line"><span class="string">'文'</span></span><br></pre></td></tr></table></figure></p><p>如果知道字符的整数编码，还可以用十六进制这么写str：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'\u4e2d\u6587'</span></span><br><span class="line"><span class="string">'中文'</span></span><br></pre></td></tr></table></figure></p><p>两种写法完全等价。</p><p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p><p>Python对<code>bytes</code>类型的数据用<code>b</code>前缀表示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="string">b'ABC'</span></span><br></pre></td></tr></table></figure></p><p>注意区分<code>&#39;ABC&#39;</code>和<code>b&#39;ABC&#39;</code>，前者是str，后者虽然显示和前者一样，但bytes的每个字符都只占用一个字节。</p><p>以Unicode表示的str通过<code>encode()</code>方法可以编码为直径的bytes，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'ABC'</span>.encode(<span class="string">'ascii'</span>)</span><br><span class="line"><span class="string">b'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'ascii'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">UnicodeEncodeError: <span class="string">'ascii'</span> codec can<span class="string">'t encode characters in position 0-1: ordinal not in range(128)</span></span><br></pre></td></tr></table></figure></p><p>纯英文的str可以用ASCII编码为bytes，内容一致，含有中文的str可以用UTF-8编码为bytes。含有中文的str无法用ASCII编码，因为中文编码范围超过了ASCII，Python会报错。</p><p>在bytes中，无法显示为ASCII自负的字节，用<code>\x##</code>显示。</p><p>反过来，如果我们从网络或磁盘上读取了字节流，那么读取到的数据就是bytes。腰包bytes变为str，需要<code>decode()</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'ABC'</span>.decode(<span class="string">'ascii'</span>)</span><br><span class="line"><span class="string">'ABC'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"><span class="string">'中文'</span></span><br></pre></td></tr></table></figure></p><p>如果bytes中包含无法解码的字节，decode()会报错：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xff'</span>.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  ...</span><br><span class="line">UnicodeDecodeError: <span class="string">'utf-8'</span> codec can<span class="string">'t decode byte 0xff in position 3: invalid start byte</span></span><br></pre></td></tr></table></figure></p><p>如果bytes中只有一小部分无效的字节，可以传入<code>errors=&#39;ignore&#39;</code>忽略错误的字节：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">b'\xe4\xb8\xad\xff'</span>.decode(<span class="string">'utf-8'</span>, errors=<span class="string">'ignore'</span>)</span><br><span class="line"><span class="string">'中'</span></span><br></pre></td></tr></table></figure></p><p>要计算str包含多少个字符，可以用<code>len()</code>函数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'ABC'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'中文'</span>)</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>len()函数计算的是str的字符数，如果换成bytes，len()就计算字节数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">b'ABC'</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">b'\xe4\xb8\xad\xe6\x96\x87'</span>)</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>len(<span class="string">'中文'</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure></p><p>可见，1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。</p><p>在操作字符串时，我们经常遇到str和bytes的互相转换。为了避免乱码问题，应当始终坚持使用UTF-8编码对str和bytes进行转换。</p><p>由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为了让它按UTF-8编码读取，我们通常在文件开头写上这两行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br></pre></td></tr></table></figure><p>第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；<br>第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。  </p><p>申明了UTF-8编码并不意味着你的.py文件就是UTF-8编码的，必须并且要确保文本编辑器正在使用UTF-8 without BOM编码：</p><p><img src="https://williampetermatthew.github.io/pic/Python04-04.png" alt=""></p><p>如果.py文件本身使用UTF-8编码，并且也申明了<code># -*- coding: utf-8 -*-</code>，打开命令提示符测试就可以正常显示中文：</p><p><img src="https://williampetermatthew.github.io/pic/Python04-05.png" alt=""></p><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><p>最后一个常见的问题是如何输出格式化的字符串。我们经常会输出类似<code>&#39;亲爱的xxx你好！你xx月的话费是xx，余额是xx&#39;</code>之类的字符串，而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式。</p><p>在Python中，采用的格式化方式和C语言是一致的，用<code>%</code>实现，举例如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, %s!'</span>%<span class="string">'world'</span></span><br><span class="line"><span class="string">'Hello, world!'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hi, %s, you have $%d.'</span>%(<span class="string">'Michael'</span>,<span class="number">1000000</span>)</span><br><span class="line"><span class="string">'Hi, Michael, you have $1000000.'</span></span><br></pre></td></tr></table></figure></p><p>你可能猜到了，<code>%</code>运算符就是用来格式化字符串的。在字符串内部，<code>%s</code>表示用字符串替换，<code>%d</code>表示用整数替换，有几个<code>%?</code>占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个<code>%?</code>，括号可以省略。</p><table><thead><tr><th style="text-align:left">占位符</th><th style="text-align:left">替换内容</th></tr></thead><tbody><tr><td style="text-align:left">%d</td><td style="text-align:left">整数</td></tr><tr><td style="text-align:left">%f</td><td style="text-align:left">浮点数</td></tr><tr><td style="text-align:left">%s</td><td style="text-align:left">字符串</td></tr><tr><td style="text-align:left">%x</td><td style="text-align:left">十六进制整数</td></tr></tbody></table><p>其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%2d-%02d'</span>%(<span class="number">3</span>,<span class="number">1</span>))</span><br><span class="line"> <span class="number">3</span><span class="number">-01</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'%.2f'</span>%<span class="number">3.1415926</span>)</span><br><span class="line"><span class="number">3.14</span></span><br></pre></td></tr></table></figure></p><p>如果你不太确定应该用什么，<code>%s</code>永远起作用，它会把任何数据类型转换为字符串：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Age: %s. Gender: %s'</span>%(<span class="number">25</span>,<span class="keyword">True</span>)</span><br><span class="line"><span class="string">'Age: 25. Gender: True'</span></span><br></pre></td></tr></table></figure></p><p>有些时候，字符串里面的<code>%</code>是一个普通字符怎么办？这个时候就需要转义，用<code>%%</code>来表示一个<code>%</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'growth rate: %d %%'</span>%<span class="number">7</span></span><br><span class="line"><span class="string">'growth rate: 7 %'</span></span><br></pre></td></tr></table></figure></p><h2 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h2><p>另一种格式化字符串的方法是使用<code>format()</code>，它会用传入的参数一次替换字符串中的占位符<code>{0}</code>、<code>{1}</code>……，不过这明显比%麻烦得多：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'Hello, &#123;0&#125;, 成绩提升了 &#123;1:.1f&#125;%'</span>.format(<span class="string">'小明'</span>,<span class="number">17.125</span>)</span><br><span class="line"><span class="string">'Hello, 小明, 成绩提升了 17.1%'</span></span><br></pre></td></tr></table></figure></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>Python 3的字符串使用Unicode，直接支持多语言。</p><p>当str和bytes互相转换时，需要指定编码。最常用的编码是UTF-8。Python当然也支持其他编码方式，比如把Unicode编码成GB2312：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'中文'</span>.encode(<span class="string">'gb2312'</span>)</span><br><span class="line"><span class="string">b'\xd6\xd0\xce\xc4'</span></span><br></pre></td></tr></table></figure></p><p>但这种方式纯属自找麻烦，如果没有特殊业务要求，请牢记仅使用UTF-8编码。</p><p>格式化字符串的时候，可以用Python的交互式环境测试，方便快捷。</p><hr><h1 id="提前尝试"><a href="#提前尝试" class="headerlink" title="提前尝试"></a>提前尝试</h1><p>复习知识点并尝试练习此题目：</p><blockquote><p>T04-01: 小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出<code>&#39;xx.x%&#39;</code>，只保留小数点后1位：</p><p>提示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">s1 = <span class="number">72</span></span><br><span class="line">s2 = <span class="number">85</span></span><br><span class="line">r = ???</span><br><span class="line">print(<span class="string">'???'</span> % r)</span><br></pre></td></tr></table></figure></p></blockquote><p>请执行此代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=100</span><br><span class="line">if a&gt;=0:</span><br><span class="line">    print(a)</span><br><span class="line">else:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure></p><p>观察显示的的结果并尝试完成以下任务：</p><ol><li>思考这段代码中每行都表示什么意思</li><li>修改a的值或将a的值变为输入时赋值</li></ol><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在上一期的末尾我们说到一段代码&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="Python入门" scheme="https://williampetermatthew.github.io/categories/Python%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Python入门" scheme="https://williampetermatthew.github.io/tags/Python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>crt和excrt</title>
    <link href="https://williampetermatthew.github.io/blog/crt-and-excrt/"/>
    <id>https://williampetermatthew.github.io/blog/crt-and-excrt/</id>
    <published>2019-02-13T08:18:16.000Z</published>
    <updated>2019-02-14T13:07:41.417Z</updated>
    
    <content type="html"><![CDATA[<h1 id="crt"><a href="#crt" class="headerlink" title="crt"></a>crt</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b)&#123;x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span> a;&#125;</span><br><span class="line"><span class="keyword">int</span> t=exgcd(b,a%b,y,x);y-=a/b*x;<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">crt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,lcm=<span class="number">1</span>,x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">lcm*=b[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tp=lcm/b[i];</span><br><span class="line">exgcd(tp,b[i],x,y);</span><br><span class="line">x=(x%b[i]+b[i])%b[i];</span><br><span class="line">ans=(ans+tp*x*a[i])%lcm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (ans+lcm)%lcm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="excrt"><a href="#excrt" class="headerlink" title="excrt"></a>excrt</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b)&#123;x=<span class="number">1</span>,y=<span class="number">0</span>;<span class="keyword">return</span> a;&#125;</span><br><span class="line"><span class="keyword">int</span> t=exgcd(b,a%b,y,x);y-=a/b*x;<span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">excrt</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,y,k;</span><br><span class="line">    <span class="keyword">int</span> M=b[<span class="number">1</span>],ans=a[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> c=(a[i]-ans%b[i]+b[i])%b[i];</span><br><span class="line">        <span class="keyword">int</span> gcd=exgcd(M,b[i],x,y),bg=b[i]/gcd;</span><br><span class="line">        <span class="keyword">if</span>(c%gcd)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        x=x*c/gcd%bg;</span><br><span class="line">        ans+=x*M;</span><br><span class="line">        M*=bg;</span><br><span class="line">        ans=(ans%M+M)%M;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (ans%M+M)%M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;crt&quot;&gt;&lt;a href=&quot;#crt&quot; class=&quot;headerlink&quot; title=&quot;crt&quot;&gt;&lt;/a&gt;crt&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="述学" scheme="https://williampetermatthew.github.io/categories/%E8%BF%B0%E5%AD%A6/"/>
    
    
      <category term="述学" scheme="https://williampetermatthew.github.io/tags/%E8%BF%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>多项式</title>
    <link href="https://williampetermatthew.github.io/blog/Polynomial/"/>
    <id>https://williampetermatthew.github.io/blog/Polynomial/</id>
    <published>2019-02-11T13:22:15.000Z</published>
    <updated>2019-02-14T13:07:12.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h1><h2 id="递归版"><a href="#递归版" class="headerlink" title="递归版"></a>递归版</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> M_PI</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fushu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125;f[<span class="number">4000005</span>],g[<span class="number">4000005</span>];</span><br><span class="line">fushu <span class="keyword">operator</span>+(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x+b.x,a.y+b.y&#125;;&#125;</span><br><span class="line">fushu <span class="keyword">operator</span>-(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</span><br><span class="line">fushu <span class="keyword">operator</span>*(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x&#125;;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="keyword">int</span> lim,fushu *a,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lim==<span class="number">1</span>)<span class="keyword">return</span> ;</span><br><span class="line">fushu a1[lim&gt;&gt;<span class="number">1</span>],a2[lim&gt;&gt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lim;i+=<span class="number">2</span>)</span><br><span class="line">a1[i&gt;&gt;<span class="number">1</span>]=a[i],a2[i&gt;&gt;<span class="number">1</span>]=a[i+<span class="number">1</span>];</span><br><span class="line">fft(lim&gt;&gt;<span class="number">1</span>,a1,tp);</span><br><span class="line">fft(lim&gt;&gt;<span class="number">1</span>,a2,tp);</span><br><span class="line">fushu Wn=(fushu)&#123;<span class="built_in">cos</span>(<span class="number">2.0</span>*M_PI/lim),tp*<span class="built_in">sin</span>(<span class="number">2.0</span>*M_PI/lim)&#125;,w=(fushu)&#123;<span class="number">1.0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(lim&gt;&gt;<span class="number">1</span>);i++,w=w*Wn)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=a1[i]+w*a2[i];</span><br><span class="line">a[i+(lim&gt;&gt;<span class="number">1</span>)]=a1[i]-w*a2[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;f[i].x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;g[i].x);</span><br><span class="line"><span class="keyword">int</span> lim=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(lim&lt;=n+m)</span><br><span class="line">lim&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">fft(lim,f,<span class="number">1</span>);</span><br><span class="line">fft(lim,g,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lim;i++)</span><br><span class="line">f[i]=f[i]*g[i];</span><br><span class="line">fft(lim,f,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.0lf "</span>,<span class="built_in">floor</span>(f[i].x/lim));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中可以小优化一下<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(lim&gt;&gt;<span class="number">1</span>);i++,w=w*Wn)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">complex</span> t=w*a2[i];</span><br><span class="line">    a[i]=a1[i]+t,</span><br><span class="line">    a[i+(lim&gt;&gt;<span class="number">1</span>)]=a1[i]-t;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="迭代版"><a href="#迭代版" class="headerlink" title="迭代版"></a>迭代版</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> M_PI</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M_PI3.14159265358979323846</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fushu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">&#125;f[<span class="number">10000005</span>],g[<span class="number">10000005</span>];</span><br><span class="line">fushu <span class="keyword">operator</span>+(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x+b.x,a.y+b.y&#125;;&#125;</span><br><span class="line">fushu <span class="keyword">operator</span>-(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x-b.x,a.y-b.y&#125;;&#125;</span><br><span class="line">fushu <span class="keyword">operator</span>*(fushu a,fushu b)&#123;<span class="keyword">return</span> (fushu)&#123;a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x&#125;;&#125;</span><br><span class="line"><span class="keyword">int</span> l,r[<span class="number">10000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="keyword">int</span> lim,fushu *a,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line"><span class="keyword">if</span>(i&lt;r[i])</span><br><span class="line">swap(a[i],a[r[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">fushu Wn=(fushu)&#123;<span class="built_in">cos</span>(M_PI/mid),tp*<span class="built_in">sin</span>(M_PI/mid)&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=R)</span><br><span class="line">&#123;</span><br><span class="line">fushu w=(fushu)&#123;<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k++,w=w*Wn)</span><br><span class="line">&#123;</span><br><span class="line">fushu x=a[j+k],y=w*a[j+mid+k];</span><br><span class="line">a[j+k]=x+y;</span><br><span class="line">a[j+mid+k]=x-y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;f[i].x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;g[i].x);</span><br><span class="line"><span class="keyword">int</span> lim=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(lim&lt;=n+m)lim&lt;&lt;=<span class="number">1</span>,l++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">r[i]=(r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>));</span><br><span class="line">fft(lim,f,<span class="number">1</span>);</span><br><span class="line">fft(lim,g,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lim;i++)</span><br><span class="line">f[i]=f[i]*g[i];</span><br><span class="line">fft(lim,f,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.0lf "</span>,<span class="built_in">floor</span>(f[i].x/lim+<span class="number">0.5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="NTT"><a href="#NTT" class="headerlink" title="NTT"></a>NTT</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> P=<span class="number">998244353</span>,G=<span class="number">3</span>,Gi=<span class="number">332748118</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,l,r[<span class="number">3000005</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[<span class="number">3000005</span>],g[<span class="number">3000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&amp;<span class="number">1</span>)ans=(ans*a)%P;</span><br><span class="line">a=(a*a)%P;</span><br><span class="line">k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span> lim,<span class="keyword">long</span> <span class="keyword">long</span> *a,<span class="keyword">int</span> tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line"><span class="keyword">if</span>(i&lt;r[i])</span><br><span class="line">swap(a[i],a[r[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mid=<span class="number">1</span>;mid&lt;lim;mid&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Wn=<span class="built_in">pow</span>(tp==<span class="number">1</span>?G:Gi,(P<span class="number">-1</span>)/(mid&lt;&lt;<span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> R=mid&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;lim;j+=R)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;mid;k++,w=(w*Wn)%P)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=a[j+k],y=w*a[j+mid+k]%P;</span><br><span class="line">a[j+k]=(x+y)%P;</span><br><span class="line">a[j+mid+k]=(x-y+P)%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;f[i]),f[i]=(f[i]+P)%P;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;g[i]),g[i]=(g[i]+P)%P;</span><br><span class="line"><span class="keyword">int</span> lim=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(lim&lt;=n+m)lim&lt;&lt;=<span class="number">1</span>,l++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lim;i++)</span><br><span class="line">r[i]=(r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(l<span class="number">-1</span>));</span><br><span class="line">ntt(lim,f,<span class="number">1</span>);</span><br><span class="line">ntt(lim,g,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=lim;i++)</span><br><span class="line">f[i]=(f[i]*g[i])%P;</span><br><span class="line">ntt(lim,f,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> inv=<span class="built_in">pow</span>(lim,P<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n+m;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld "</span>,(f[i]*inv)%P);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;FFT&quot;&gt;&lt;a href=&quot;#FFT&quot; class=&quot;headerlink&quot; title=&quot;FFT&quot;&gt;&lt;/a&gt;FFT&lt;/h1&gt;&lt;h2 id=&quot;递归版&quot;&gt;&lt;a href=&quot;#递归版&quot; class=&quot;headerlink&quot; title=&quot;递归版&quot;&gt;&lt;/a&gt;递归版&lt;/h
      
    
    </summary>
    
      <category term="述学" scheme="https://williampetermatthew.github.io/categories/%E8%BF%B0%E5%AD%A6/"/>
    
    
      <category term="述学" scheme="https://williampetermatthew.github.io/tags/%E8%BF%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【Python入门】03 Python基础2——代码缩进、数据类型和变量</title>
    <link href="https://williampetermatthew.github.io/blog/Python-03/"/>
    <id>https://williampetermatthew.github.io/blog/Python-03/</id>
    <published>2019-02-07T19:18:00.000Z</published>
    <updated>2019-02-14T13:59:08.746Z</updated>
    
    <content type="html"><![CDATA[<p>在上一期的末尾我们说到一段代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a&gt;=<span class="number">0</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure></p><h1 id="缩进及注释"><a href="#缩进及注释" class="headerlink" title="缩进及注释"></a>缩进及注释</h1><p>我们发现它采用缩进的方式</p><p>缩进有利有弊，好处是强迫你格式化写代码，但没有规定缩进是几个空格或Tab。按照我们约定俗成的规定，应始终坚持使用 4个空格 的缩进。</p><p>缩进的另一个好处是强迫你写出缩进较少的代码，你会倾向于把一段很长的代码拆成若干个函数，从而得到缩进较少的代码。</p><p>当然，坏处就是“复制”——“粘贴”失效了，当你重构代码时，需要检查缩进是否正确。</p><p>务必注意，Python是大小写敏感的，这意味着你不能用错大小写（例如将input()打成Input()或INPUT()）。</p><p>如果我们要注释一些给人看的，程序会忽略的语句，可以在该行最开头写上符号#，例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印绝对值</span></span><br><span class="line">a=<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a&gt;=<span class="number">0</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure></p><p>这样有‘#’的那一行的代码都不会执行</p><h1 id="数据类型和变量"><a href="#数据类型和变量" class="headerlink" title="数据类型和变量"></a>数据类型和变量</h1><p>计算机最早就是用于数学计算的机器，因此计算机理所当然可以处理各种数值。<br>但是计算机还可以处理文本、图形、音频、视频、网页等数据，这就需要定义不同的数据类型。</p><h2 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h2><p>Python可以处理任意大小的整数，这包括负整数，写法与数学上相同，例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">-8080</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>等。</p><p>由于计算机内部采用二进制存储，所以有时候采用一些特定的进制比较方便。</p><p>我们就通常采用十六进制表示一个整数，我们用 0x 前缀表示这个数是一个十六进制数，对于十六进制数的一个位上的数，0-9正常表示，10-15分别对应a-f（或A-F）。例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0xff00</span> <span class="comment"># 十进制下的65280</span></span><br><span class="line"><span class="number">0xa5b4c3d2</span> <span class="comment"># 十进制下的2780087250</span></span><br></pre></td></tr></table></figure></p><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>浮点数就是小数。我们在计算机中采用科学计数法方式表示，小数点位置可变（例如$1.23\times10^9 = 12.3\times10^8$），就像来回浮动一样，故得名 浮点数 。<br>当然也可以采用数学写法，$1.23\times10^9 = 1,230,000,000$，$31.4\times10^{-1} = 3.14\times10^0 = 3.14$<br>对于一个很大或很小的浮点数，我们再采用数学写法未免有些困难，所以我们采用合理的科学计数法表示，我们用$e$来表示$10$，$AeX$就是$A\times10^X$，例如<br>$1,230,000,000 = 1.23\times10^9 = 1.23e9$<br>$0.000,012 = 1.2\times10^{-5} = 1.2e-5$  </p><p>注意：整数和浮点数在计算机上存储方式不同，整数运算永远是精确的（包括除法），浮点数存在一定的四舍五入精度误差。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是以单引号’或者双引号”括起来的文本，单引号和双引号本身不是字符串的内容，它这表示这是个字符串。<br>例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">`abc`和<span class="string">"xyz"</span></span><br><span class="line">中第一个字符串中只有`a、b和c`三个字符，第二个字符串中只有`x、y和z`三个字符</span><br></pre></td></tr></table></figure></p><p>事实上，如果你要单独使用<code>&#39;</code>这个符号，可以用双引号<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"I'm Peter_Matthew."</span></span><br></pre></td></tr></table></figure></p><p>但是如果你需要使用”，你需要使用 转义字符<code>\</code>来表示。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'I\'m \"Peter_Matthew\".'</span></span><br></pre></td></tr></table></figure></p><p>表示的内容为<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I<span class="string">'m "Peter_Matthew".</span></span><br></pre></td></tr></table></figure></p><p>转义字符<code>\</code>的作用是将这里的内容转换为别的字符而不是保留，它可以转义很多字符，例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\n 表示换行符</span><br><span class="line">\t 表示制表符</span><br><span class="line">\\ 表示\</span><br></pre></td></tr></table></figure></p><p>使用print可以打印字符串而不会显示最外边的<code>&#39;</code>和<code>&quot;</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'I\'m \"Peter_Matthew\".'</span>)</span><br><span class="line"><span class="string">'I\'m \"Peter_Matthew\".'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\\\n\\'</span>)</span><br><span class="line">\</span><br><span class="line">\</span><br></pre></td></tr></table></figure></p><p>Python在通常情况下默认转义，当你不想它帮你转义时，你可以在前面加上<code>r</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'\\\n\\'</span>)</span><br><span class="line">\</span><br><span class="line">\</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">r'\\\n\\'</span>)</span><br><span class="line">\\\n\\</span><br></pre></td></tr></table></figure></p><p>同时，由于多行用<code>\n</code>写在一行内会十分影响阅读，所以可以采用<code>&#39;&#39;&#39;...&#39;&#39;&#39;</code>方式表示多行字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3'''</span></span><br></pre></td></tr></table></figure></p><p>输出它</p><p>在Python交互模式下，<code>...</code>在提示你可以接着上一行输入，<code>...</code>不是代码的一部分。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'''line1</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line2</span></span><br><span class="line"><span class="string"><span class="meta">... </span>line3'''</span>)</span><br><span class="line">line1</span><br><span class="line">line2</span><br><span class="line">line3</span><br></pre></td></tr></table></figure></p><p>在程序中，请这么写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'''line1</span></span><br><span class="line"><span class="string">line2</span></span><br><span class="line"><span class="string">line3'''</span>)</span><br></pre></td></tr></table></figure></p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><p>布尔值只有<code>True</code>和<code>False</code>两个值，Python中采用此方式表示布尔值，可以通过布尔运算计算出来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> &gt; <span class="number">4</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure></p><p>布尔值可以采用<code>and</code>、<code>or</code>和<code>not</code>逻辑运算。</p><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><p>与运算，只有值均为True时才会返回True。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">and</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> &gt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">3</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><p>或运算，只要有值为True时就会返回True。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">True</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">False</span> <span class="keyword">or</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> &gt; <span class="number">3</span> <span class="keyword">or</span> <span class="number">2</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><h3 id="not"><a href="#not" class="headerlink" title="not"></a>not</h3><p>非运算，又称取反运算，会将值的真假反相，也就是值为False时为True，反之亦然。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">True</span></span><br><span class="line"><span class="keyword">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="keyword">False</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">not</span> <span class="number">2</span> &gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><h2 id="空值"><a href="#空值" class="headerlink" title="空值"></a>空值</h2><p>Python当中的一个特殊值，用<code>None</code>表示。注意<strong>None不能理解为0</strong>。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Python开还提供了列表、字典等数据类型，支持自定义数据类型，后续会讲到。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量概念与初中代数方程变量一致，只是在计算机程序中，变量不仅可以是数字，还可以是任意的数据类型。</p><p>变量在程序中用一个变量名表示了，变量名必须是大小写英文字母、数字和_的组合，且不能以数字开头。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span></span><br><span class="line">t_007=<span class="string">'T007'</span></span><br><span class="line">Answer=<span class="keyword">True</span></span><br></pre></td></tr></table></figure></p><p>其中，a是整数，t_007是字符串，Answer是布尔值。</p><p>并且在其中，这里的<code>=</code>符号是赋值，意思是把等式后面的值给变量，同一个变量可以被反复赋值，而且同一个数据变量每次被赋值时的数据类型可以不同<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="number">123</span> <span class="comment"># a是整数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=<span class="string">'ABC'</span> <span class="comment"># a变为字符串</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a)</span><br></pre></td></tr></table></figure></p><blockquote><p>这种变量类型不固定的语言称为 动态语言 ，与之对应的是静态语言，静态语言必须指定变量类型，如赋值时不匹配，就会报错。<br>例如java和C++中<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">123</span>;<span class="comment">//a是整数</span></span><br><span class="line">a=<span class="string">"ABC"</span>;<span class="comment">//赋值错误：变量类型不匹配</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>和静态语言相比，动态语言更灵活。</p></blockquote><p>请区分Python中，赋值语句的=符号和数学的等号区别，请看下面的例子。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=<span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x=x+<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(x)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure></p><p>如果从数学上理解x=x+2，那么是不成立的。在赋值语句中，程序先计算右侧的表达式x+2的值，得到12，然后在进行赋值，x的值就变成了12</p><blockquote><p>变量在计算机内存中的表示：<br>当我们写<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">'ABC'</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Python解释器做了两件事：</p><ol><li>在内存中创建了一个’ABC’的字符串。</li><li>在内存中创建了一个名为a的变量，并把它指向’ABC’。（这与C++的内存表示存在差异）</li></ol><p>当然你也可以把a的值赋给b，这实际是将b指向a所指的数据。<br>对于下面这个例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">'ABC'</span></span><br><span class="line">b=a</span><br><span class="line">a=<span class="string">'XYZ'</span></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>最后一行打印出b的内容是<code>&#39;ABC&#39;</code>还是<code>&#39;XYZ&#39;</code>？从数学上会错误地认为a和b相同都是<code>&#39;XYZ&#39;</code>，实际上b的值是<code>&#39;ABC&#39;</code>，程序是一行一行执行的，所以我们也一行一行执行。</p><p>第一：a=<code>&#39;ABC&#39;</code>，解释器创建了字符串<code>&#39;ABC&#39;</code>和变量a，并把a指向字符串<code>&#39;ABC&#39;</code><br><img src="https://williampetermatthew.github.io/pic/Python03-01.png" alt="a=&#39;ABC&#39;"><br>第二：b=a，解释器创建了变量b，并把它指向a所指向的字符串<code>&#39;ABC&#39;</code><br><img src="https://williampetermatthew.github.io/pic/Python03-02.png" alt="b=a"><br>第三：a=<code>&#39;XYZ&#39;</code>，解释器创建了字符串<code>&#39;XYZ&#39;</code>，并把a的指向改为<code>&#39;XYZ&#39;</code>，此时b是没有变的。<br><img src="https://williampetermatthew.github.io/pic/Python03-03.png" alt="a=&#39;XYZ&#39;"><br>所以最后b的值就是<code>&#39;ABC&#39;</code>了。</p></blockquote><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>常量就是不能更改的变量，比如π在数学上就是个常量，通常用全部大写的变量名表示常量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PI=<span class="number">3.141592653589793</span></span><br></pre></td></tr></table></figure></p><p>但事实上PI仍是变量，Python没有机制阻止变量不更改，所以，这样的写法只是一个习惯用法，没有人拦得住你更改PI的值。</p><h2 id="关于整数除法"><a href="#关于整数除法" class="headerlink" title="关于整数除法"></a>关于整数除法</h2><p>Python中有两种除法。<br>第一种是/：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>/<span class="number">3</span></span><br><span class="line"><span class="number">3.3333333333333335</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span>/<span class="number">3</span></span><br><span class="line"><span class="number">3.0</span></span><br></pre></td></tr></table></figure></p><p><code>/</code>的除法结果是浮点数，即使整除也是浮点数。</p><p>还有一种是<code>//</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>//<span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>//<span class="number">-3</span></span><br><span class="line"><span class="number">-4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-10</span>//<span class="number">3</span></span><br><span class="line"><span class="number">-4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-10</span>//<span class="number">-3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>这样的结果永远是整数，永远向下取整。</p><p>同时还有一个余数运算<code>%</code>，可以得到相除的余数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>%<span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span>%<span class="number">-3</span></span><br><span class="line"><span class="number">-2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-10</span>%<span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">-10</span>%<span class="number">-3</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure></p><p>我们可以看到余数的正负与除数有关<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 以下是数学解释</span><br><span class="line">10=3*3+110%3=1</span><br><span class="line">10=(-4)*(-3)+(-2)10%(-3)=-2</span><br><span class="line">-10=(-4)*3+2(-10)%3=2</span><br><span class="line">-10=3*(-3)+(-1)(-10)%(-3)=-1</span><br></pre></td></tr></table></figure></p><p>由于<code>//</code>除法和<code>%</code>取余的结果总是整数，所以整数的除法是精确的。</p><hr><h1 id="提前尝试"><a href="#提前尝试" class="headerlink" title="提前尝试"></a>提前尝试</h1><p>复习知识点并尝试打印下列变量的值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">n = <span class="number">123</span></span><br><span class="line">f = <span class="number">456.789</span></span><br><span class="line">s1 = <span class="string">'Hello, world'</span></span><br><span class="line">s2 = <span class="string">'Hello, \'Adam\''</span></span><br><span class="line">s3 = <span class="string">r'Hello, "Bart"'</span></span><br><span class="line">s4 = <span class="string">r'''Hello,</span></span><br><span class="line"><span class="string">Lisa!'''</span></span><br></pre></td></tr></table></figure></p><p>请执行此代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=100</span><br><span class="line">if a&gt;=0:</span><br><span class="line">    print(a)</span><br><span class="line">else:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure></p><p>观察显示的的结果并尝试完成以下任务：</p><ol><li>思考这段代码中每行都表示什么意思</li><li>修改a的值或将a的值变为输入时赋值</li></ol><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在上一期的末尾我们说到一段代码&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;
      
    
    </summary>
    
      <category term="Python入门" scheme="https://williampetermatthew.github.io/categories/Python%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Python入门" scheme="https://williampetermatthew.github.io/tags/Python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>再见，极域！</title>
    <link href="https://williampetermatthew.github.io/blog/Goodbye-Top-Domain/"/>
    <id>https://williampetermatthew.github.io/blog/Goodbye-Top-Domain/</id>
    <published>2019-01-29T12:14:57.000Z</published>
    <updated>2019-02-02T14:30:45.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-引言"><a href="#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h1><p>作为学生党的我们，总想在微机课上跨越老师的控制走向那万千互联网，可这时一款名为极域的软件就阻挡了我们，我们的电脑屏幕竟然在这款软件的监控之下，而且更气的是，当我们打开了任务管理器，试图结束掉它时，它提示我们</p><p><img src="https://williampetermatthew.github.io/pic/GBTD1.png" alt="拒绝访问"><br>拒绝访问</p><p>如果说我能直接结束掉它也行，但是这<strong>拒绝访问</strong>四个字激怒了我，作为官封的学校机房管理员，我简直无法容忍。</p><h1 id="0x01-暴力出奇迹"><a href="#0x01-暴力出奇迹" class="headerlink" title="0x01 暴力出奇迹"></a>0x01 暴力出奇迹</h1><p>有一个神奇的程序，它在或不在Windows中，都不影响人们的日常使用。但是，它被称为Windows下的大杀器，那就是 <strong>ntsd</strong> 。  </p><p>我们在命令行里输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ntsd -c q -pn StudentMain.exe</span><br></pre></td></tr></table></figure></p><p><img src="https://williampetermatthew.github.io/pic/GBTD2.png" alt=""></p><p>我嘞个乖乖，这个暴力工具一上，直接秒掉啊有木有</p><h1 id="0x02-暴力的优化"><a href="#0x02-暴力的优化" class="headerlink" title="0x02 暴力的优化"></a>0x02 暴力的优化</h1><p>我们按Win+R，输入register，打开注册表编辑器</p><p>打开下面两个中你找得到的那一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\TopDomain\e-Learning Class\Student</span><br><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\TopDomain\e-Learning Class\Student</span><br></pre></td></tr></table></figure></p><p><img src="https://williampetermatthew.github.io/pic/GBTD3.png" alt=""></p><p>找到 PreventKill ，并双击打开将值从1改为0，然后点选确定保存。<br><img src="https://williampetermatthew.github.io/pic/GBTD4.png" alt=""></p><p>这时候我们打开任务管理器，尝试结束掉它<br><img src="https://williampetermatthew.github.io/pic/GBTD1.png" alt=""><br>不好意思啊，修改了注册表后，我们需要关闭程序再打开来让它重新加载各项数据。。。</p><p>等下，我们还是待暴力解决啊。。。</p><p>不过这样解决后，我们就可以用任务管理器解决它了！</p><h1 id="0x03-简单部分分"><a href="#0x03-简单部分分" class="headerlink" title="0x03 简单部分分"></a>0x03 简单部分分</h1><p>我们还是打开注册表编辑器，打开下面两个中你找得到的那一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\TopDomain\e-Learning Class Standard\1.00</span><br><span class="line">计算机\HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\TopDomain\e-Learning Class Standard\1.00</span><br></pre></td></tr></table></figure></p><p><img src="https://williampetermatthew.github.io/pic/GBTD5.png" alt=""></p><p>找到 UninstallPasswd ，查看它的值，发现为PasswdXXX，这样的文本，其中XXX就为学生端密码，在设置里填上XXX，就可以愉快地修改配置了。</p><p><img src="https://williampetermatthew.github.io/pic/GBTD6.png" alt=""></p><p>（部分学生端的设置没有一些选项，这些只能通过修改注册表并重启学生端解决设置<del>（当然你能碰讲台上那个教师端更方便。。。）</del>）</p><h1 id="0x04-文艺的正解"><a href="#0x04-文艺的正解" class="headerlink" title="0x04 文艺的正解"></a>0x04 文艺的正解</h1><ul><li>Q：为什么我的注册表长这样，密码输入为 123456 或者 [123456] ，都不对呢？  </li><li>A：这个原因很简单，极域的公司又不是一帮傻子，当有学校反映学生可以找到密码的那一刻起，极域公司就加密了密码，然后就只会在注册表留下Passwd[123456]，无论你找格式改成什么都不对。。。</li></ul><p><img src="https://williampetermatthew.github.io/pic/GBTD7.png" alt=""></p><p>这是极域2015V5.0及以上版本（也就是2.0以上版本）尤其是豪华版的加密机制，我们怎么解决这个问题呢？ </p><blockquote><p><strong>Warning!前方高能！</strong>请在有一定计算机方面知识储备后食用以下文本</p></blockquote><p>我们还是可以通过一款反汇编软件解决掉它—— ollydbg 。</p><p><img src="https://williampetermatthew.github.io/pic/GBTD8.png" alt=""></p><p>我们打开它，点击File-&gt;Attach，找到StudentMain并附加进程。</p><p><img src="https://williampetermatthew.github.io/pic/GBTD9.png" alt=""></p><p>按Ctrl+G跟随表达式00401000。</p><p><img src="https://williampetermatthew.github.io/pic/GBTD10.png" alt=""></p><p><img src="https://williampetermatthew.github.io/pic/GBTD11.png" alt=""></p><p>然后我们搜索字符串，搜到了两处 mythware_super_password ，分别在表达式00431137和0045240E位置。</p><p><img src="https://williampetermatthew.github.io/pic/GBTD12.png" alt=""></p><p><img src="https://williampetermatthew.github.io/pic/GBTD13.png" alt=""></p><p>然后我们按F2标记为程序断点。</p><p>然后我们在设置里瞎输入一串密码并点确定，发现学生端暂停了。</p><p><img src="https://williampetermatthew.github.io/pic/GBTD14.png" alt=""></p><p>这时我们按F8单步运行学生端程序，当运行到表达式0045242A处时，发现密码就在后方显示 UNICODE “XXX” ，那么这个XXX就是学生端的密码了。</p><p><img src="https://williampetermatthew.github.io/pic/GBTD15.png" alt=""></p><p>此时我们继续运行程序，然后File-&gt;Detach，接着关闭ollydbg，再次输入解锁密码即可进入设置页面，屡试不爽。</p><p><img src="https://williampetermatthew.github.io/pic/GBTD6.png" alt=""></p><h1 id="0x05-一些学生端的梗"><a href="#0x05-一些学生端的梗" class="headerlink" title="0x05 一些学生端的梗"></a>0x05 一些学生端的梗</h1><ul><li><strong>重要的一点：</strong>我们修改本机IP地址，就不会受教师控制。缺点是容易导致IP地址冲突，而且新版本教师机搜学生机好像变快了，不过教师还是不知道你的新IP，它会看到有台新电脑而且你的没上线，在有人不在时稳得很。</li></ul><p>接着我们来看一些高端的操作</p><ol><li>万能的拔网线法<ul><li>实用系数:★★★★★</li><li>危险系数:★★★★★</li><li>难度系数:☆☆☆☆☆</li><li>操作：无需细讲，大家都懂。</li><li>评价：<ul><li>一言不合把网线，稍等片刻便离线。</li><li>甚是危险之行为，老师必然会知道。</li></ul></li></ul></li><li>获取管理员密码<ul><li>实用系数:★★★★☆</li><li>危险系数:★★★☆☆</li><li>难度系数:★★★★☆</li><li>操作：已在上文提到。</li><li>评价：<ul><li>拿到密码无大用，卸载删除均还原。</li><li>看到防删进程卡，一怒之下输密码。</li></ul></li></ul></li><li>删除进程大法好<ul><li>实用系数:★★★☆☆</li><li>危险系数:★★☆☆☆</li><li>难度系数:★★★☆☆</li><li>操作：基于大法2，可以使用ntsd或者具有同样或略低级的杀伤性程序。</li><li>评价：<ul><li>删除进程真是爽，教师监控看不了。</li><li>万一没有大杀器，完蛋，那是真凉。</li></ul></li></ul></li><li>召唤防火墙大法<ul><li>实用系数:★☆☆☆☆</li><li>危险系数:★★★★★</li><li>难度系数:★★☆☆☆</li><li>操作：<ul><li>打开控制面板–&gt;Windows防火墙–&gt;例外–&gt;找到“StudentMain.exe”删除</li><li>返回常规–&gt;选择“启动防火墙–&gt;勾选”不允许例外”</li><li>同理，我们还经验禁用网卡、删网络进程，原理都是一样的</li></ul></li><li>评价：<ul><li>禁这不如把线爽，同桌妹子装逼强。</li><li>要是老师突然来，形象瞬间跌到爆。</li></ul></li></ul></li><li>玄学智能ABC法<ul><li>实用系数:★★☆☆☆</li><li>危险系数:★☆☆☆☆</li><li>难度系数:★☆☆☆☆</li><li>操作：<ul><li>智能ABC是很老很老的输入法<del>，装机的大叔一般都很恋旧，都会装上的</del>。</li><li>然而智能ABC有个算不上漏洞的漏洞，依次输入”v”+”↑”+”del”+”enter”可以刷新屏幕。</li><li>对于早些版本的极域电子教室，可以直接回到屏幕，且被控端还是开着的，老师一点都不知道。</li><li>如果你机子的版本比较老，不妨试试。</li></ul></li><li>评价：<ul><li>输入法是真的玄，怀旧装机也很闲。</li><li>漏洞出自老人手，极域这下真的愁。</li></ul></li></ul></li><li>最小化屏幕大法<ul><li>实用系数:★★☆☆☆</li><li>危险系数:★☆☆☆☆</li><li>难度系数:★★☆☆☆</li><li>操作：<ul><li>和上面的智能ABC法异曲同工。</li><li>有些版本的电子教室默认开启可以最小化屏幕的功能。</li><li>这时候我们输入”q”+”ctrl”就可以回到桌面，老师当然不知道的。</li></ul></li><li>评价：<ul><li>异曲同工真的妙，老师完全不知道。</li><li>要说这是因为啥，漏洞太大还要查。</li></ul></li></ul></li><li>鸟瞰图卡出大法<ul><li>实用系数:★☆☆☆☆</li><li>危险系数:★☆☆☆☆</li><li>难度系数:★★☆☆☆</li><li>操作：<ul><li>我也不知道问什么会发现这个东西。。。</li><li>那时我想起拖动窗口，快速滑动即可最小化所有窗口返回桌面。</li><li>毕竟实在闲得慌，手痒痒点开了鸟瞰图模式</li><li>来回滑动，没用……</li><li>无聊的我点击旋转按钮，左转、右转、越按越快、咔嚓、跳到桌面了，啊哈……</li></ul></li><li>评价：<ul><li>跟着我左转右转，形成一个快动作。</li><li>优雅地回到桌面，需要一些神操作。</li></ul></li></ul></li><li>编程法<ul><li>实用系数:?????</li><li>危险系数:?????</li><li>难度系数:?????</li><li>操作：<ul><li>有一篇文章，有神犇用C语言编了个针对极域电子教室的小程序，甚至可以反控教师端，有兴趣的童鞋可以去找找。。。</li></ul></li><li>评价：<ul><li>最强王者写程序，教师都要抖三抖。</li><li>万一惹了他生气，直播教师被反击。</li></ul></li></ul></li><li>总结<ul><li>是个程序漏洞多，只是看你怎么说。</li><li>物理方式很暴力，鼠标操作更牛气。</li><li>程序暴力也神气，只是附加显大气。</li><li>防火大法装逼爽，玄学软件治三甲。</li><li>鸟瞰操作稳准狠，编程操作也牛逼。</li><li>俯仰不愧那天地，褒贬自有千秋种。</li></ul></li></ol><h1 id="0x06-后记"><a href="#0x06-后记" class="headerlink" title="0x06 后记"></a>0x06 后记</h1><p>当我们学校仍然采用老版本的极域时，贺帅老师与我有过这样的对话：</p><ul><li>我把网线一把，你关了教师机也没用</li><li>关闭教师机你就给我从教室里出去</li><li><ul><li>贺：我改了个密码</li><li>张：不就是xxx吗？</li><li>贺：那以后密码谁传的我就知道了</li><li>张：这么弱的东西是个会看百度经验的人都会吧喂</li><li>贺：……</li></ul></li><li>赶紧给我上楼做题</li></ul><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-引言&quot;&gt;&lt;a href=&quot;#0x00-引言&quot; class=&quot;headerlink&quot; title=&quot;0x00 引言&quot;&gt;&lt;/a&gt;0x00 引言&lt;/h1&gt;&lt;p&gt;作为学生党的我们，总想在微机课上跨越老师的控制走向那万千互联网，可这时一款名为极域的软件就阻挡了我们
      
    
    </summary>
    
      <category term="柯基" scheme="https://williampetermatthew.github.io/categories/%E6%9F%AF%E5%9F%BA/"/>
    
    
      <category term="柯基" scheme="https://williampetermatthew.github.io/tags/%E6%9F%AF%E5%9F%BA/"/>
    
  </entry>
  
  <entry>
    <title>二维树状数组</title>
    <link href="https://williampetermatthew.github.io/blog/data-2DBinaryIndexTree/"/>
    <id>https://williampetermatthew.github.io/blog/data-2DBinaryIndexTree/</id>
    <published>2019-01-26T06:50:25.000Z</published>
    <updated>2019-02-02T14:12:45.722Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二维树状数组1"><a href="#二维树状数组1" class="headerlink" title="二维树状数组1"></a><a href="https://www.luogu.org/problemnew/show/U44574" target="_blank" rel="noopener">二维树状数组1</a></h1><p>单点修改，矩阵查询。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y&lt;=ny;y+=lowbit(y))</span><br><span class="line">            tree[x][y]+=d;</span><br><span class="line">&#125;</span><br><span class="line">   add(x,y,k);</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line"><span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y;y-=lowbit(y))</span><br><span class="line">            s+=tree[x][y];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>;</span><br><span class="line">    s+=ask(xb,yb);</span><br><span class="line">    s-=ask(xb,ya<span class="number">-1</span>);</span><br><span class="line">    s-=ask(xa<span class="number">-1</span>,yb);</span><br><span class="line">    s+=ask(xa<span class="number">-1</span>,ya<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,range_ask(xa,ya,xb,yb));</span><br></pre></td></tr></table></figure><p>完整代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tree[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> nx,ny;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y&lt;=ny;y+=lowbit(y))</span><br><span class="line">            tree[x][y]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(xa,ya,d);</span><br><span class="line">    add(xa,yb+<span class="number">1</span>,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,ya,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,yb+<span class="number">1</span>,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line"><span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y;y-=lowbit(y))</span><br><span class="line">            s+=tree[x][y];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>;</span><br><span class="line">    s+=ask(xb,yb);</span><br><span class="line">    s-=ask(xb,ya<span class="number">-1</span>);</span><br><span class="line">    s-=ask(xa<span class="number">-1</span>,yb);</span><br><span class="line">    s+=ask(xa<span class="number">-1</span>,ya<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;nx,&amp;ny,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,y,xa,xb,ya,yb;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k; </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">            add(x,y,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;xa,&amp;ya,&amp;xb,&amp;yb);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,range_ask(xa,ya,xb,yb));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="二维树状数组2"><a href="#二维树状数组2" class="headerlink" title="二维树状数组2"></a><a href="https://www.luogu.org/problemnew/show/U44587" target="_blank" rel="noopener">二维树状数组2</a></h1><p>矩阵修改，单点查询。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y&lt;=ny;y+=lowbit(y))</span><br><span class="line">            tree[x][y]+=d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(xa,ya,d);</span><br><span class="line">    add(xa,yb+<span class="number">1</span>,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,ya,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,yb+<span class="number">1</span>,d);</span><br><span class="line">&#125;</span><br><span class="line">range_add(xa,ya,xb,yb,k);</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line"><span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y;y-=lowbit(y))</span><br><span class="line">            s+=tree[x][y];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ask(x,y));</span><br></pre></td></tr></table></figure><p>完整代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tree[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> nx,ny;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(;x&lt;=nx;x+=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y&lt;=ny;y+=lowbit(y))</span><br><span class="line">            tree[x][y]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">range_add</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb,<span class="keyword">long</span> <span class="keyword">long</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add(xa,ya,d);</span><br><span class="line">    add(xa,yb+<span class="number">1</span>,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,ya,-d);</span><br><span class="line">    add(xb+<span class="number">1</span>,yb+<span class="number">1</span>,d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s;</span><br><span class="line"><span class="keyword">int</span> sy=y;</span><br><span class="line">    <span class="keyword">for</span>(s=<span class="number">0</span>;x;x-=lowbit(x))</span><br><span class="line">        <span class="keyword">for</span>(y=sy;y;y-=lowbit(y))</span><br><span class="line">            s+=tree[x][y];</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">range_ask</span><span class="params">(<span class="keyword">int</span> xa,<span class="keyword">int</span> ya,<span class="keyword">int</span> xb,<span class="keyword">int</span> yb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s=<span class="number">0</span>;</span><br><span class="line">    s+=ask(xb,yb);</span><br><span class="line">    s-=ask(xb,ya<span class="number">-1</span>);</span><br><span class="line">    s-=ask(xa<span class="number">-1</span>,yb);</span><br><span class="line">    s+=ask(xa<span class="number">-1</span>,ya<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;nx,&amp;ny,&amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,opt,x,y,xa,xb,ya,yb;i&lt;=q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;opt);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> k;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%lld"</span>,&amp;xa,&amp;ya,&amp;xb,&amp;yb,&amp;k);</span><br><span class="line">            range_add(xa,ya,xb,yb,k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ask(x,y));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="数据结垢" scheme="https://williampetermatthew.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E5%9E%A2/"/>
    
    
      <category term="数据结垢" scheme="https://williampetermatthew.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E5%9E%A2/"/>
    
  </entry>
  
  <entry>
    <title>后缀自动机</title>
    <link href="https://williampetermatthew.github.io/blog/string-SAM/"/>
    <id>https://williampetermatthew.github.io/blog/string-SAM/</id>
    <published>2019-01-19T06:43:38.000Z</published>
    <updated>2019-02-14T13:05:26.914Z</updated>
    
    <content type="html"><![CDATA[<p>普通的后缀自动机</p><p>代码如下：<br>洛谷P3975 [TJOI2015]弦论<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2010000</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> fail[N],son[N][<span class="number">26</span>],len[N],siz[N],sum[N];</span><br><span class="line"><span class="keyword">int</span> rt=<span class="number">1</span>,lst=rt,tot=<span class="number">1</span>,n,t[N],A[N],tp,k;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=lst,now=++tot;</span><br><span class="line">lst=now;</span><br><span class="line">    len[now]=len[fa]+<span class="number">1</span>;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(fa&amp;&amp;!son[fa][c])</span><br><span class="line">son[fa][c]=now,fa=fail[fa];</span><br><span class="line">    <span class="keyword">if</span>(!fa)</span><br><span class="line">&#123;</span><br><span class="line">fail[now]=rt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">int</span> x=son[fa][c],y=++tot;</span><br><span class="line">    <span class="keyword">if</span>(len[fa]+<span class="number">1</span>==len[x])</span><br><span class="line">&#123;</span><br><span class="line">fail[now]=x;</span><br><span class="line">tot--;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    len[y]=len[fa]+<span class="number">1</span>;</span><br><span class="line">fail[y]=fail[x];</span><br><span class="line">fail[x]=fail[now]=y;</span><br><span class="line">    <span class="built_in">memcpy</span>(son[y],son[x],<span class="keyword">sizeof</span>(son[y]));</span><br><span class="line">    <span class="keyword">while</span>(fa&amp;&amp;son[fa][c]==x)</span><br><span class="line">son[fa][c]=y,fa=fail[fa];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">t[len[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">t[i]+=t[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)</span><br><span class="line">A[t[len[i]]--]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> now=A[i];</span><br><span class="line"><span class="keyword">if</span>(tp)siz[fail[now]]+=siz[now];</span><br><span class="line"><span class="keyword">else</span> siz[now]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">siz[rt]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=tot;i;i--)</span><br><span class="line">&#123;</span><br><span class="line">sum[A[i]]=siz[A[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)</span><br><span class="line"><span class="keyword">if</span>(son[A[i]][j])</span><br><span class="line">sum[A[i]]+=sum[son[A[i]][j]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,s+<span class="number">1</span>,&amp;tp,&amp;k);</span><br><span class="line">n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">insert(s[i]-<span class="string">'a'</span>);</span><br><span class="line">    work();</span><br><span class="line"><span class="keyword">if</span>(k&gt;sum[rt])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> now=rt;</span><br><span class="line"><span class="keyword">while</span>((k-=siz[now])&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k&gt;sum[son[now][p]])k-=sum[son[now][p++]];</span><br><span class="line">now=son[now][p];</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">'a'</span>+p);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>广义后缀自动机</p><p>代码如下：<br>洛谷P2336 [SCOI2012]喵星球上的点名<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">600005</span>;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> fail[N],len[N],siz[N],sum[N];</span><br><span class="line"><span class="keyword">int</span> rt=<span class="number">1</span>,lst,tot=<span class="number">1</span>,n,m,t[N],A[N],len1[N],len2[N],las[N];</span><br><span class="line"><span class="keyword">int</span> str[N],marked[N],ans[N];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;son[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=lst,now=++tot;</span><br><span class="line">    lst=now;</span><br><span class="line">    len[now]=len[fa]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(fa&amp;&amp;!son[fa][c])</span><br><span class="line">        son[fa][c]=now,fa=fail[fa];</span><br><span class="line">    <span class="keyword">if</span>(!fa)</span><br><span class="line">    &#123;</span><br><span class="line">        fail[now]=rt;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> x=son[fa][c],y=++tot;</span><br><span class="line">    <span class="keyword">if</span>(len[fa]+<span class="number">1</span>==len[x])</span><br><span class="line">    &#123;</span><br><span class="line">        fail[now]=x;</span><br><span class="line">        tot--;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    len[y]=len[fa]+<span class="number">1</span>;</span><br><span class="line">    fail[y]=fail[x];</span><br><span class="line">    fail[x]=fail[now]=y;</span><br><span class="line">    son[y]=son[x];</span><br><span class="line">    <span class="keyword">while</span>(fa&amp;&amp;son[fa][c]==x)</span><br><span class="line">        son[fa][c]=y,fa=fail[fa];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata1</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&amp;&amp;las[x]!=y;x=fail[x])</span><br><span class="line">    &#123;</span><br><span class="line">        siz[x]++;</span><br><span class="line">        las[x]=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updata2</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x&amp;&amp;las[x]!=y;x=fail[x])</span><br><span class="line">    &#123;</span><br><span class="line">        ans[y]+=marked[x];</span><br><span class="line">        las[x]=y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">int</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len1[i]);</span><br><span class="line">        lst=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len1[i];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;str[++tmp]);</span><br><span class="line">            insert(str[tmp]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len2[i]);</span><br><span class="line">        lst=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=len2[i];j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;str[++tmp]);</span><br><span class="line">            insert(str[tmp]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(las,<span class="number">0</span>,<span class="keyword">sizeof</span>(las));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x=rt;j&lt;=len1[i];j++)updata1(x=son[x][str[++tmp]],i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x=rt;j&lt;=len2[i];j++)updata1(x=son[x][str[++tmp]],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,le,x;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;le);</span><br><span class="line">        <span class="keyword">bool</span> tag=<span class="number">0</span>;x=rt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,d;j&lt;=le;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d);</span><br><span class="line">            <span class="keyword">if</span>(!tag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(son[x][d])</span><br><span class="line">                    x=son[x][d];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    tag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!tag)</span><br><span class="line">        &#123;</span><br><span class="line">            marked[x]++;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,siz[x]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(las,<span class="number">0</span>,<span class="keyword">sizeof</span>(las));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x=rt;j&lt;=len1[i];j++)updata2(x=son[x][str[++tmp]],i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>,x=rt;j&lt;=len2[i];j++)updata2(x=son[x][str[++tmp]],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;普通的后缀自动机&lt;/p&gt;
&lt;p&gt;代码如下：&lt;br&gt;洛谷P3975 [TJOI2015]弦论&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/s
      
    
    </summary>
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/categories/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/tags/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
  </entry>
  
  <entry>
    <title>【Python入门】02 Python基础1——输入输出</title>
    <link href="https://williampetermatthew.github.io/blog/Python-02/"/>
    <id>https://williampetermatthew.github.io/blog/Python-02/</id>
    <published>2019-01-18T23:46:00.000Z</published>
    <updated>2019-02-14T13:55:11.993Z</updated>
    
    <content type="html"><![CDATA[<p>在上一期的末尾我们说到三段大差不差的代码</p><p>代码的第一行都有计算<code>100+200</code>的意思，有的也得到了<code>300</code>，第二行都有显示<code>Hello, world!</code>的意思也都输出了</p><p>第一段代码在Python交互模式下输出了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">300</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><p>第二段代码正常运行输出了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">300</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><p>第三段代码正常运行却只输出了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><p>这是为什么呢？<br>原因在于Python交互模式会将你执行的代码结果输出，而正常的程序结果只会在写了输出语句时才会输出</p><p><strong>我们在下文的代码中，如果开头有”&gt;&gt;&gt; “即表示在Python交互模式下执行</strong></p><h1 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h1><p>输入和输出需要利用<code>input()</code>和<code>print()</code>，我们把这种具有一定固定作用(function)的语句称为<strong>函数(function)</strong>。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>在print()的括号里加上字符串即可输出，就比如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure></p><p>print()里也可以接受多个字符串，用”,”隔开，会输出一个空格，例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'Hello'</span>,<span class="string">'The'</span>,<span class="string">'World'</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello The World</span><br></pre></td></tr></table></figure></p><p>当然print()也支持输出整数或者输出计算结果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">300</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="number">100</span>+<span class="number">200</span>)</span><br></pre></td></tr></table></figure></p><p>输出结果均为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">300</span><br></pre></td></tr></table></figure></p><p>当然我们也可以结合字符串把结果变得更好看一些，例如<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(<span class="string">'100+200='</span>,<span class="number">100</span>+<span class="number">200</span>)</span><br></pre></td></tr></table></figure></p><p>这样就会输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100+200=300</span><br></pre></td></tr></table></figure></p><p>现在你已经掌握了基本的输出。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>现在我们可以通过print()输出结果了，但是我们想要用一个程序计算很多种情况而不想每次都去改程序怎么办？</p><p>我们这就要利用input()了，input()可以读取一个字符串<br>我们如果要利用这个字符串，就需要一个<strong>变量</strong>去保存<br>我们使用name变量（name只是一个名称，不同于print和input这种函数的名字，可以在不冲突的前提下任意起）保存这样的字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name=input()</span><br><span class="line">Peter_Matthew</span><br></pre></td></tr></table></figure></p><p>当我们输入第一行后，Python交互模式就在等待我们输入了，我们可以任意输入一些东西，比如输入第二行的Peter_Matthew。</p><p>输入完后不会有任何提示而是又回到了”&gt;&gt;&gt; “的提示状态，我们刚才输入的内容保存到了变量name里<br>我们可以直接输入<code>name</code>查看变量内容：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name</span><br></pre></td></tr></table></figure></p><p>结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;Peter_Matthew&apos;</span><br></pre></td></tr></table></figure></p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>请注意，我们初中设正方形的边长为$a$,则正方形的面积就为$a^2$，我们把a看做一个变量，用于计算不同的a的不同的面积，比如：</p><ul><li>a=1,S=a<em>a=1</em>1=1</li><li>a=1.5,S=a<em>a=1.5</em>1.5=2.25</li></ul><p>计算机中的变量不仅可以为整数或浮点数（带小数的数），还可以是字符串，上文的name变量就是一个字符串</p><p>我们可以通过print函数输出变量内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(name)</span><br></pre></td></tr></table></figure></p><p>这样的结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Peter_Matthew</span><br></pre></td></tr></table></figure></p><h1 id="输入输出的一些小点"><a href="#输入输出的一些小点" class="headerlink" title="输入输出的一些小点"></a>输入输出的一些小点</h1><p>这样，我们就可以魔改hello world程序了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=input()</span><br><span class="line">print(<span class="string">'hello,'</span>,name)</span><br></pre></td></tr></table></figure></p><p>运行后输入Peter_Matthew，我们便可以看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello, Peter_Matthew</span><br></pre></td></tr></table></figure></p><p>我们发现没有任何提示就让你输入东西，十分地不方便，我们就想让程序先输出一行提示，这样我们的用户就可以根据提示输入了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Please enter your name here: '</span>)</span><br><span class="line">name=input()</span><br><span class="line">print(<span class="string">'hello,'</span>,name)</span><br></pre></td></tr></table></figure></p><p>这样运行的结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Please enter your name here:</span><br></pre></td></tr></table></figure></p><p>此时我们键入Peter_Matthew，即可得到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello, Peter_Matthew</span><br></pre></td></tr></table></figure></p><p>有没有更简单的方法呢？<br>当然有的，input()函数可以让你显示一个字符串提示用户，于是我们就把代码改成了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=input(<span class="string">'Please enter your name here: '</span>)</span><br><span class="line">print(<span class="string">'hello,'</span>,name)</span><br></pre></td></tr></table></figure></p><p>这样运行的结果和上文的程序类似，只不过上面的程序输入时换行了，下面的程序输入时没有换行（在同一行输入的）</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>任何程序，都是为了执行一定特殊的操作。<br>有了输入，用户才能告诉程序所需的信息。<br>有了输出，程序运行后才能告诉用户结果。  </p><p>输入的英文为Input，输出的英文为Output，因此我们把输入输出统称为Input/Output，简称I/O，有时也写作IO。</p><hr><h1 id="提前尝试"><a href="#提前尝试" class="headerlink" title="提前尝试"></a>提前尝试</h1><p>请执行此代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a&gt;=<span class="number">0</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure></p><p>观察显示的的结果并尝试完成以下任务：</p><ol><li>思考这段代码中每行都表示什么意思</li><li>修改a的值或将a的值变为输入时赋值</li></ol><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在上一期的末尾我们说到三段大差不差的代码&lt;/p&gt;
&lt;p&gt;代码的第一行都有计算&lt;code&gt;100+200&lt;/code&gt;的意思，有的也得到了&lt;code&gt;300&lt;/code&gt;，第二行都有显示&lt;code&gt;Hello, world!&lt;/code&gt;的意思也都输出了&lt;/p&gt;
&lt;p&gt;第一段
      
    
    </summary>
    
      <category term="Python入门" scheme="https://williampetermatthew.github.io/categories/Python%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Python入门" scheme="https://williampetermatthew.github.io/tags/Python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>后缀数组</title>
    <link href="https://williampetermatthew.github.io/blog/string-SA/"/>
    <id>https://williampetermatthew.github.io/blog/string-SA/</id>
    <published>2019-01-14T01:47:16.000Z</published>
    <updated>2019-02-02T14:03:44.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h1><h2 id="后缀"><a href="#后缀" class="headerlink" title="后缀"></a>后缀</h2><p>对于一个串来说，第i个字符开始的串就是后缀。。。<br>举个栗子：对于串ababa来说，ababa、baba、aba、ba、a都是它的后缀</p><h2 id="后缀数组-1"><a href="#后缀数组-1" class="headerlink" title="后缀数组"></a>后缀数组</h2><p>我们将后缀编号（其实就是开始的那个字符在原串中位置）然后按照字典序排序这些后缀，得到了以下顺序</p><ol><li>a</li><li>aba</li><li>ababa</li><li>ba</li><li>baba</li></ol><p>可以看到后缀按字典序排名后的顺序是 5 3 1 4 2 ，我们开一个sa数组（即后缀数组），用sa[i]表示排名为i的后缀的编号（开始字符在原串中的位置）。</p><p>同时我们可以开一个rk数组，用rk[i]表示编号为i的后缀的排名。</p><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>我们可以考虑$O(n\log{n})$排序后缀，但考虑单次任意比较的复杂度是$O(n)$的，所以总复杂度趋近$O(n^2\log{n})$，肯定会被大数据卡掉。</p><h3 id="优化1：倍增"><a href="#优化1：倍增" class="headerlink" title="优化1：倍增"></a>优化1：倍增</h3><p>我们还是用这个例子开始排序</p><ol><li>ababa</li><li>baba</li><li>aba</li><li>ba</li><li>a</li></ol><p>我们先比较这些后缀数组的第一位</p><ol><li>ababa</li><li>aba</li><li>a</li><li>baba</li><li>ba</li></ol><p>然后比较它们的前两位（因为第一位已经排好，其实这里就是比较第二位）</p><ol><li>a</li><li>ababa</li><li>aba</li><li>baba</li><li>ba</li></ol><p>然后比较他们的前四位（因为前两位已经排好，其实这里就是比较三、四两位）</p><ol><li>a</li><li>aba</li><li>ababa</li><li>ba</li><li>baba</li></ol><p>然后发现对于这个例子已经排序完成，额，如果没有排序完成，我们需要一直这么下去。假设现在还没有完成，我们需要比较前五位（其实就是比较最大的小于n的2的次方位到第n位之间的位）</p><p>额，不好意思，这样好像没有什么用啊。。。</p><p>额。。。</p><p>我们这么处理，就会有用了。在读入字符串后，我们根据单个字符排序<br>（以每个后缀的第一个字符排序）</p><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr></tbody></table><p>接着向后合并相邻字符，再次排名，我们发现a原来排名是1，b原来是2，a向b合并后是1 2，b向a合并是2 1，我们把合并后的名次排名，便成了2和3（还有一个单字符的a，其实是补零排序）<br>对，我们这样每次排序两个排名组成的数即可。</p><table><thead><tr><th style="text-align:center">ab</th><th style="text-align:center">ba</th><th style="text-align:center">ab</th><th style="text-align:center">ba</th><th style="text-align:center">a</th></tr></thead><tbody><tr><td style="text-align:center">a b</td><td style="text-align:center">b a</td><td style="text-align:center">a b</td><td style="text-align:center">b a</td><td style="text-align:center">a</td></tr><tr><td style="text-align:center">1 2</td><td style="text-align:center">2 1</td><td style="text-align:center">1 2</td><td style="text-align:center">2 1</td><td style="text-align:center">1 0</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">1</td></tr></tbody></table><p>我们接着向后合并成4个字符</p><table><thead><tr><th style="text-align:center">abab</th><th style="text-align:center">baba</th><th style="text-align:center">aba</th><th style="text-align:center">ba</th><th style="text-align:center">a</th></tr></thead><tbody><tr><td style="text-align:center">ab ab</td><td style="text-align:center">ba ba</td><td style="text-align:center">ab a</td><td style="text-align:center">ba</td><td style="text-align:center">a</td></tr><tr><td style="text-align:center">2 2</td><td style="text-align:center">3 3</td><td style="text-align:center">2 1</td><td style="text-align:center">3 0</td><td style="text-align:center">1 0</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">5</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">1</td></tr></tbody></table><p>接着合并知道合并到最大的小于n的2的次方个字符，然后最后合并到n个</p><table><thead><tr><th style="text-align:center">ababa</th><th style="text-align:center">baba</th><th style="text-align:center">aba</th><th style="text-align:center">ba</th><th style="text-align:center">a</th></tr></thead><tbody><tr><td style="text-align:center">abab a</td><td style="text-align:center">baba</td><td style="text-align:center">aba</td><td style="text-align:center">ba</td><td style="text-align:center">a</td></tr><tr><td style="text-align:center">3 1</td><td style="text-align:center">5 0</td><td style="text-align:center">2 0</td><td style="text-align:center">4 0</td><td style="text-align:center">1 0</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">5</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">1</td></tr></tbody></table><p>好了，我们排序完了。</p><p>可以发现我们一共整体排序了$\log{n}$次，一次排序的复杂度是$O(n\log{n})$。我们发现，这样我们就把整体的复杂度降到了$O(n\log^2{n})$</p><p>最后再举一个常见的例子，希望大家看完这个后能彻底明白这个排序的过程</p><p>Example: aabaaaab</p><p>第一次</p><table><thead><tr><th style="text-align:center">a</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">a</th><th style="text-align:center">a</th><th style="text-align:center">a</th><th style="text-align:center">a</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td></tr></tbody></table><p>第二次</p><table><thead><tr><th style="text-align:center">aa</th><th style="text-align:center">ab</th><th style="text-align:center">ba</th><th style="text-align:center">aa</th><th style="text-align:center">aa</th><th style="text-align:center">aa</th><th style="text-align:center">ab</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center">a a</td><td style="text-align:center">a b</td><td style="text-align:center">b a</td><td style="text-align:center">a a</td><td style="text-align:center">a a</td><td style="text-align:center">a a</td><td style="text-align:center">a b</td><td style="text-align:center">b</td></tr><tr><td style="text-align:center">1 1</td><td style="text-align:center">1 2</td><td style="text-align:center">2 1</td><td style="text-align:center">1 1</td><td style="text-align:center">1 1</td><td style="text-align:center">1 1</td><td style="text-align:center">1 1</td><td style="text-align:center">2 0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr></tbody></table><p>第三次</p><table><thead><tr><th style="text-align:center">aaba</th><th style="text-align:center">abaa</th><th style="text-align:center">baaa</th><th style="text-align:center">aaaa</th><th style="text-align:center">aaab</th><th style="text-align:center">aab</th><th style="text-align:center">ab</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center">aa ba</td><td style="text-align:center">ab aa</td><td style="text-align:center">ba aa</td><td style="text-align:center">aa aa</td><td style="text-align:center">aa ab</td><td style="text-align:center">aa b</td><td style="text-align:center">ab</td><td style="text-align:center">b</td></tr><tr><td style="text-align:center">1 4</td><td style="text-align:center">2 1</td><td style="text-align:center">4 1</td><td style="text-align:center">1 1</td><td style="text-align:center">1 2</td><td style="text-align:center">1 3</td><td style="text-align:center">2 0</td><td style="text-align:center">3 0</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">6</td><td style="text-align:center">8</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">5</td><td style="text-align:center">7</td></tr></tbody></table><p>第四次</p><table><thead><tr><th style="text-align:center">aabaaaab</th><th style="text-align:center">abaaaab</th><th style="text-align:center">baaaab</th><th style="text-align:center">aaaab</th><th style="text-align:center">aaab</th><th style="text-align:center">aab</th><th style="text-align:center">ab</th><th style="text-align:center">b</th></tr></thead><tbody><tr><td style="text-align:center">aaba aaab</td><td style="text-align:center">abaa aab</td><td style="text-align:center">baaa ab</td><td style="text-align:center">aaaa b</td><td style="text-align:center">aaab</td><td style="text-align:center">aab</td><td style="text-align:center">ab</td><td style="text-align:center">b</td></tr><tr><td style="text-align:center">4 2</td><td style="text-align:center">6 3</td><td style="text-align:center">8 5</td><td style="text-align:center">1 7</td><td style="text-align:center">2 0</td><td style="text-align:center">3 0</td><td style="text-align:center">5 0</td><td style="text-align:center">7 0</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">6</td><td style="text-align:center">8</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td><td style="text-align:center">5</td><td style="text-align:center">7</td></tr></tbody></table><p>排序完成</p><p>上面的过程用图表示为<br><img src="https://williampetermatthew.github.io/pic/c2cec3fdfc03924586f1a8948694a4c27c1e25e0.jpg" alt=""></p><h3 id="优化2：基数排序"><a href="#优化2：基数排序" class="headerlink" title="优化2：基数排序"></a>优化2：基数排序</h3><p>如果我们用快排的话还是太慢，考虑到每一次排序我们都是在排两位数，所以我们用基数排序优化一下可以将排序优化到$O(n)$，这样总复杂度就降到了$O(n\log{n})$</p><p>怎么基数排序？</p><p>建两个桶，一个用来装个位排序，一个用来装十位排序，我们每次先把数加到个位桶里排序，再加到十位桶排序，这样就可以保证对于每一个十位桶里的数肯定是个位升序的。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们用s读入字符串，保存从s[1]到r[n]，长度为n，且最大值小于m。<br>为了函数操作的方便，约定除s[n]外所有的s[i]都大于0,s[n]=0。<br>函数结束后，结果放在sa数组中，从sa[1]到sa[n]。</p><p>函数的第一步，要对长度为1的字符串进行排序。<br>一般来说，在字符串的 题目中，s的最大值不会很大，所以这里使用了计数排序。<br>如果s的最大值很大，那么把这段代码改成快速排序。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">++tong[x[i]=s[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">sa[tong[x[i]]--]=i;</span><br></pre></td></tr></table></figure></p><p>这里x数组保存的值相当于是rk值。下面的操作只是用x数组来比较字符的大小，所以没有必要求出当前真实的rk值。</p><p>接下来进行若干次基数排序，在实现的时候，这里有一个小优化。<br>基数排序要分两次，第一次是对个位桶排序，第二次是对十位桶排序。对十位桶排序的结果实际上可以利用上一次求得的sa直接算出，没有必要再算一次。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n-j+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">y[++p]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(sa[i]&gt;j)</span><br><span class="line">y[++p]=sa[i]-j;</span><br></pre></td></tr></table></figure></p><p>其中变量j是当前字符串的长度，数组y保存的是对个位桶排序的结果。然后要对十位桶进行排序<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">tong[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">++tong[x[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">sa[tong[x[y[i]]]--]=y[i],y[i]=<span class="number">0</span>;</span><br></pre></td></tr></table></figure></p><p>这样便求出了新的sa值。在求出sa后，下一步是计算rk值。这里要注意的是，可能有多个字符串的rk值是相同的，所以必须比较两个字符串是否完全相同，y数组的值已经没有必要保存，为了节省空间，这里用y数组保存rk。这里又有一个小优化，将x和y定义为指针类型，复制整个数组的操作可 以用交换指针的值代替，不必将数组中值一个一个的复制。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">swap(x,y);</span><br><span class="line">x[sa[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p:++p;</span><br></pre></td></tr></table></figure></p><p>其中cmp函数的代码是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *s,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s[a]==s[b]&amp;&amp;s[a+l]==s[b+l];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里可以看到规定 r[n]=0 的好处，如果 r[a]==r[b] ，说明以 r[a] 或 r[b]开头的长度为 l 的字符串肯定不包括字符 r[n] ，所以调用变量 r[a+l] 和 r[b+l]不会导致数组下标越界，这样就不需要做特殊判断。执行完上面的代码后， rk值保存在 x 数组中，而变量 p 的结果实际上就是不同的字符串的个数。这里可以加一个小优化，如果 p 等于 n ，那么函数可以结束。因为在当前长度的字符串 中 ，已经没有相同的字符串，接下来的排序不会改变 rk 值。例如说明中的第五次排序和另一个例子的第四次排序，实际上是没有必要的。</p><p>对上面的两段代码，循环的初始赋值和终止条件 可以这样写：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span>(p==n)<span class="keyword">break</span>;</span><br><span class="line">m=p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在第一次的排序以后， rk 数组中的最大值小于 p ，所以让 m=p 。</p><p>下面是洛谷模板题的代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,sa[<span class="number">1000005</span>],rk[<span class="number">1000005</span>],tong[<span class="number">1000005</span>],x[<span class="number">1000005</span>],y[<span class="number">1000005</span>],wv[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> *s,<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> s[a]==s[b]&amp;&amp;s[a+l]==s[b+l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">da</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">++tong[x[i]=s[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">sa[tong[x[i]]--]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n-j+<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">y[++p]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(sa[i]&gt;j)</span><br><span class="line">y[++p]=sa[i]-j;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;i++)</span><br><span class="line">tong[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">++tong[x[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">tong[i]+=tong[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">sa[tong[x[y[i]]]--]=y[i],y[i]=<span class="number">0</span>;</span><br><span class="line">swap(x,y);</span><br><span class="line">x[sa[<span class="number">1</span>]]=<span class="number">1</span>;</span><br><span class="line">p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">x[sa[i]]=cmp(y,sa[i<span class="number">-1</span>],sa[i],j)?p:++p;</span><br><span class="line"><span class="keyword">if</span>(p==n)<span class="keyword">break</span>;</span><br><span class="line">m=p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">n=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">da(<span class="number">257</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,sa[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="最长公共前缀"><a href="#最长公共前缀" class="headerlink" title="最长公共前缀"></a>最长公共前缀</h1><p>又叫LCP问题，lcp(i,j)为suffix(sa[i])与suffix(sa[j])的最长公共前缀</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>显而易见的，我们可以得到</p><ul><li>lcp(i,j)=lcp(j,i)</li><li>lcp(i,i)=len(sa[i])=n-sa[i]+1</li></ul><p>这两条性质可以将lcp(i,j)的三种情况变简单</p><ul><li>i&lt;j 计算</li><li>i&gt;j 转化为lcp(j,i)即转化为i&lt;j</li><li>i=j 直接计算</li></ul><h3 id="LCP-Lemma"><a href="#LCP-Lemma" class="headerlink" title="LCP Lemma"></a>LCP Lemma</h3><ul><li>lcp(i,j)=min(lcp(i,k),lcp(k,j)) (对于任意1&lt;=i&lt;=k&lt;=j&lt;=n)</li></ul><p>证明：<br>设p=min(lcp(i,k),lcp(k,j))则lcp(i,k)&gt;=p,lcp(k,j)&gt;=p<br>设suffix(sa[i])=u,suffix(sa[k])=v,suffix(sa[j])=w</p><p>则u和v前p个字符相等，v和w前p个字符相等<br>所以u和w前p个字符相等，则lcp(i,j)&gt;=p</p><p>设lcp(i,j)=q&gt;p则q&gt;=p+1<br>p=min(lcp(i,k),lcp(k,j))，所以u[p+1]!=v[p+1]或v[p+1]!=w[p+1]<br>但是v[p+1]=w[p+1]，自相矛盾</p><p>所以lcp(i,j)&lt;=p</p><p>综上所述lcp(i,j)=p=min(lcp(i,k),lcp(k,j))</p><h3 id="LCP-Theorem"><a href="#LCP-Theorem" class="headerlink" title="LCP Theorem"></a>LCP Theorem</h3><ul><li>lcp(i,j)=min(lcp(k,k-1)) (对于任意1&lt;=i&lt;=k&lt;=j&lt;=n)</li></ul><p>结合LCP Lemma，lcp(i,j)=min(lcp(i,i+1),lcp(i+1,j))  </p><p>而lcp(i,i+1)=lcp(i+1,i)=lcp(i+1,(i+1)-1)</p><p>lcp(i+1,j)=min(lcp(i+1,i+2),min(lcp(i+2,i+3),…))</p><p>最终可以得到用k替换i+1、i+2、…最终得到lcp(i,j)=min(lcp(k,k-1))</p><h2 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h2><p>我们设height[i]=lcp(i,i-1),1&lt;i&lt;=n，显然height[1]=0</p><p>由LCP Theorem得lcp(i,j)=min(height[k]) i&lt;k&lt;=j即i+1&lt;=k&lt;=j</p><p>那怎么求height[i]？<br>设h[i]=height[rk[i]],同样的height[i]=h[sa[i]]</p><p>一条很重要的定理：<br>h[i]&gt;=h[i-1]-1</p><p>我们假设i-1的字符串排名前一位的字符串就为第j个（j=sa[rk[i-1]-1]），注意j不是第i-2个字符串。</p><p>第j个字符串和第i-1个字符串公共前缀为height[rk[i-1]]<br>第j+1个字符串和第i个的关系</p><ol><li>第j个和第i-1个首字母不同<br>那么j+1极可能在i前头，也可能在i后面，没有关系，因为height[rk[i-1]]=0，无论height[rk[i]]是多少都有height[rk[i]]&gt;=height[rk[i-1]]-1，也就是h[i]&gt;=h[i-1]-1</li><li>第j个和第i-1个首字母相同<br>那么由于j+1是j去除首字母得到的，i也是i-1去除首字母的到的那么显然j+1排在i前，同时，第j个字符串和第i-1个字符串的最长公共前缀为height[rk[i-1]]，那么显然k+1和i的最长公共前缀是height[rk[i-1]]-1<br>我们试想一下，对于比第i个字符串排名更靠前的那些字符串，与i最长公共前缀长度最长的肯定是与i紧邻的那个字符串，即sa[rk[i]-1]。但是我们前面求得，有一个排在i前面的字符串j+1，lcp(rk[i],rk[j+1])=height[rk[i-1]]-1<br>又因为height[rk[i]]=lcp(i,i-1)&gt;=lcp(i,j+1)<br>所以height[rk[i]]&gt;=height[rk[i-1]]-1，即h[i]&gt;=h[i-1]-1</li></ol><p>代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_height</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">rk[sa[i]]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">if</span>(rk[i]==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">height[rk[i]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span>(k)--k;</span><br><span class="line">        <span class="keyword">int</span> j=sa[rk[i]<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(j+k&lt;=n&amp;&amp;i+k&lt;=n&amp;&amp;s[i+k]==s[j+k])++k;</span><br><span class="line">        height[rk[i]]=k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)<span class="keyword">return</span> n-sa[i]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i&gt;j)swap(i,j);</span><br><span class="line"><span class="keyword">int</span> ans=INT_MAX;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=i+<span class="number">1</span>;k&lt;=j;k++)</span><br><span class="line">ans=min(ans,height[k]);</span><br><span class="line"><span class="keyword">return</span> ans;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;后缀数组&quot;&gt;&lt;a href=&quot;#后缀数组&quot; class=&quot;headerlink&quot; title=&quot;后缀数组&quot;&gt;&lt;/a&gt;后缀数组&lt;/h1&gt;&lt;h2 id=&quot;后缀&quot;&gt;&lt;a href=&quot;#后缀&quot; class=&quot;headerlink&quot; title=&quot;后缀&quot;&gt;&lt;/a&gt;后缀&lt;/h
      
    
    </summary>
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/categories/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/tags/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
  </entry>
  
  <entry>
    <title>Manacher</title>
    <link href="https://williampetermatthew.github.io/blog/string-manacher/"/>
    <id>https://williampetermatthew.github.io/blog/string-manacher/</id>
    <published>2019-01-14T01:35:26.000Z</published>
    <updated>2019-02-14T13:04:48.005Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,p[<span class="number">51000100</span>],ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">51000100</span>],s[<span class="number">102000200</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">manacher</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxright=<span class="number">0</span>,mid=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;maxright)</span><br><span class="line">            p[i]=min(p[<span class="number">2</span>*mid-i],maxright-i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i-p[i]&gt;=<span class="number">0</span>&amp;&amp;s[i+p[i]]==s[i-p[i]];p[i]++);</span><br><span class="line">        <span class="keyword">if</span>(p[i]+i&gt;maxright)</span><br><span class="line">            maxright=p[i]+i,mid=i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s[<span class="number">0</span>]=s[<span class="number">1</span>]=<span class="string">'#'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        s[i*<span class="number">2</span>+<span class="number">2</span>]=a[i];</span><br><span class="line">        s[i*<span class="number">2</span>+<span class="number">3</span>]=<span class="string">'#'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n=n*<span class="number">2</span>+<span class="number">2</span>;</span><br><span class="line">    s[n]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">    n=<span class="built_in">strlen</span>(a);</span><br><span class="line">    change();</span><br><span class="line">    manacher();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=max(ans,p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码如下：&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/categories/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/tags/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
  </entry>
  
  <entry>
    <title>AC自动机</title>
    <link href="https://williampetermatthew.github.io/blog/string-ACAutomation/"/>
    <id>https://williampetermatthew.github.io/blog/string-ACAutomation/</id>
    <published>2019-01-14T01:32:46.000Z</published>
    <updated>2019-02-15T07:16:52.793Z</updated>
    
    <content type="html"><![CDATA[<p>哇！AC自动机，莫非可以自动AC题目？不，这不可以，<del>不过可以参考我的一篇自动AC机的文章尝试自动AC题目，</del>叫AC自动机的原因是因为它的发明者名为Aho-Corasick，缩写为AC。。。</p><h1 id="AC自动机简单版"><a href="#AC自动机简单版" class="headerlink" title="AC自动机简单版"></a>AC自动机简单版</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">1000005</span>],ch[<span class="number">1000005</span>][<span class="number">26</span>],end[<span class="number">1000005</span>],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[now][s[i]-<span class="string">'a'</span>])</span><br><span class="line">ch[now][s[i]-<span class="string">'a'</span>]=++cnt;</span><br><span class="line">now=ch[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line">end[now]+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">0</span>][i])</span><br><span class="line">&#123;</span><br><span class="line">fail[ch[<span class="number">0</span>][i]]=<span class="number">0</span>;</span><br><span class="line">q.push(ch[<span class="number">0</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[x][i])</span><br><span class="line">&#123;</span><br><span class="line">fail[ch[x][i]]=ch[fail[x]][i];</span><br><span class="line">q.push(ch[x][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ch[x][i]=ch[fail[x]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">acquery</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">&#123;</span><br><span class="line">now=ch[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=now;t&amp;&amp;(~end[t]);t=fail[t])</span><br><span class="line">&#123;</span><br><span class="line">ans+=end[t];</span><br><span class="line">end[t]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">build(s);</span><br><span class="line">&#125;</span><br><span class="line">fail[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">getfail();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,acquery(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AC自动机加强版"><a href="#AC自动机加强版" class="headerlink" title="AC自动机加强版"></a>AC自动机加强版</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">155</span>][<span class="number">75</span>],t[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> fail[<span class="number">1000005</span>],ch[<span class="number">1000005</span>][<span class="number">26</span>],end[<span class="number">1000005</span>],cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">answer</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num,pos;</span><br><span class="line">&#125;a[<span class="number">155</span>];</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(answer a,answer b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.num==b.num?a.pos&lt;b.pos:a.num&gt;b.num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(ch[x],<span class="number">0</span>,<span class="keyword">sizeof</span>(ch[x]));</span><br><span class="line">fail[x]=<span class="number">0</span>;</span><br><span class="line">end[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!ch[now][s[i]-<span class="string">'a'</span>])</span><br><span class="line">ch[now][s[i]-<span class="string">'a'</span>]=++cnt,clean(cnt);</span><br><span class="line">now=ch[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">&#125;</span><br><span class="line">end[now]=num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getfail</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">0</span>][i])</span><br><span class="line">&#123;</span><br><span class="line">fail[ch[<span class="number">0</span>][i]]=<span class="number">0</span>;</span><br><span class="line">q.push(ch[<span class="number">0</span>][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x=q.front();q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[x][i])</span><br><span class="line">&#123;</span><br><span class="line">fail[ch[x][i]]=ch[fail[x]][i];</span><br><span class="line">q.push(ch[x][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">ch[x][i]=ch[fail[x]][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">acquery</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l;i++)</span><br><span class="line">&#123;</span><br><span class="line">now=ch[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=now;t;t=fail[t])</span><br><span class="line">a[end[t]].num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)</span><br><span class="line">&#123;</span><br><span class="line">cnt=<span class="number">0</span>,clean(cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line">a[i].num=<span class="number">0</span>;</span><br><span class="line">a[i].pos=i;</span><br><span class="line">build(s[i],i);</span><br><span class="line">&#125;</span><br><span class="line">fail[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">getfail();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,t+<span class="number">1</span>);</span><br><span class="line">acquery(t);</span><br><span class="line">sort(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%s\n"</span>,a[<span class="number">1</span>].num,s[a[<span class="number">1</span>].pos]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].num==a[i<span class="number">-1</span>].num)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s[a[i].pos]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;哇！AC自动机，莫非可以自动AC题目？不，这不可以，&lt;del&gt;不过可以参考我的一篇自动AC机的文章尝试自动AC题目，&lt;/del&gt;叫AC自动机的原因是因为它的发明者名为Aho-Corasick，缩写为AC。。。&lt;/p&gt;
&lt;h1 id=&quot;AC自动机简单版&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/categories/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/tags/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
  </entry>
  
  <entry>
    <title>字符串哈希</title>
    <link href="https://williampetermatthew.github.io/blog/string-hash/"/>
    <id>https://williampetermatthew.github.io/blog/string-hash/</id>
    <published>2019-01-14T01:26:53.000Z</published>
    <updated>2019-02-26T01:46:37.464Z</updated>
    
    <content type="html"><![CDATA[<p>字符串万能解法</p><p>模板题P3370</p><h1 id="单哈"><a href="#单哈" class="headerlink" title="单哈"></a>单哈</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> base=<span class="number">63l</span>l;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1505</span>];</span><br><span class="line"><span class="keyword">int</span> v[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">0l</span>l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp=(tmp*base+s[i])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">v[i]=hash(s);</span><br><span class="line">&#125;</span><br><span class="line">sort(v+<span class="number">1</span>,v+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(v[i]!=v[i<span class="number">-1</span>])</span><br><span class="line">ans++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="双哈"><a href="#双哈" class="headerlink" title="双哈"></a>双哈</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> base=<span class="number">63l</span>l;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod1=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod2=<span class="number">1e9</span>+<span class="number">9</span>;</span><br><span class="line"><span class="keyword">int</span> n,ans;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1505</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hashta</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> v1,v2;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(hashta a,hashta b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.v1==b.v1?a.v2&lt;b.v2:a.v1&lt;b.v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(hashta a,hashta b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.v1!=b.v1||a.v2!=b.v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;v[<span class="number">10005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash1</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">0l</span>l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp=(tmp*base+s[i])%mod1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash2</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">0l</span>l;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(s);i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp=(tmp*base+s[i])%mod2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">v[i]=(hashta)&#123;hash1(s),hash2(s)&#125;;</span><br><span class="line">&#125;</span><br><span class="line">sort(v+<span class="number">1</span>,v+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">if</span>(v[i]!=v[i<span class="number">-1</span>])</span><br><span class="line">ans++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="O-n-处理一维串，-O-1-提取子串哈希"><a href="#O-n-处理一维串，-O-1-提取子串哈希" class="headerlink" title="$O(n)$处理一维串，$O(1)$提取子串哈希"></a>$O(n)$处理一维串，$O(1)$提取子串哈希</h1><h2 id="单哈-1"><a href="#单哈-1" class="headerlink" title="单哈"></a>单哈</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e7</span>+<span class="number">7</span>,base=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> qb[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sa[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ht[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> h[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">ht[i]=((ht[i<span class="number">-1</span>]*base)%mod+sa[i])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=((ht[i]-(ht[i-m]*qb[m])%mod)%mod+mod)%mod;</span><br><span class="line">h[tmp]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">ht[i]=((ht[i<span class="number">-1</span>]*base)%mod+sa[i])%mod;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;ht[m]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">return</span> h[ht[m]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">qb[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">qb[i]=(qb[i<span class="number">-1</span>]*base)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pre();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">sa[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">hashta();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=q;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">sa[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hashon());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双哈-1"><a href="#双哈-1" class="headerlink" title="双哈"></a>双哈</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> moda=<span class="number">1e7</span>+<span class="number">7</span>,basea=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> modb=<span class="number">1e7</span>+<span class="number">9</span>,baseb=<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> qba[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> qbb[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sa[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ht[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> hasha[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">bool</span> hashb[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">ht[i]=((ht[i<span class="number">-1</span>]*basea)%moda+sa[i])%moda;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=((ht[i]-(ht[i-m]*qba[m])%moda)%moda+moda)%moda;</span><br><span class="line">hasha[tmp]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashtb</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">ht[i]=((ht[i<span class="number">-1</span>]*baseb)%modb+sa[i])%modb;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=m;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=((ht[i]-(ht[i-m]*qbb[m])%modb)%modb+modb)%modb;</span><br><span class="line">hashb[tmp]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">ht[i]=((ht[i<span class="number">-1</span>]*basea)%moda+sa[i])%moda;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;ht[m]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">bool</span> ta=hasha[ht[m]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">ht[i]=((ht[i<span class="number">-1</span>]*baseb)%modb+sa[i])%modb;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;ht[m]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">bool</span> tb=hashb[ht[m]];</span><br><span class="line"><span class="keyword">return</span> ta&amp;&amp;tb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">qba[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">qba[i]=(qba[i<span class="number">-1</span>]*basea)%moda;</span><br><span class="line">qbb[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">qbb[i]=(qbb[i<span class="number">-1</span>]*baseb)%modb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pre();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">sa[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line">hashta();</span><br><span class="line">hashtb();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=q;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">sa[i]=s[i]-<span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hashon());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="O-n-2-处理二维串，-O-1-提取子矩阵哈希"><a href="#O-n-2-处理二维串，-O-1-提取子矩阵哈希" class="headerlink" title="$O(n^2)$处理二维串，$O(1)$提取子矩阵哈希"></a>$O(n^2)$处理二维串，$O(1)$提取子矩阵哈希</h1><p><a href="http://contest-hunter.org:83/contest/0x18%E3%80%8C%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%8D%E7%BB%83%E4%B9%A0/1806%20Matrix" target="_blank" rel="noopener">Contest Hunter 1806</a></p><h2 id="单哈-2"><a href="#单哈-2" class="headerlink" title="单哈"></a>单哈</h2><p>pts:90（其实模数好的话可以AC）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e7</span>+<span class="number">7</span>,base1=<span class="number">2</span>,base2=<span class="number">9191891</span>;</span><br><span class="line"><span class="keyword">int</span> qb1[<span class="number">1005</span>],qb2[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sa[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ht[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> h[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">ht[i][j]=((ht[i][j<span class="number">-1</span>]*base1)%mod+sa[i][j])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">ht[i][j]=((ht[i<span class="number">-1</span>][j]*base2)%mod+ht[i][j])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=b;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=((ht[i][j]-(ht[i][j-b]*qb1[b])%mod-(ht[i-a][j]*qb2[a])%mod+((ht[i-a][j-b]*qb1[b])%mod*qb2[a])%mod)%mod+mod)%mod;</span><br><span class="line">h[tmp]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">ht[i][j]=((ht[i][j<span class="number">-1</span>]*base1)%mod+sa[i][j])%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">ht[i][j]=((ht[i<span class="number">-1</span>][j]*base2)%mod+ht[i][j])%mod;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;ht[a][b]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">return</span> h[ht[a][b]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">qb1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">qb2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">qb1[i]=(qb1[i<span class="number">-1</span>]*base1)%mod;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">qb2[i]=(qb2[i<span class="number">-1</span>]*base2)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pre();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">sa[i][j]=s[i][j]-<span class="string">'0'</span>;</span><br><span class="line">hashta();</span><br><span class="line"><span class="built_in">memset</span>(ht,<span class="number">0</span>,<span class="keyword">sizeof</span>(ht));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=q;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">sa[i][j]=s[i][j]-<span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hashon());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="双哈-2"><a href="#双哈-2" class="headerlink" title="双哈"></a>双哈</h2><p>pts:100<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,a,b,q;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> moda=<span class="number">1e7</span>+<span class="number">7</span>,basea1=<span class="number">2</span>,basea2=<span class="number">9191891</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> modb=<span class="number">1e7</span>+<span class="number">9</span>,baseb1=<span class="number">7</span>,baseb2=<span class="number">6498497</span>;</span><br><span class="line"><span class="keyword">int</span> qba1[<span class="number">1005</span>],qba2[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> qbb1[<span class="number">1005</span>],qbb2[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> sa[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">int</span> ht[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">bool</span> hasha[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">bool</span> hashb[<span class="number">10000010</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashta</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">ht[i][j]=((ht[i][j<span class="number">-1</span>]*basea1)%moda+sa[i][j])%moda;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">ht[i][j]=((ht[i<span class="number">-1</span>][j]*basea2)%moda+ht[i][j])%moda;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=b;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=((ht[i][j]-(ht[i][j-b]*qba1[b])%moda-(ht[i-a][j]*qba2[a])%moda+((ht[i-a][j-b]*qba1[b])%moda*qba2[a])%moda)%moda+moda)%moda;</span><br><span class="line">hasha[tmp]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hashtb</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">ht[i][j]=((ht[i][j<span class="number">-1</span>]*baseb1)%modb+sa[i][j])%modb;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">ht[i][j]=((ht[i<span class="number">-1</span>][j]*baseb2)%modb+ht[i][j])%modb;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=a;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=b;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=((ht[i][j]-(ht[i][j-b]*qbb1[b])%modb-(ht[i-a][j]*qbb2[a])%modb+((ht[i-a][j-b]*qbb1[b])%modb*qbb2[a])%modb)%modb+modb)%modb;</span><br><span class="line">hashb[tmp]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;tmp&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hashon</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">ht[i][j]=((ht[i][j<span class="number">-1</span>]*basea1)%moda+sa[i][j])%moda;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">ht[i][j]=((ht[i<span class="number">-1</span>][j]*basea2)%moda+ht[i][j])%moda;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;ht[a][b]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">bool</span> ta=hasha[ht[a][b]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">ht[i][j]=((ht[i][j<span class="number">-1</span>]*baseb1)%modb+sa[i][j])%modb;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">ht[i][j]=((ht[i<span class="number">-1</span>][j]*baseb2)%modb+ht[i][j])%modb;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;ht[a][b]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">bool</span> tb=hashb[ht[a][b]];</span><br><span class="line"><span class="keyword">return</span> ta&amp;&amp;tb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">qba1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">qba2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">qba1[i]=(qba1[i<span class="number">-1</span>]*basea1)%moda;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">qba2[i]=(qba2[i<span class="number">-1</span>]*basea2)%moda;</span><br><span class="line">qbb1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">qbb2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">qbb1[i]=(qbb1[i<span class="number">-1</span>]*baseb1)%modb;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">1005</span>;i++)</span><br><span class="line">qbb2[i]=(qbb2[i<span class="number">-1</span>]*baseb2)%modb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pre();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;n,&amp;m,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">sa[i][j]=s[i][j]-<span class="string">'0'</span>;</span><br><span class="line">hashta();</span><br><span class="line">hashtb();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=q;t++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b;j++)</span><br><span class="line">sa[i][j]=s[i][j]-<span class="string">'0'</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hashon());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;字符串万能解法&lt;/p&gt;
&lt;p&gt;模板题P3370&lt;/p&gt;
&lt;h1 id=&quot;单哈&quot;&gt;&lt;a href=&quot;#单哈&quot; class=&quot;headerlink&quot; title=&quot;单哈&quot;&gt;&lt;/a&gt;单哈&lt;/h1&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/categories/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/tags/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
  </entry>
  
  <entry>
    <title>Trie树，字典树</title>
    <link href="https://williampetermatthew.github.io/blog/string-trie/"/>
    <id>https://williampetermatthew.github.io/blog/string-trie/</id>
    <published>2019-01-14T01:25:29.000Z</published>
    <updated>2019-02-14T13:03:08.650Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下：<br>（Luogu P2580 于是他错误的点名开始了）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> son[N][<span class="number">26</span>],n,m,len,tot;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">bool</span> tag[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!son[now][s[i]-<span class="string">'a'</span>])</span><br><span class="line">            son[now][s[i]-<span class="string">'a'</span>]=++tot;</span><br><span class="line">        now=son[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    tag[now]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!son[now][s[i]-<span class="string">'a'</span>])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        now=son[now][s[i]-<span class="string">'a'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!tag[now])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(vis[now])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    vis[now]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;代码如下：&lt;br&gt;（Luogu P2580 于是他错误的点名开始了）&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;sp
      
    
    </summary>
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/categories/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
    
      <category term="自缚船" scheme="https://williampetermatthew.github.io/tags/%E8%87%AA%E7%BC%9A%E8%88%B9/"/>
    
  </entry>
  
  <entry>
    <title>【Python入门】01 环境设置</title>
    <link href="https://williampetermatthew.github.io/blog/Python-01/"/>
    <id>https://williampetermatthew.github.io/blog/Python-01/</id>
    <published>2019-01-13T06:42:00.000Z</published>
    <updated>2019-02-14T13:53:19.874Z</updated>
    
    <content type="html"><![CDATA[<p>为什么我突然写这个坑贼大的系列？原因是我一个学长貌似他们要学Python于是找到了我，额，为了防止像我在机房教高一入门把他们全体说蒙的情况发生，我只好硬着头皮总结下这些东西，尽量照顾萌新，但是我还是要默认读者具有计算机基础知识，否则还是很难继续阅读的。</p><h1 id="安装Python"><a href="#安装Python" class="headerlink" title="安装Python"></a>安装Python</h1><p>相比我们介绍到的C++来说，Python的编辑器和编译器被官方融于一体，只需要下载<a href="https://www.python.org/downloads/release" target="_blank" rel="noopener">官网</a>上的Python安装即可。<br><img src="https://williampetermatthew.github.io/pic/Python01-01.png" alt=""><br>特别地，我们要在安装Python时选中<code>Add Python 3.7 to PATH</code>。</p><h1 id="运行Python"><a href="#运行Python" class="headerlink" title="运行Python"></a>运行Python</h1><p>我们打开命令行，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure></p><p>如果此时出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20:52) [MSC v.1916 32 bit (Intel)] on win32</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure></p><p>这样的文字，那么就说明已经安装成功。</p><p>如果提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;python&apos; 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br></pre></td></tr></table></figure></p><p>则说明未安装或者在安装时没有选择<code>Add Python 3.7 to PATH</code>。</p><h1 id="Python交互模式"><a href="#Python交互模式" class="headerlink" title="Python交互模式"></a>Python交互模式</h1><p>在命令行输入python后进入的样子称为<code>Python交互模式</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│管理员：C:\Windows\System32\cmd.exe - Python       - □ x │</span><br><span class="line">├────────────────────────────────────────────────────────┤</span><br><span class="line">│Microsoft Windows [版本 6.1.7601]                        │</span><br><span class="line">│版权所有 (c) 2009 Microsoft Corporation。保留所有权利。     │</span><br><span class="line">│                                                        │</span><br><span class="line">│C:\Users\Administrator&gt;python                           │</span><br><span class="line">│Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20│</span><br><span class="line">│:52) [MSC v.1916 32 bit (Intel)] on win32               │</span><br><span class="line">│Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for mor│</span><br><span class="line">│e information.                                          │</span><br><span class="line">│&gt;&gt;&gt; _                                                   │</span><br><span class="line">│                                                        │</span><br><span class="line">│                                                        │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure></p><p>可以输入<code>exit()</code>退出此交互模式</p><p>您可以写一个代码（可以从提前尝试部分复制）保存为<code>.py</code>文件（例如a.py)<br>请将命令行路径调整到保存文件的目录然后在命令行模式执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python a.py</span><br></pre></td></tr></table></figure></p><p>如果是复制提前尝试部分的代码，应该可以在命令行看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">300</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><p>表示运行了该程序。</p><p>Python交互模式的代码是输入一行，执行一行，而命令行模式下直接运行.py文件是一次性执行该文件内的所有代码。可见，Python交互模式主要是为了调试Python代码用的，也便于初学者学习，它不是正式运行Python代码的环境！</p><h1 id="系统菜单中的四个东西"><a href="#系统菜单中的四个东西" class="headerlink" title="系统菜单中的四个东西"></a>系统菜单中的四个东西</h1><ul><li>IDLE (Python 3.7 32-bit)</li><li>Python 3.7 (32-bit)</li><li>Python 3.7 Manuals (32-bit)</li><li>Python 3.7 Module Docs (32-bit)</li></ul><p>第一个东西点开是一个白框下的Python交互模式，我们可以点击菜单栏上的<code>File-&gt;New File</code>来写一份新代码，或者<code>File-&gt;Open</code>打开代码，然后在新弹出来的窗口中选择<code>Run-&gt;Run Module</code>执行它。<br>第二个东西点开发现就是Python交互模式，与命令行打开的不用的是，此时输入exit()不会进入命令行模式而是会直接关闭窗口<br>第三个东西是一个英文手册，是一个完全看不懂而且可以忽略的东西<br>第四个东西一点开发现弹出了一个网页，发现也是英文手册，也可以忽略。对了，如果要退出此状态要找到打开的一个小黑框，在里面输入q敲回车即可</p><hr><h1 id="提前尝试"><a href="#提前尝试" class="headerlink" title="提前尝试"></a>提前尝试</h1><p>请在Python交互模式中分行输入以下代码并执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span>+<span class="number">200</span></span><br><span class="line">print(<span class="string">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure></p><p>请创建两个.py文件输入以下代码并分别执行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="number">100</span>+<span class="number">200</span>)</span><br><span class="line">print(<span class="string">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span>+<span class="number">200</span></span><br><span class="line">print(<span class="string">'Hello, world!'</span>)</span><br></pre></td></tr></table></figure><p>观察显示的的结果并尝试完成以下任务：</p><ol><li>思考这段代码中每行都表示什么意思</li><li>试着修改显示内容并尝试减乘和除法</li><li>为什么最后的代码执行时没有第一行</li></ol><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为什么我突然写这个坑贼大的系列？原因是我一个学长貌似他们要学Python于是找到了我，额，为了防止像我在机房教高一入门把他们全体说蒙的情况发生，我只好硬着头皮总结下这些东西，尽量照顾萌新，但是我还是要默认读者具有计算机基础知识，否则还是很难继续阅读的。&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
      <category term="Python入门" scheme="https://williampetermatthew.github.io/categories/Python%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Python入门" scheme="https://williampetermatthew.github.io/tags/Python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>【C++入门】01 环境设置</title>
    <link href="https://williampetermatthew.github.io/blog/Cpp-01/"/>
    <id>https://williampetermatthew.github.io/blog/Cpp-01/</id>
    <published>2019-01-13T02:25:00.000Z</published>
    <updated>2019-02-14T13:52:22.785Z</updated>
    
    <content type="html"><![CDATA[<p>C++入门主要方便的是OI选手，OI选手一般的系统环境为Windows而竞赛环境为Linux。所以我们对环境的介绍会以Windows为主，Linux为辅。</p><h1 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h1><p>我们要将一份代码转化为计算机能读懂能运行的程序，必不可少的就是编译器。C++的编译器名字叫做g++，请注意gcc是C语言的编译器而不是C++语言的。</p><p>在Windows上，默认是没有安装g++的，所以我们需要手动安装g++。请通过下载安装<a href="http://www.mingw.org/" target="_blank" rel="noopener">MinGW</a>来安装g++。安装后，然后打开系统属性，选择“高级系统设置”（“高级”选项卡），找到“环境变量”并点击。<br><img src="https://williampetermatthew.github.io/pic/Cpp01-01.png" alt=""><br>然后找到<strong>系统变量</strong>中的<code>Path</code>并编辑<br><img src="https://williampetermatthew.github.io/pic/Cpp01-02.png" alt=""><br>在末尾以”;”分割地址，并输入g++的目录。<br><img src="https://williampetermatthew.github.io/pic/Cpp01-03.png" alt=""><br>点击确定。在命令提示符输入g++并敲回车，如果提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++: fatal error: no input files</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure></p><p>则证明设置正确，如果提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;g++&apos; 不是内部或外部命令，也不是可运行的程序或批处理文件。</span><br></pre></td></tr></table></figure></p><p>则说明设置存在问题。</p><p>在Linux上，如果OI选手采用的是NOI Linux，那么是已经安装g++的。<br>如何查看其它版本Linux是否安装了g++？<br>打开终端，输入g++，如果提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++: fatal error: no input files</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure></p><p>说明已经安装，若没有，可以在软件中心搜索g++安装，或者打开终端，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install g++</span><br></pre></td></tr></table></figure></p><p>即可安装。</p><h1 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h1><p>在Windows上，作为工程党的肯定要使用<a href="https://visualstudio.microsoft.com/zh-hans/" target="_blank" rel="noopener">Visual Studio</a>，但是作为OIer，入门级的装备肯定是Dev C++。<br>首先我们下载<code>Dev C++ 5.7.1</code>。为什么选择5.7.1版本？因为这个版本是支持MinGW的最稳定版本，而Dev C++最新的5.11版本是支持TDM-GCC的版本，由于存在bug导致调试不了，所以不推荐大家使用。<br>下载完以后我们安装，打开Dev C++便可以编写一份愉悦的代码。</p><p>同时，在Windows上，我也推荐使用Notepad++作为编辑器，Notepad++作为一款轻量化的编辑器但是支持许多插件，可以做到十分优秀的编辑效果。</p><p>在Linux上，大部分选手都推荐大家使用vim作为编辑器，这是因为vim有着极多的快捷键可以帮助你快速编辑甚至不需要用到鼠标。但是作为从Windows上Dev C++过渡到Linux的OIer，我的首选是系统自带的编辑器——gedit，它具有强大的插件后台，使得体验效果与Dev C++类似（除了不能使用方便的调试）。</p><p>同时，在Linux上，我也推荐使用Notepad++作为编辑器，但是Linux上没有Notepad++，我们只能采用一个替代版——Notepadqq。在终端执行以下命令，即可安装Notepadqq。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install snapd</span><br><span class="line">sudo snap install --classic notepadqq</span><br></pre></td></tr></table></figure></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>请在编辑器里编辑一份代码（可从提前尝试部分复制），然后保存成<code>.cpp</code>文件（例如a.cpp）。</p><p>请将命令行/终端路径调整到保存文件的目录然后执行以下命令进行编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ a.cpp -o a</span><br></pre></td></tr></table></figure></p><p>其中a.cpp你是保存的文件名，-o表示不开启任何优化开关（以后会讲），a即你想要的可执行文件名字（在Windows的可执行文件扩展名必须为.exe而Linux则不是，所以执行此命令后Windows生成的程序会在末尾增加.exe而Linux不会）。</p><p>在Windows下，在命令行输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.exe</span><br></pre></td></tr></table></figure></p><p>执行程序。</p><p>在Linux下，在终端输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a</span><br></pre></td></tr></table></figure></p><p>执行程序，其中的.表示当前目录./a即为当前目录下的a程序。</p><p>如果是复制提前尝试部分的代码，应该可以在命令行或终端看到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><p>表示运行了该程序。</p><hr><h1 id="提前尝试"><a href="#提前尝试" class="headerlink" title="提前尝试"></a>提前尝试</h1><p>请在编辑器中输入以下代码并编译执行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello, world!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>观察显示的的结果并尝试完成以下任务：</p><ol><li>思考这段代码中每行都表示什么意思</li><li>删除某些行测试出一个程序最短长度</li><li>试着修改显示内容甚至输出多行内容</li></ol><hr><blockquote><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/80x15.png" alt="知识共享许可协议"></a></p><p><a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener"><img src="https://williampetermatthew.github.io/pic/88x31.png" alt="知识共享许可协议"></a></p><p>本作品采用<a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="noopener">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;C++入门主要方便的是OI选手，OI选手一般的系统环境为Windows而竞赛环境为Linux。所以我们对环境的介绍会以Windows为主，Linux为辅。&lt;/p&gt;
&lt;h1 id=&quot;编译器&quot;&gt;&lt;a href=&quot;#编译器&quot; class=&quot;headerlink&quot; title=&quot;编
      
    
    </summary>
    
      <category term="C++入门" scheme="https://williampetermatthew.github.io/categories/C-%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="C++入门" scheme="https://williampetermatthew.github.io/tags/C-%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
